{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 11, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/dotenv%4016.4.7/node_modules/dotenv/lib/main.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/dotenv%4016.4.7/node_modules/dotenv/lib/env-options.js"],"sourcesContent":["// ../config.js accepts options via environment variables\nconst options = {}\n\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n  options.encoding = process.env.DOTENV_CONFIG_ENCODING\n}\n\nif (process.env.DOTENV_CONFIG_PATH != null) {\n  options.path = process.env.DOTENV_CONFIG_PATH\n}\n\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n  options.debug = process.env.DOTENV_CONFIG_DEBUG\n}\n\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n  options.override = process.env.DOTENV_CONFIG_OVERRIDE\n}\n\nif (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {\n  options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY\n}\n\nmodule.exports = options\n"],"names":[],"mappings":"AAAA,yDAAyD;AACzD,MAAM,UAAU,CAAC;AAEjB,IAAI,QAAQ,GAAG,CAAC,sBAAsB,IAAI,MAAM;IAC9C,QAAQ,QAAQ,GAAG,QAAQ,GAAG,CAAC,sBAAsB;AACvD;AAEA,IAAI,QAAQ,GAAG,CAAC,kBAAkB,IAAI,MAAM;IAC1C,QAAQ,IAAI,GAAG,QAAQ,GAAG,CAAC,kBAAkB;AAC/C;AAEA,IAAI,QAAQ,GAAG,CAAC,mBAAmB,IAAI,MAAM;IAC3C,QAAQ,KAAK,GAAG,QAAQ,GAAG,CAAC,mBAAmB;AACjD;AAEA,IAAI,QAAQ,GAAG,CAAC,sBAAsB,IAAI,MAAM;IAC9C,QAAQ,QAAQ,GAAG,QAAQ,GAAG,CAAC,sBAAsB;AACvD;AAEA,IAAI,QAAQ,GAAG,CAAC,wBAAwB,IAAI,MAAM;IAChD,QAAQ,UAAU,GAAG,QAAQ,GAAG,CAAC,wBAAwB;AAC3D;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/dotenv%4016.4.7/node_modules/dotenv/lib/cli-options.js"],"sourcesContent":["const re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/\n\nmodule.exports = function optionMatcher (args) {\n  return args.reduce(function (acc, cur) {\n    const matches = cur.match(re)\n    if (matches) {\n      acc[matches[1]] = matches[2]\n    }\n    return acc\n  }, {})\n}\n"],"names":[],"mappings":"AAAA,MAAM,KAAK;AAEX,OAAO,OAAO,GAAG,SAAS,cAAe,IAAI;IAC3C,OAAO,KAAK,MAAM,CAAC,SAAU,GAAG,EAAE,GAAG;QACnC,MAAM,UAAU,IAAI,KAAK,CAAC;QAC1B,IAAI,SAAS;YACX,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE;QAC9B;QACA,OAAO;IACT,GAAG,CAAC;AACN","ignoreList":[0]}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/dotenv%4016.4.7/node_modules/dotenv/config.js"],"sourcesContent":["(function () {\n  require('./lib/main').config(\n    Object.assign(\n      {},\n      require('./lib/env-options'),\n      require('./lib/cli-options')(process.argv)\n    )\n  )\n})()\n"],"names":[],"mappings":"AAAA,CAAC;IACC,2HAAsB,MAAM,CAC1B,OAAO,MAAM,CACX,CAAC,sIAED,kIAA6B,QAAQ,IAAI;AAG/C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/entity.ts"],"sourcesContent":["export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = Object.getPrototypeOf(value).constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aAAa,OAAO,GAAA,CAAI,oBAAoB;AAClD,MAAM,mBAAmB,OAAO,GAAA,CAAI,0BAA0B;AAU9D,SAAS,GAAsC,KAAA,EAAY,IAAA,EAAmC;IACpG,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;QACxC,OAAO;IACR;IAEA,IAAI,iBAAiB,MAAM;QAC1B,OAAO;IACR;IAEA,IAAI,CAAC,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,MAAM,UAAU,GAAG;QAC5D,MAAM,IAAI,MACT,CAAA,OAAA,EACC,KAAK,IAAA,IAAQ,WACd,CAAA,6HAAA,CAAA;IAEF;IAEA,IAAI,MAAM,OAAO,cAAA,CAAe,KAAK,EAAE,WAAA;IACvC,IAAI,KAAK;QAER,MAAO,IAAK;YACX,IAAI,cAAc,OAAO,GAAA,CAAI,UAAU,CAAA,KAAM,IAAA,CAAK,UAAU,CAAA,EAAG;gBAC9D,OAAO;YACR;YAEA,MAAM,OAAO,cAAA,CAAe,GAAG;QAChC;IACD;IAEA,OAAO;AACR","ignoreList":[0]}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/tracing-utils.ts"],"sourcesContent":["export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,KAA6B,EAAA,EAAA,GAA0B,IAAA,EAAY;IAClF,OAAO,GAAG,GAAG,IAAI;AAClB","ignoreList":[0]}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/table.utils.ts"],"sourcesContent":["/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n"],"names":[],"mappings":";;;AACO,MAAM,YAAY,OAAO,GAAA,CAAI,cAAc","ignoreList":[0]}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/foreign-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAanB,MAAM,kBAAkB;IAC9B,OAAA,yNAAiB,aAAU,CAAA,GAAY,sBAAA;IAAA,cAAA,GAGvC,UAAA;IAAA,cAAA,GAGA,YAA4C,YAAA;IAAA,cAAA,GAG5C,YAA4C,YAAA;IAE5C,YACC,MAAA,EAKA,OAAA,CAIC;QACD,IAAA,CAAK,SAAA,GAAY,MAAM;YACtB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBAAE;gBAAM;gBAAS,cAAc,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA;gBAAkB;YAAe;QAC3F;QACA,IAAI,SAAS;YACZ,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;YACzB,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;QAC1B;IACD;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY,WAAW,KAAA,IAAY,cAAc;QACtD,OAAO,IAAA;IACR;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY,WAAW,KAAA,IAAY,cAAc;QACtD,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAA4B;QACjC,OAAO,IAAI,WAAW,OAAO,IAAI;IAClC;AACD;AAIO,MAAM,WAAW;IAOvB,YAAqB,KAAA,EAAgB,OAAA,CAA4B;QAA5C,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;QACxB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;IACzB;IAVA,OAAA,yNAAiB,aAAU,CAAA,GAAY,eAAA;IAE9B,UAAA;IACA,SAAA;IACA,SAAA;IAQT,UAAkB;QACjB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,IAAA,CAAK,SAAA,CAAU;QACzD,MAAM,cAAc,QAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACvD,MAAM,qBAAqB,eAAe,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACrE,MAAM,SAAS;YACd,IAAA,CAAK,KAAA,iOAAM,YAAS,CAAA;eACjB;YACH,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA,iOAAM,YAAS,CAAA;eAC/B;SACJ;QACA,OAAO,QAAQ,GAAG,OAAO,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IACnC;AACD;AAOO,SAAS,WAKf,MAAA,EAKoB;IACpB,SAAS,eAAe;QACvB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI;QAC1C,OAAO;YACN;YACA;YACA;QACD;IACD;IAEA,OAAO,IAAI,kBAAkB,YAAY;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/column-builder.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SingleStoreColumn } from './singlestore-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Assume, Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'singlestore' | 'common';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tidentity: T extends { identity: 'always' } ? 'always' : T extends { identity: 'byDefault' } ? 'byDefault' : undefined;\n\tgenerated: T extends { generated: infer G } ? unknown extends G ? undefined\n\t\t: G extends undefined ? undefined\n\t\t: G\n\t\t: undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tidentity: T extends { identity: infer U } ? U : unknown;\n\t\tgenerated: T extends { generated: infer G } ? G extends undefined ? unknown : G : unknown;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tkeyAsName: boolean;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentity<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tidentity: TType;\n\t};\n};\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tkeyAsName: name === '',\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this, {\n\t\ttype: 'always';\n\t}>;\n\n\t/** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n\tsetName(name: string) {\n\t\tif (this.config.name !== '') return;\n\t\tthis.config.name = name;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<\n\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t{},\n\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t>\n\t: TDialect extends 'mysql' ? MySqlColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'mysqlColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'common' ? Column<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'singlestore' ? SingleStoreColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'singlestoreColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn : never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, {\n\t\t\t_:\n\t\t\t\t& Omit<TConfigMap[Key]['_'], 'name'>\n\t\t\t\t& { name: TConfigMap[Key]['_']['name'] extends '' ? Assume<Key, string> : TConfigMap[Key]['_']['name'] };\n\t\t}, TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'singlestore' ? SingleStoreColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAiLpB,MAAe,cAKyB;IAC9C,OAAA,yNAAiB,aAAU,CAAA,GAAY,gBAAA;IAI7B,OAAA;IAEV,YAAY,IAAA,EAAiB,QAAA,EAAyB,UAAA,CAA6B;QAClF,IAAA,CAAK,MAAA,GAAS;YACb;YACA,WAAW,SAAS;YACpB,SAAS;YACT,SAAS,KAAA;YACT,YAAY;YACZ,YAAY;YACZ,UAAU;YACV,YAAY,KAAA;YACZ,YAAY,KAAA;YACZ;YACA;YACA,WAAW,KAAA;QACZ;IACD;IAAA;;;;;;;;;;GAAA,GAaA,QAAmC;QAClC,OAAO,IAAA;IACR;IAAA;;;;GAAA,GAOA,UAAyB;QACxB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,OAAO,IAAA;IACR;IAAA;;;;;;GAAA,GASA,QAAQ,KAAA,EAA+F;QACtG,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;;;;GAAA,GAQA,WACC,EAAA,EACsC;QACtC,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;QACxB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;GAAA,GAKA,WAAW,IAAA,CAAK,UAAA,CAAA;IAAA;;;;;;GAAA,GAShB,YACC,EAAA,EACmB;QACnB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;GAAA,GAKA,YAAY,IAAA,CAAK,WAAA,CAAA;IAAA;;;;GAAA,GAOjB,aAEA;QACC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,OAAO,IAAA;IAER;IAAA,0GAAA,GAUA,QAAQ,IAAA,EAAc;QACrB,IAAI,IAAA,CAAK,MAAA,CAAO,IAAA,KAAS,IAAI;QAC7B,IAAA,CAAK,MAAA,CAAO,IAAA,GAAO;IACpB;AACD","ignoreList":[0]}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/unique-constraint.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAInB,SAAS,OAAO,IAAA,EAA0C;IAChE,OAAO,IAAI,0BAA0B,IAAI;AAC1C;AAEO,SAAS,cAAc,KAAA,EAAgB,OAAA,EAAmB;IAChE,OAAO,GAAG,KAAA,iOAAM,YAAS,CAAC,CAAA,CAAA,EAAI,QAAQ,IAAA,CAAK,GAAG,CAAC,CAAA,OAAA,CAAA;AAChD;AAEO,MAAM,wBAAwB;IAQpC,YACC,OAAA,EACQ,IAAA,CACP;QADO,IAAA,CAAA,IAAA,GAAA;QAER,IAAA,CAAK,OAAA,GAAU;IAChB;IAZA,OAAA,yNAAiB,aAAU,CAAA,GAAY,4BAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAEA,yBAAyB,MAAA;IASzB,mBAAmB;QAClB,IAAA,CAAK,sBAAA,GAAyB;QAC9B,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAAkC;QACvC,OAAO,IAAI,iBAAiB,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,sBAAA,EAAwB,IAAA,CAAK,IAAI;IACxF;AACD;AAEO,MAAM,0BAA0B;IACtC,OAAA,yNAAiB,aAAU,CAAA,GAAY,8BAAA;IAAA,cAAA,GAGvC,KAAA;IAEA,YACC,IAAA,CACC;QACD,IAAA,CAAK,IAAA,GAAO;IACb;IAEA,GAAA,GAAM,OAAA,EAAoC;QACzC,OAAO,IAAI,wBAAwB,SAAS,IAAA,CAAK,IAAI;IACtD;AACD;AAEO,MAAM,iBAAiB;IAO7B,YAAqB,KAAA,EAAgB,OAAA,EAAqB,gBAAA,EAA2B,IAAA,CAAe;QAA/E,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO,QAAQ,cAAc,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,CAAC;QACvF,IAAA,CAAK,gBAAA,GAAmB;IACzB;IAVA,OAAA,yNAAiB,aAAU,CAAA,GAAY,qBAAA;IAE9B,QAAA;IACA,KAAA;IACA,mBAA4B,MAAA;IAQrC,UAAU;QACT,OAAO,IAAA,CAAK,IAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 695, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/column.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\tidentity: undefined | 'always' | 'byDefault';\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly keyAsName: boolean;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.keyAsName = config.keyAsName;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n"],"names":[],"mappings":";;;AAOA,SAAS,kBAAkB;;AAuDpB,MAAe,OAIkD;IAwBvE,YACU,KAAA,EACT,MAAA,CACC;QAFQ,IAAA,CAAA,KAAA,GAAA;QAGT,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,IAAA,GAAO,OAAO,IAAA;QACnB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QACtB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QACtB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,OAAA,GAAU,OAAO,UAAA;QACtB,IAAA,CAAK,QAAA,GAAW,OAAO,QAAA;QACvB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,QAAA,GAAW,OAAO,QAAA;QACvB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,iBAAA,GAAoB,OAAO,iBAAA;IACjC;IA3CA,OAAA,yNAAiB,aAAU,CAAA,GAAY,SAAA;IAI9B,KAAA;IACA,UAAA;IACA,QAAA;IACA,QAAA;IACA,QAAA;IACA,UAAA;IACA,WAAA;IACA,WAAA;IACA,SAAA;IACA,WAAA;IACA,WAAA;IACA,SAAA;IACA,WAAA;IACA,aAA8B,KAAA,EAAA;IAC9B,YAA0D,KAAA,EAAA;IAC1D,oBAAyD,KAAA,EAAA;IAExD,OAAA;IA0BV,mBAAmB,KAAA,EAAyB;QAC3C,OAAO;IACR;IAEA,iBAAiB,KAAA,EAAyB;QACzC,OAAO;IACR;IAAA,kBAAA;IAGA,sBAA+B;QAC9B,OAAO,IAAA,CAAK,MAAA,CAAO,SAAA,KAAc,KAAA,KAAa,IAAA,CAAK,MAAA,CAAO,SAAA,CAAU,IAAA,KAAS;IAC9E;AACD","ignoreList":[0]}},
    {"offset": {"line": 751, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 757, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/utils/array.ts"],"sourcesContent":["function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n"],"names":["value","startFrom"],"mappings":";;;;;AAAA,SAAS,kBAAkB,WAAA,EAAqB,SAAA,EAAmB,QAAA,EAAqC;IACvG,IAAA,IAAS,IAAI,WAAW,IAAI,YAAY,MAAA,EAAQ,IAAK;QACpD,MAAM,OAAO,WAAA,CAAY,CAAC,CAAA;QAE1B,IAAI,SAAS,MAAM;YAClB;YACA;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,OAAO;gBAAC,YAAY,KAAA,CAAM,WAAW,CAAC,EAAE,OAAA,CAAQ,OAAO,EAAE;gBAAG,IAAI,CAAC;aAAA;QAClE;QAEA,IAAI,UAAU;YACb;QACD;QAEA,IAAI,SAAS,OAAO,SAAS,KAAK;YACjC,OAAO;gBAAC,YAAY,KAAA,CAAM,WAAW,CAAC,EAAE,OAAA,CAAQ,OAAO,EAAE;gBAAG,CAAC;aAAA;QAC9D;IACD;IAEA,OAAO;QAAC,YAAY,KAAA,CAAM,SAAS,EAAE,OAAA,CAAQ,OAAO,EAAE;QAAG,YAAY,MAAM;KAAA;AAC5E;AAEO,SAAS,mBAAmB,WAAA,EAAqB,YAAY,CAAA,EAAoB;IACvF,MAAM,SAAgB,CAAC,CAAA;IACvB,IAAI,IAAI;IACR,IAAI,kBAAkB;IAEtB,MAAO,IAAI,YAAY,MAAA,CAAQ;QAC9B,MAAM,OAAO,WAAA,CAAY,CAAC,CAAA;QAE1B,IAAI,SAAS,KAAK;YACjB,IAAI,mBAAmB,MAAM,WAAW;gBACvC,OAAO,IAAA,CAAK,EAAE;YACf;YACA,kBAAkB;YAClB;YACA;QACD;QAEA,kBAAkB;QAElB,IAAI,SAAS,MAAM;YAClB,KAAK;YACL;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,MAAM,CAACA,QAAOC,UAAS,CAAA,GAAI,kBAAkB,aAAa,IAAI,GAAG,IAAI;YACrE,OAAO,IAAA,CAAKD,MAAK;YACjB,IAAIC;YACJ;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,OAAO;gBAAC;gBAAQ,IAAI,CAAC;aAAA;QACtB;QAEA,IAAI,SAAS,KAAK;YACjB,MAAM,CAACD,QAAOC,UAAS,CAAA,GAAI,mBAAmB,aAAa,IAAI,CAAC;YAChE,OAAO,IAAA,CAAKD,MAAK;YACjB,IAAIC;YACJ;QACD;QAEA,MAAM,CAAC,OAAO,YAAY,CAAA,GAAI,kBAAkB,aAAa,GAAG,KAAK;QACrE,OAAO,IAAA,CAAK,KAAK;QACjB,IAAI;IACL;IAEA,OAAO;QAAC;QAAQ,CAAC;KAAA;AAClB;AAEO,SAAS,aAAa,WAAA,EAA4B;IACxD,MAAM,CAAC,MAAM,CAAA,GAAI,mBAAmB,aAAa,CAAC;IAClD,OAAO;AACR;AAEO,SAAS,YAAY,KAAA,EAAsB;IACjD,OAAO,CAAA,CAAA,EACN,MAAM,GAAA,CAAI,CAAC,SAAS;QACnB,IAAI,MAAM,OAAA,CAAQ,IAAI,GAAG;YACxB,OAAO,YAAY,IAAI;QACxB;QAEA,IAAI,OAAO,SAAS,UAAU;YAC7B,OAAO,CAAA,CAAA,EAAI,KAAK,OAAA,CAAQ,OAAO,MAAM,EAAE,OAAA,CAAQ,MAAM,KAAK,CAAC,CAAA,CAAA,CAAA;QAC5D;QAEA,OAAO,GAAG,IAAI,EAAA;IACf,CAAC,EAAE,IAAA,CAAK,GAAG,CACZ,CAAA,CAAA,CAAA;AACD","ignoreList":[0]}},
    {"offset": {"line": 853, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/common.ts"],"sourcesContent":["import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Simplify, Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic override readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray<TSize extends number | undefined = undefined>(size?: TSize): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tsize: TSize;\n\t\t\tbaseBuilder: T;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size as any);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as HasGenerated<this, {\n\t\t\ttype: 'always';\n\t\t}>;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic override readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic override readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\tkeyAsName: boolean,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.keyAsName = keyAsName;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\tkeyAsName: boolean;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type PgArrayColumnBuilderBaseConfig = ColumnBuilderBaseConfig<'array', 'PgArray'> & {\n\tsize: number | undefined;\n\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n};\n\nexport class PgArrayBuilder<\n\tT extends PgArrayColumnBuilderBaseConfig,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string> | PgArrayColumnBuilderBaseConfig,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t},\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: T['size'],\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'> & {\n\t\tsize: number | undefined;\n\t\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n\t},\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, {}, { size: T['size']; baseBuilder: T['baseBuilder'] }> {\n\treadonly size: T['size'];\n\n\tstatic override readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n"],"names":["ref","actions"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1063, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1069, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/enum.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t(): PgEnumColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Gratitude to zod for the enum function types\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>> {\n\treturn pgEnumWithSchema(enumName, values, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;;;AAY1C,MAAM,cAAc,OAAO,GAAA,CAAI,kBAAkB;AAa1C,SAAS,SAAS,GAAA,EAAoD;IAC5E,OAAO,CAAC,CAAC,OAAO,OAAO,QAAQ,cAAc,eAAe,OAAO,GAAA,CAAI,WAAW,CAAA,KAAM;AACzF;AAEO,MAAM,6QAEH,kBAAA,CAAsD;IAC/D,OAAA,yNAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,EAAiB,YAAA,CAAuC;QACnE,KAAA,CAAM,MAAM,UAAU,cAAc;QACpC,IAAA,CAAK,MAAA,CAAO,IAAA,GAAO;IACpB;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sQACJ,WAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,eAAA;IAEvC,OAAO,IAAA,CAAK,MAAA,CAAO,IAAA,CAAA;IACV,aAAa,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA;IAEhD,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,IAAA,GAAO,OAAO,IAAA;IACpB;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,IAAA,CAAK,QAAA;IAClB;AACD;AAGO,SAAS,OACf,QAAA,EACA,MAAA,EACsB;IACtB,OAAO,iBAAiB,UAAU,QAAQ,KAAA,CAAS;AACpD;AAGO,SAAS,iBACf,QAAA,EACA,MAAA,EACA,MAAA,EACsB;IACtB,MAAM,eAAoC,OAAO,MAAA,CAChD,CAAuB,OACtB,IAAI,oBAAoB,QAAQ,IAAa,YAAY,GAC1D;QACC;QACA,YAAY;QACZ;QACA,CAAC,WAAW,CAAA,EAAG;IAChB;IAGD,OAAO;AACR","ignoreList":[0]}},
    {"offset": {"line": 1120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1126, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/table.ts"],"sourcesContent":["import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { ExtraConfigColumn } from './pg-core/index.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport { TableName } from './table.utils.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, ExtraConfigColumn>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown> | unknown[]) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key],\n\t\t\t\t\t\tTConfig['override']\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'> | undefined;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n"],"names":[],"mappings":";;;;;;;;;;;;;AACA,SAAS,kBAAkB;AAI3B,SAAS,iBAAiB;;;AAenB,MAAM,SAAS,OAAO,GAAA,CAAI,gBAAgB;AAG1C,MAAM,UAAU,OAAO,GAAA,CAAI,iBAAiB;AAG5C,MAAM,qBAAqB,OAAO,GAAA,CAAI,4BAA4B;AAGlE,MAAM,eAAe,OAAO,GAAA,CAAI,sBAAsB;AAGtD,MAAM,WAAW,OAAO,GAAA,CAAI,kBAAkB;AAG9C,MAAM,UAAU,OAAO,GAAA,CAAI,iBAAiB;AAG5C,MAAM,qBAAqB,OAAO,GAAA,CAAI,4BAA4B;AAEzE,MAAM,iBAAiB,OAAO,GAAA,CAAI,wBAAwB;AASnD,MAAM,MAAiE;IAC7E,OAAA,yNAAiB,aAAU,CAAA,GAAY,QAAA;IAAA,cAAA,GAgBvC,OAAgB,SAAS;QACxB,sOAAM,YAAA;QACN;QACA;QACA;QACA;QACA;QACA;QACA;IACD,EAAA;IAAA;;;GAAA,GAMA,iOAAC,YAAS,CAAA,CAAA;IAAA;;;GAAA,GAMV,CAAC,YAAY,CAAA,CAAA;IAAA,cAAA,GAGb,CAAC,MAAM,CAAA,CAAA;IAAA,cAAA,GAGP,CAAC,OAAO,CAAA,CAAA;IAAA,cAAA,GAGR,CAAC,kBAAkB,CAAA,CAAA;IAAA;;;GAAA,GAMnB,CAAC,QAAQ,CAAA,CAAA;IAAA,cAAA,GAGT,CAAC,OAAO,CAAA,GAAI,MAAA;IAAA,cAAA,GAGZ,CAAC,cAAc,CAAA,GAAI,KAAA;IAAA,cAAA,GAGnB,CAAC,kBAAkB,CAAA,GAAsE,KAAA,EAAA;IAEzF,YAAY,IAAA,EAAc,MAAA,EAA4B,QAAA,CAAkB;QACvE,IAAA,iOAAK,YAAS,CAAA,GAAI,IAAA,CAAK,YAAY,CAAA,GAAI;QACvC,IAAA,CAAK,MAAM,CAAA,GAAI;QACf,IAAA,CAAK,QAAQ,CAAA,GAAI;IAClB;AACD;AAEO,SAAS,QAAQ,KAAA,EAAgC;IACvD,OAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,kBAAkB;AACzE;AAqBO,SAAS,aAA8B,KAAA,EAA0B;IACvE,OAAO,KAAA,iOAAM,YAAS,CAAA;AACvB;AAEO,SAAS,mBAAoC,KAAA,EAAmD;IACtG,OAAO,GAAG,KAAA,CAAM,MAAM,CAAA,IAAK,QAAQ,CAAA,CAAA,EAAI,KAAA,iOAAM,YAAS,CAAC,EAAA;AACxD","ignoreList":[0]}},
    {"offset": {"line": 1198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1204, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/int.common.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnDataType, GeneratedIdentityConfig, IsIdentity } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgSequenceOptions } from '../sequence.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgIntColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumnBuilder<\n\tT,\n\t{ generatedIdentity: GeneratedIdentityConfig }\n> {\n\tstatic override readonly [entityKind]: string = 'PgIntColumnBaseBuilder';\n\n\tgeneratedAlwaysAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentity<this, 'always'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as IsIdentity<this, 'always'>;\n\t}\n\n\tgeneratedByDefaultAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentity<this, 'byDefault'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as IsIdentity<this, 'byDefault'>;\n\t}\n}\n"],"names":[],"mappings":";;;AACA,SAAS,kBAAkB;AAE3B,SAAS,uBAAuB;;;AAEzB,MAAe,gRAEZ,kBAAA,CAGR;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,yBAAA;IAEhD,0BACC,QAAA,EAC6B;QAC7B,IAAI,UAAU;YACb,MAAM,EAAE,IAAA,EAAM,GAAG,QAAQ,CAAA,GAAI;YAC7B,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;gBACN,cAAc;gBACd,iBAAiB;YAClB;QACD,OAAO;YACN,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;YACP;QACD;QAEA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QAEtB,OAAO,IAAA;IACR;IAEA,6BACC,QAAA,EACgC;QAChC,IAAI,UAAU;YACb,MAAM,EAAE,IAAA,EAAM,GAAG,QAAQ,CAAA,GAAI;YAC7B,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;gBACN,cAAc;gBACd,iBAAiB;YAClB;QACD,OAAO;YACN,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;YACP;QACD;QAEA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QAEtB,OAAO,IAAA;IACR;AACD","ignoreList":[0]}},
    {"offset": {"line": 1250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1256, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/subquery.ts"],"sourcesContent":["import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic override readonly [entityKind]: string = 'WithSubquery';\n}\n\nexport type WithSubqueryWithoutSelection<TAlias extends string> = WithSubquery<TAlias, {}>;\n"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB;;AAWpB,MAAM,SAGW;IACvB,OAAA,yNAAiB,aAAU,CAAA,GAAY,WAAA;IAUvC,YAAY,GAAA,EAAU,SAAA,EAAoC,KAAA,EAAe,SAAS,KAAA,CAAO;QACxF,IAAA,CAAK,CAAA,GAAI;YACR,OAAO;YACP;YACA,gBAAgB;YAChB;YACA;QACD;IACD;AAKD;AAEO,MAAM,qBAGH,SAA6B;IACtC,OAAA,yNAA0B,aAAU,CAAA,GAAY,eAAA;AACjD","ignoreList":[0]}},
    {"offset": {"line": 1279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/drizzle-orm/version.js"],"sourcesContent":["// package.json\nvar version = \"0.39.3\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n"],"names":[],"mappings":"AAAA,eAAe;;;;;AACf,IAAI,UAAU;AAEd,iBAAiB;AACjB,IAAI,uBAAuB","ignoreList":[0]}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/tracing.ts"],"sourcesContent":["import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n"],"names":["otel","rawTracer"],"mappings":";;;AAEA,SAAS,kBAAkB;AAD3B,SAAS,YAAY;;;AAGrB,IAAI;AACJ,IAAI;AAkBG,MAAM,SAAS;IACrB,iBAAoD,IAAA,EAAgB,EAAA,EAAsB;QACzF,IAAI,CAAC,MAAM;YACV,OAAO,GAAG;QACX;QAEA,IAAI,CAAC,WAAW;YACf,YAAY,KAAK,KAAA,CAAM,SAAA,CAAU,wOAAe,aAAU;QAC3D;QAEA,6OAAO,OAAA,EACN,CAACA,OAAMC,aACNA,WAAU,eAAA,CACT,MACC,CAAC,SAAe;gBAChB,IAAI;oBACH,OAAO,GAAG,IAAI;gBACf,EAAA,OAAS,GAAG;oBACX,KAAK,SAAA,CAAU;wBACd,MAAMD,MAAK,cAAA,CAAe,KAAA;wBAC1B,SAAS,aAAa,QAAQ,EAAE,OAAA,GAAU;oBAC3C,CAAC;oBACD,MAAM;gBACP,SAAE;oBACD,KAAK,GAAA,CAAI;gBACV;YACD,IAEF,MACA;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 1334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1340, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/view-common.ts"],"sourcesContent":["export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB,OAAO,GAAA,CAAI,wBAAwB","ignoreList":[0]}},
    {"offset": {"line": 1346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1352, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/sql/sql.ts"],"sourcesContent":["import type { CasingCache } from '~/casing.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport type { SelectResult } from '~/query-builders/select.types.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { IsAlias, Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tcasing: CasingCache;\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tcasing,\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[IsAlias]\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tconst columnName = casing.getColumnCasing(chunk);\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(columnName), params: [] };\n\t\t\t\t}\n\n\t\t\t\tconst schemaName = chunk.table[Table.Symbol.Schema];\n\t\t\t\treturn {\n\t\t\t\t\tsql: chunk.table[IsAlias] || schemaName === undefined\n\t\t\t\t\t\t? escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(columnName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(chunk.table[Table.Symbol.Name]) + '.'\n\t\t\t\t\t\t\t+ escapeName(columnName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[ViewBaseConfig].isAlias\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nconst IsDrizzleView = Symbol.for('drizzle:IsDrizzleView');\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: ColumnsSelection;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\t/** @internal */\n\t[IsDrizzleView] = true;\n\n\tdeclare readonly $inferSelect: InferSelectViewModel<View<Assume<TName, string>, TExisting, TSelection>>;\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport function isView(view: unknown): view is View {\n\treturn typeof view === 'object' && view !== null && IsDrizzleView in view;\n}\n\nexport function getViewName<T extends View>(view: T): T['_']['name'] {\n\treturn view[ViewBaseConfig].name;\n}\n\nexport type InferSelectViewModel<TView extends View> =\n\tEqual<TView['_']['selectedFields'], { [x: string]: unknown }> extends true ? { [x: string]: unknown }\n\t\t: SelectResult<\n\t\t\tTView['_']['selectedFields'],\n\t\t\t'single',\n\t\t\tRecord<TView['_']['name'], 'not-null'>\n\t\t>;\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n"],"names":["param","sql","placeholder","name","SQL"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1869, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1875, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/utils.ts"],"sourcesContent":["import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL) || is(value, Column)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | AnyColumn | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\nexport function getViewSelectedFields<T extends View>(view: T): T['_']['selectedFields'] {\n\treturn view[ViewBaseConfig].selectedFields;\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport type Casing = 'snake_case' | 'camelCase';\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n\tcasing?: Casing;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n\n/** @internal */\nexport function getColumnNameAndConfig<\n\tTConfig extends Record<string, any> | undefined,\n>(a: string | TConfig | undefined, b: TConfig | undefined) {\n\treturn {\n\t\tname: typeof a === 'string' && a.length > 0 ? a : '' as string,\n\t\tconfig: typeof a === 'object' ? a : b as TConfig,\n\t};\n}\n\nexport type IfNotImported<T, Y, N> = unknown extends T ? Y : N;\n\nexport type ImportTypeError<TPackageName extends string> =\n\t`Please install \\`${TPackageName}\\` to allow Drizzle ORM to connect to the database`;\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Keys extends any\n\t? Required<Pick<T, Keys>> & Partial<Omit<T, Keys>>\n\t: never;\n\ntype ExpectedConfigShape = {\n\tlogger?: boolean | {\n\t\tlogQuery(query: string, params: unknown[]): void;\n\t};\n\tschema?: Record<string, never>;\n\tcasing?: 'snake_case' | 'camelCase';\n};\n\n// If this errors, you must update config shape checker function with new config specs\nconst _: DrizzleConfig = {} as ExpectedConfigShape;\nconst __: ExpectedConfigShape = {} as DrizzleConfig;\n\nexport function isConfig(data: any): boolean {\n\tif (typeof data !== 'object' || data === null) return false;\n\n\tif (data.constructor.name !== 'Object') return false;\n\n\tif ('logger' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (\n\t\t\ttype !== 'boolean' && (type !== 'object' || typeof data['logger']['logQuery'] !== 'function')\n\t\t\t&& type !== 'undefined'\n\t\t) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('schema' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('casing' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'string' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('mode' in data) {\n\t\tif (data['mode'] !== 'default' || data['mode'] !== 'planetscale' || data['mode'] !== undefined) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('connection' in data) {\n\t\tconst type = typeof data['connection'];\n\t\tif (type !== 'string' && type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('client' in data) {\n\t\tconst type = typeof data['client'];\n\t\tif (type !== 'object' && type !== 'function' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif (Object.keys(data).length === 0) return true;\n\n\treturn false;\n}\n\nexport type NeonAuthToken = string | (() => string | Promise<string>);\n"],"names":["result"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2059, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/bigint.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgBigInt53BuilderInitial<TName extends string> = PgBigInt53Builder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgBigInt53';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgBigInt53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigInt53'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigInt53Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgBigInt53');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt53<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBigInt53<T extends ColumnBaseConfig<'number', 'PgBigInt53'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigInt53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigInt64BuilderInitial<TName extends string> = PgBigInt64Builder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'PgBigInt64';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgBigInt64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigInt64'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigInt64Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'PgBigInt64');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigInt64<T extends ColumnBaseConfig<'bigint', 'PgBigInt64'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigInt64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\nexport interface PgBigIntConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigint<TMode extends PgBigIntConfig['mode']>(\n\tconfig: PgBigIntConfig<TMode>,\n): TMode extends 'number' ? PgBigInt53BuilderInitial<''> : PgBigInt64BuilderInitial<''>;\nexport function bigint<TName extends string, TMode extends PgBigIntConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigIntConfig<TMode>,\n): TMode extends 'number' ? PgBigInt53BuilderInitial<TName> : PgBigInt64BuilderInitial<TName>;\nexport function bigint(a: string | PgBigIntConfig, b?: PgBigIntConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBigIntConfig>(a, b);\n\tif (config.mode === 'number') {\n\t\treturn new PgBigInt53Builder(name);\n\t}\n\treturn new PgBigInt64Builder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAK3B,SAAS,8BAA8B;AADvC,SAAS,gBAAgB;AADzB,SAAS,8BAA8B;;;;;AAahC,MAAM,kRACJ,yBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,oQAAuE,WAAA,CAAY;IAC/F,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO;QACR;QACA,OAAO,OAAO,KAAK;IACpB;AACD;AAWO,MAAM,0BACJ,iRAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,oQAAuE,WAAA,CAAY;IAC/F,OAAA,CAA0B,qOAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAAA,oEAAA;IAGS,mBAAmB,KAAA,EAAuB;QAClD,OAAO,OAAO,KAAK;IACpB;AACD;AAaO,SAAS,OAAO,CAAA,EAA4B,CAAA,EAAoB;IACtE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,IAAI,OAAO,IAAA,KAAS,UAAU;QAC7B,OAAO,IAAI,kBAAkB,IAAI;IAClC;IACA,OAAO,IAAI,kBAAkB,IAAI;AAClC","ignoreList":[0]}},
    {"offset": {"line": 2129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2135, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/bigserial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBigSerial53BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial53Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgBigSerial53';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigSerial53'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigSerial53Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'number', 'PgBigSerial53');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial53<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial53<T extends ColumnBaseConfig<'number', 'PgBigSerial53'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigSerial53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\toverride mapFromDriverValue(value: number): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigSerial64BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial64Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'bigint';\n\t\t\tcolumnType: 'PgBigSerial64';\n\t\t\tdata: bigint;\n\t\t\tdriverParam: string;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigSerial64'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigSerial64Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'bigint', 'PgBigSerial64');\n\t\tthis.config.hasDefault = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial64<T extends ColumnBaseConfig<'bigint', 'PgBigSerial64'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigSerial64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\nexport interface PgBigSerialConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigserial<TMode extends PgBigSerialConfig['mode']>(\n\tconfig: PgBigSerialConfig<TMode>,\n): TMode extends 'number' ? PgBigSerial53BuilderInitial<''> : PgBigSerial64BuilderInitial<''>;\nexport function bigserial<TName extends string, TMode extends PgBigSerialConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigSerialConfig<TMode>,\n): TMode extends 'number' ? PgBigSerial53BuilderInitial<TName> : PgBigSerial64BuilderInitial<TName>;\nexport function bigserial(a: string | PgBigSerialConfig, b?: PgBigSerialConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBigSerialConfig>(a, b);\n\tif (config.mode === 'number') {\n\t\treturn new PgBigSerial53Builder(name);\n\t}\n\treturn new PgBigSerial64Builder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAQA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAF1C,SAAS,8BAA8B;;;;AAiBhC,MAAM,8QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sBAA6E,4PAAA,CAAY;IACrG,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAuB;QAClD,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO;QACR;QACA,OAAO,OAAO,KAAK;IACpB;AACD;AAeO,MAAM,8QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;IAC1B;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uQAA6E,WAAA,CAAY;IACrG,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAAA,oEAAA;IAGS,mBAAmB,KAAA,EAAuB;QAClD,OAAO,OAAO,KAAK;IACpB;AACD;AAaO,SAAS,UAAU,CAAA,EAA+B,CAAA,EAAuB;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAA0C,GAAG,CAAC;IACvE,IAAI,OAAO,IAAA,KAAS,UAAU;QAC7B,OAAO,IAAI,qBAAqB,IAAI;IACrC;IACA,OAAO,IAAI,qBAAqB,IAAI;AACrC","ignoreList":[0]}},
    {"offset": {"line": 2200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2206, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/boolean.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBooleanBuilderInitial<TName extends string> = PgBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'PgBoolean';\n\tdata: boolean;\n\tdriverParam: boolean;\n\tenumValues: undefined;\n}>;\n\nexport class PgBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'PgBoolean'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgBooleanBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'boolean', 'PgBoolean');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBoolean<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBoolean<T extends ColumnBaseConfig<'boolean', 'PgBoolean'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBoolean';\n\n\tgetSQLType(): string {\n\t\treturn 'boolean';\n\t}\n}\n\nexport function boolean(): PgBooleanBuilderInitial<''>;\nexport function boolean<TName extends string>(name: TName): PgBooleanBuilderInitial<TName>;\nexport function boolean(name?: string) {\n\treturn new PgBooleanBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,0QAAoF,kBAAA,CAAmB;IACnH,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,WAAW,WAAW;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,mQAAsE,WAAA,CAAY;IAC9F,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","ignoreList":[0]}},
    {"offset": {"line": 2235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2241, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/char.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCharBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = PgCharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgChar';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n\tlength: TLength;\n}>;\n\nexport class PgCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgChar'> & { length?: number | undefined }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ length: T['length']; enumValues: T['enumValues'] },\n\t\t{ length: T['length'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgCharBuilder';\n\n\tconstructor(name: T['name'], config: PgCharConfig<T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'PgChar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgChar<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new PgChar<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgChar<T extends ColumnBaseConfig<'string', 'PgChar'> & { length?: number | undefined }>\n\textends PgColumn<T, { length: T['length']; enumValues: T['enumValues'] }, { length: T['length'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgChar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `char` : `char(${this.length})`;\n\t}\n}\n\nexport interface PgCharConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> {\n\tenum?: TEnum;\n\tlength?: TLength;\n}\n\nexport function char(): PgCharBuilderInitial<'', [string, ...string[]], undefined>;\nexport function char<U extends string, T extends Readonly<[U, ...U[]]>, L extends number | undefined>(\n\tconfig?: PgCharConfig<T | Writable<T>, L>,\n): PgCharBuilderInitial<'', Writable<T>, L>;\nexport function char<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tname: TName,\n\tconfig?: PgCharConfig<T | Writable<T>, L>,\n): PgCharBuilderInitial<TName, Writable<T>, L>;\nexport function char(a?: string | PgCharConfig, b: PgCharConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgCharConfig>(a, b);\n\treturn new PgCharBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA6C;;;;AAiB/C,MAAM,uQACJ,kBAAA,CAKT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAoD;QAChF,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;QAC5B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACoE;QACpE,OAAO,IAAI,OACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,gQACJ,WAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEvC,SAAS,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IACZ,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO,IAAA,CAAK,MAAA,KAAW,KAAA,IAAY,CAAA,IAAA,CAAA,GAAS,CAAA,KAAA,EAAQ,IAAA,CAAK,MAAM,CAAA,CAAA,CAAA;IAChE;AACD;AAuBO,SAAS,KAAK,CAAA,EAA2B,IAAkB,CAAC,CAAA,EAAQ;IAC1E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,OAAO,IAAI,cAAc,MAAM,MAAa;AAC7C","ignoreList":[0]}},
    {"offset": {"line": 2277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2283, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/cidr.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCidrBuilderInitial<TName extends string> = PgCidrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgCidr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgCidrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgCidr'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgCidrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgCidr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCidr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCidr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgCidr<T extends ColumnBaseConfig<'string', 'PgCidr'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgCidr';\n\n\tgetSQLType(): string {\n\t\treturn 'cidr';\n\t}\n}\n\nexport function cidr(): PgCidrBuilderInitial<''>;\nexport function cidr<TName extends string>(name: TName): PgCidrBuilderInitial<TName>;\nexport function cidr(name?: string) {\n\treturn new PgCidrBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,uQAA6E,kBAAA,CAAmB;IAC5G,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA+D,WAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 2312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2318, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/custom.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'PgCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface PgCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class PgCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'PgCustomColumn'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tpgColumnBuilderBrand: 'PgCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'PgCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgCustomColumn<T extends ColumnBaseConfig<'custom', 'PgCustomColumn'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom pg database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new PgCustomColumnBuilder(name as ConvertCustomConfig<TName, T>['name'], config, customTypeParams);\n\t};\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,UAAU,uBAAuB;AAD1C,SAAqB,8BAA8B;;;;AAmB5C,MAAM,+QACJ,kBAAA,CAUT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YACC,IAAA,EACA,WAAA,EACA,gBAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,WAAA,GAAc;QAC1B,IAAA,CAAK,MAAA,CAAO,gBAAA,GAAmB;IAChC;IAAA,cAAA,GAGA,MACC,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wQAA+E,WAAA,CAAY;IACvG,OAAA,yNAA0B,aAAU,CAAA,GAAY,iBAAA;IAExC,QAAA;IACA,MAAA;IACA,QAAA;IAER,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,QAAA,CAAS,OAAO,WAAW;QAClE,IAAA,CAAK,KAAA,GAAQ,OAAO,gBAAA,CAAiB,QAAA;QACrC,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,UAAA;IACxC;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,OAAA;IACb;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,IAAA,CAAK,OAAA,KAAY,aAAa,IAAA,CAAK,OAAA,CAAQ,KAAK,IAAI;IACnE;IAES,iBAAiB,KAAA,EAAoC;QAC7D,OAAO,OAAO,IAAA,CAAK,KAAA,KAAU,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,IAAI;IAC/D;AACD;AAmHO,SAAS,WACf,gBAAA,EAoBD;IACC,OAAO,CACN,GACA,MAC0D;QAC1D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAoC,GAAG,CAAC;QACjE,OAAO,IAAI,sBAAsB,MAA+C,QAAQ,gBAAgB;IACzG;AACD","ignoreList":[0]}},
    {"offset": {"line": 2369, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2375, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/date.common.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnDataType } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgDateColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends PgColumnBuilder<T, TRuntimeConfig> {\n\tstatic override readonly [entityKind]: string = 'PgDateColumnBaseBuilder';\n\n\tdefaultNow() {\n\t\treturn this.default(sql`now()`);\n\t}\n}\n"],"names":[],"mappings":";;;AACA,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,uBAAuB;;;;AAEzB,MAAe,iRAGZ,kBAAA,CAAmC;IAC5C,OAAA,yNAA0B,aAAU,CAAA,GAAY,0BAAA;IAEhD,aAAa;QACZ,OAAO,IAAA,CAAK,OAAA,6NAAQ,MAAA,CAAA,KAAA,CAAU;IAC/B;AACD","ignoreList":[0]}},
    {"offset": {"line": 2392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2398, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/date.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgDateBuilderInitial<TName extends string> = PgDateBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgDate';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgDateBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgDate'>> extends PgDateColumnBaseBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgDateBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'date', 'PgDate');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDate<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDate<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgDate<T extends ColumnBaseConfig<'date', 'PgDate'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDate';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): string {\n\t\treturn value.toISOString();\n\t}\n}\n\nexport type PgDateStringBuilderInitial<TName extends string> = PgDateStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgDateString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgDateStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgDateString'>>\n\textends PgDateColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgDateStringBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgDateString');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDateString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDateString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDateString<T extends ColumnBaseConfig<'string', 'PgDateString'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDateString';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n}\n\nexport interface PgDateConfig<T extends 'date' | 'string' = 'date' | 'string'> {\n\tmode: T;\n}\n\nexport function date(): PgDateStringBuilderInitial<''>;\nexport function date<TMode extends PgDateConfig['mode'] & {}>(\n\tconfig?: PgDateConfig<TMode>,\n): Equal<TMode, 'date'> extends true ? PgDateBuilderInitial<''> : PgDateStringBuilderInitial<''>;\nexport function date<TName extends string, TMode extends PgDateConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgDateConfig<TMode>,\n): Equal<TMode, 'date'> extends true ? PgDateBuilderInitial<TName> : PgDateStringBuilderInitial<TName>;\nexport function date(a?: string | PgDateConfig, b?: PgDateConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgDateConfig>(a, b);\n\tif (config?.mode === 'date') {\n\t\treturn new PgDateBuilder(name);\n\t}\n\treturn new PgDateStringBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,+BAA+B;AADxC,SAAS,gBAAgB;AADzB,SAAqB,8BAA8B;;;;;AAa5C,MAAM,+QAA2E,0BAAA,CAA2B;IAClH,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,QAAQ;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA6D,WAAA,CAAY;IACrF,OAAA,wNAA0B,cAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAqB;QAChD,OAAO,IAAI,KAAK,KAAK;IACtB;IAES,iBAAiB,KAAA,EAAqB;QAC9C,OAAO,MAAM,WAAA,CAAY;IAC1B;AACD;AAWO,MAAM,qRACJ,0BAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,cAAc;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sQAA2E,WAAA,CAAY;IACnG,OAAA,yNAA0B,aAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAcO,SAAS,KAAK,CAAA,EAA2B,CAAA,EAAkB;IACjE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,IAAI,QAAQ,SAAS,QAAQ;QAC5B,OAAO,IAAI,cAAc,IAAI;IAC9B;IACA,OAAO,IAAI,oBAAoB,IAAI;AACpC","ignoreList":[0]}},
    {"offset": {"line": 2458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2464, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/double-precision.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgDoublePrecisionBuilderInitial<TName extends string> = PgDoublePrecisionBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgDoublePrecision';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n}>;\n\nexport class PgDoublePrecisionBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgDoublePrecision'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgDoublePrecisionBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgDoublePrecision');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDoublePrecision<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDoublePrecision<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDoublePrecision<T extends ColumnBaseConfig<'number', 'PgDoublePrecision'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDoublePrecision';\n\n\tgetSQLType(): string {\n\t\treturn 'double precision';\n\t}\n\n\toverride mapFromDriverValue(value: string | number): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function doublePrecision(): PgDoublePrecisionBuilderInitial<''>;\nexport function doublePrecision<TName extends string>(name: TName): PgDoublePrecisionBuilderInitial<TName>;\nexport function doublePrecision(name?: string) {\n\treturn new PgDoublePrecisionBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,kRACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,mBAAmB;IAC1C;IAAA,cAAA,GAGS,MACR,KAAA,EACqD;QACrD,OAAO,IAAI,kBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,2QAAqF,WAAA,CAAY;IAC7G,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,UAAA,CAAW,KAAK;QAC/B;QACA,OAAO;IACR;AACD;AAIO,SAAS,gBAAgB,IAAA,EAAe;IAC9C,OAAO,IAAI,yBAAyB,QAAQ,EAAE;AAC/C","ignoreList":[0]}},
    {"offset": {"line": 2499, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2505, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/inet.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgInetBuilderInitial<TName extends string> = PgInetBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInet';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgInetBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInet'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgInetBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgInet');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInet<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInet<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInet<T extends ColumnBaseConfig<'string', 'PgInet'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgInet';\n\n\tgetSQLType(): string {\n\t\treturn 'inet';\n\t}\n}\n\nexport function inet(): PgInetBuilderInitial<''>;\nexport function inet<TName extends string>(name: TName): PgInetBuilderInitial<TName>;\nexport function inet(name?: string) {\n\treturn new PgInetBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,uQAA6E,kBAAA,CAAmB;IAC5G,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA+D,WAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 2534, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2540, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/integer.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgIntegerBuilderInitial<TName extends string> = PgIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgInteger';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgInteger'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgInteger');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInteger<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInteger<T extends ColumnBaseConfig<'number', 'PgInteger'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgInteger';\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseInt(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function integer(): PgIntegerBuilderInitial<''>;\nexport function integer<TName extends string>(name: TName): PgIntegerBuilderInitial<TName>;\nexport function integer(name?: string) {\n\treturn new PgIntegerBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,8BAA8B;AADvC,SAAS,gBAAgB;;;;AAYlB,MAAM,iRACJ,yBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,WAAW;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,kQAAqE,YAAA,CAAY;IAC7F,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,QAAA,CAAS,KAAK;QAC7B;QACA,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","ignoreList":[0]}},
    {"offset": {"line": 2577, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2583, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/interval.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgIntervalBuilderInitial<TName extends string> = PgIntervalBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInterval';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgIntervalBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInterval'>>\n\textends PgColumnBuilder<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic override readonly [entityKind]: string = 'PgIntervalBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tintervalConfig: IntervalConfig,\n\t) {\n\t\tsuper(name, 'string', 'PgInterval');\n\t\tthis.config.intervalConfig = intervalConfig;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInterval<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInterval<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInterval<T extends ColumnBaseConfig<'string', 'PgInterval'>>\n\textends PgColumn<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic override readonly [entityKind]: string = 'PgInterval';\n\n\treadonly fields: IntervalConfig['fields'] = this.config.intervalConfig.fields;\n\treadonly precision: IntervalConfig['precision'] = this.config.intervalConfig.precision;\n\n\tgetSQLType(): string {\n\t\tconst fields = this.fields ? ` ${this.fields}` : '';\n\t\tconst precision = this.precision ? `(${this.precision})` : '';\n\t\treturn `interval${fields}${precision}`;\n\t}\n}\n\nexport interface IntervalConfig {\n\tfields?:\n\t\t| 'year'\n\t\t| 'month'\n\t\t| 'day'\n\t\t| 'hour'\n\t\t| 'minute'\n\t\t| 'second'\n\t\t| 'year to month'\n\t\t| 'day to hour'\n\t\t| 'day to minute'\n\t\t| 'day to second'\n\t\t| 'hour to minute'\n\t\t| 'hour to second'\n\t\t| 'minute to second';\n\tprecision?: Precision;\n}\n\nexport function interval(): PgIntervalBuilderInitial<''>;\nexport function interval(\n\tconfig?: IntervalConfig,\n): PgIntervalBuilderInitial<''>;\nexport function interval<TName extends string>(\n\tname: TName,\n\tconfig?: IntervalConfig,\n): PgIntervalBuilderInitial<TName>;\nexport function interval(a?: string | IntervalConfig, b: IntervalConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<IntervalConfig>(a, b);\n\treturn new PgIntervalBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAahC,MAAM,2QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YACC,IAAA,EACA,cAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,YAAY;QAClC,IAAA,CAAK,MAAA,CAAO,cAAA,GAAiB;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,oQACJ,WAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;IAEvC,SAAmC,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,MAAA,CAAA;IAC9D,YAAyC,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,SAAA,CAAA;IAE7E,aAAqB;QACpB,MAAM,SAAS,IAAA,CAAK,MAAA,GAAS,CAAA,CAAA,EAAI,IAAA,CAAK,MAAM,EAAA,GAAK;QACjD,MAAM,YAAY,IAAA,CAAK,SAAA,GAAY,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA,GAAM;QAC3D,OAAO,CAAA,QAAA,EAAW,MAAM,GAAG,SAAS,EAAA;IACrC;AACD;AA4BO,SAAS,SAAS,CAAA,EAA6B,IAAoB,CAAC,CAAA,EAAG;IAC7E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,OAAO,IAAI,kBAAkB,MAAM,MAAM;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 2620, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2626, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/json.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonBuilderInitial<TName extends string> = PgJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJson';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n}>;\n\nexport class PgJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJson'>> extends PgColumnBuilder<\n\tT\n> {\n\tstatic override readonly [entityKind]: string = 'PgJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJson<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJson<T extends ColumnBaseConfig<'json', 'PgJson'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgJson';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'json';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function json(): PgJsonBuilderInitial<''>;\nexport function json<TName extends string>(name: TName): PgJsonBuilderInitial<TName>;\nexport function json(name?: string) {\n\treturn new PgJsonBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,uQAA2E,kBAAA,CAEtF;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,QAAQ;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA6D,WAAA,CAAY;IACrF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAsC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAI;gBACH,OAAO,KAAK,KAAA,CAAM,KAAK;YACxB,EAAA,OAAQ;gBACP,OAAO;YACR;QACD;QACA,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 2671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2677, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/jsonb.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonbBuilderInitial<TName extends string> = PgJsonbBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJsonb';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n}>;\n\nexport class PgJsonbBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJsonb'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgJsonbBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJsonb');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJsonb<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJsonb<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJsonb<T extends ColumnBaseConfig<'json', 'PgJsonb'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgJsonb';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonbBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'jsonb';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function jsonb(): PgJsonbBuilderInitial<''>;\nexport function jsonb<TName extends string>(name: TName): PgJsonbBuilderInitial<TName>;\nexport function jsonb(name?: string) {\n\treturn new PgJsonbBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,wQAA6E,kBAAA,CAAmB;IAC5G,OAAA,yNAA0B,aAAU,CAAA,GAAY,iBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,SAAS;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC2C;QAC3C,OAAO,IAAI,QAAyC,OAAO,IAAA,CAAK,MAA8C;IAC/G;AACD;AAEO,MAAM,iQAA+D,WAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,UAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAqC;QAC7F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAsC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAI;gBACH,OAAO,KAAK,KAAA,CAAM,KAAK;YACxB,EAAA,OAAQ;gBACP,OAAO;YACR;QACD;QACA,OAAO;IACR;AACD;AAIO,SAAS,MAAM,IAAA,EAAe;IACpC,OAAO,IAAI,eAAe,QAAQ,EAAE;AACrC","ignoreList":[0]}},
    {"offset": {"line": 2722, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2728, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/line.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgLineBuilderInitial<TName extends string> = PgLineBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgLine';\n\tdata: [number, number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgLineBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgLine'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgLine');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineTuple<T extends ColumnBaseConfig<'array', 'PgLine'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgLine';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number, number] {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn [Number.parseFloat(a!), Number.parseFloat(b!), Number.parseFloat(c!)];\n\t}\n\n\toverride mapToDriverValue(value: [number, number, number]): string {\n\t\treturn `{${value[0]},${value[1]},${value[2]}}`;\n\t}\n}\n\nexport type PgLineABCBuilderInitial<TName extends string> = PgLineABCBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgLineABC';\n\tdata: { a: number; b: number; c: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgLineABCBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgLineABC'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineABCBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgLineABC');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineABC<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineABC<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineABC<T extends ColumnBaseConfig<'json', 'PgLineABC'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineABC';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): { a: number; b: number; c: number } {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn { a: Number.parseFloat(a!), b: Number.parseFloat(b!), c: Number.parseFloat(c!) };\n\t}\n\n\toverride mapToDriverValue(value: { a: number; b: number; c: number }): string {\n\t\treturn `{${value.a},${value.b},${value.c}}`;\n\t}\n}\n\nexport interface PgLineTypeConfig<T extends 'tuple' | 'abc' = 'tuple' | 'abc'> {\n\tmode?: T;\n}\n\nexport function line(): PgLineBuilderInitial<''>;\nexport function line<TMode extends PgLineTypeConfig['mode'] & {}>(\n\tconfig?: PgLineTypeConfig<TMode>,\n): Equal<TMode, 'abc'> extends true ? PgLineABCBuilderInitial<''>\n\t: PgLineBuilderInitial<''>;\nexport function line<TName extends string, TMode extends PgLineTypeConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgLineTypeConfig<TMode>,\n): Equal<TMode, 'abc'> extends true ? PgLineABCBuilderInitial<TName>\n\t: PgLineBuilderInitial<TName>;\nexport function line(a?: string | PgLineTypeConfig, b?: PgLineTypeConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgLineTypeConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgLineBuilder(name);\n\t}\n\treturn new PgLineABCBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,UAAU,uBAAuB;AAD1C,SAAqB,8BAA8B;;;;AAY5C,MAAM,uQAA4E,kBAAA,CAAmB;IAC3G,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,SAAS,QAAQ;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC+C;QAC/C,OAAO,IAAI,YACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,qQAAmE,WAAA,CAAY;IAC3F,OAAA,CAA0B,qOAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAyC;QACpE,MAAM,CAAC,GAAG,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;QAC9C,OAAO;YAAC,OAAO,UAAA,CAAW,CAAE;YAAG,OAAO,UAAA,CAAW,CAAE;YAAG,OAAO,UAAA,CAAW,CAAE,CAAC;SAAA;IAC5E;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IAC5C;AACD;AAWO,MAAM,yBAAiF,mQAAA,CAAmB;IAChH,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,WAAW;IAChC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,mQAAmE,WAAA,CAAY;IAC3F,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoD;QAC/E,MAAM,CAAC,GAAG,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;QAC9C,OAAO;YAAE,GAAG,OAAO,UAAA,CAAW,CAAE;YAAG,GAAG,OAAO,UAAA,CAAW,CAAE;YAAG,GAAG,OAAO,UAAA,CAAW,CAAE;QAAE;IACvF;IAES,iBAAiB,KAAA,EAAoD;QAC7E,OAAO,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IACzC;AACD;AAgBO,SAAS,KAAK,CAAA,EAA+B,CAAA,EAAsB;IACzE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,cAAc,IAAI;IAC9B;IACA,OAAO,IAAI,iBAAiB,IAAI;AACjC","ignoreList":[0]}},
    {"offset": {"line": 2802, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2808, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/macaddr.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddrBuilderInitial<TName extends string> = PgMacaddrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgMacaddrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr<T extends ColumnBaseConfig<'string', 'PgMacaddr'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr';\n\t}\n}\n\nexport function macaddr(): PgMacaddrBuilderInitial<''>;\nexport function macaddr<TName extends string>(name: TName): PgMacaddrBuilderInitial<TName>;\nexport function macaddr(name?: string) {\n\treturn new PgMacaddrBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,0QAAmF,kBAAA,CAAmB;IAClH,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,WAAW;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,mQAAqE,WAAA,CAAY;IAC7F,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","ignoreList":[0]}},
    {"offset": {"line": 2837, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2843, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/macaddr8.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddr8BuilderInitial<TName extends string> = PgMacaddr8Builder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr8';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgMacaddr8Builder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr8'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr8Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr8');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr8<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr8<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr8<T extends ColumnBaseConfig<'string', 'PgMacaddr8'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr8';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr8';\n\t}\n}\n\nexport function macaddr8(): PgMacaddr8BuilderInitial<''>;\nexport function macaddr8<TName extends string>(name: TName): PgMacaddr8BuilderInitial<TName>;\nexport function macaddr8(name?: string) {\n\treturn new PgMacaddr8Builder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,2QAAqF,kBAAA,CAAmB;IACpH,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,oQAAuE,WAAA,CAAY;IAC/F,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,SAAS,IAAA,EAAe;IACvC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","ignoreList":[0]}},
    {"offset": {"line": 2872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2878, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/numeric.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgNumericBuilderInitial<TName extends string> = PgNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgNumeric'>> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tprecision: number | undefined;\n\t\tscale: number | undefined;\n\t}\n> {\n\tstatic override readonly [entityKind]: string = 'PgNumericBuilder';\n\n\tconstructor(name: T['name'], precision?: number, scale?: number) {\n\t\tsuper(name, 'string', 'PgNumeric');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgNumeric<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgNumeric<T extends ColumnBaseConfig<'string', 'PgNumeric'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgNumeric';\n\n\treadonly precision: number | undefined;\n\treadonly scale: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgNumericBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.precision = config.precision;\n\t\tthis.scale = config.scale;\n\t}\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `numeric(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'numeric';\n\t\t} else {\n\t\t\treturn `numeric(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport type PgNumericConfig =\n\t| { precision: number; scale?: number }\n\t| { precision?: number; scale: number }\n\t| { precision: number; scale: number };\n\nexport function numeric(): PgNumericBuilderInitial<''>;\nexport function numeric(\n\tconfig?: PgNumericConfig,\n): PgNumericBuilderInitial<''>;\nexport function numeric<TName extends string>(\n\tname: TName,\n\tconfig?: PgNumericConfig,\n): PgNumericBuilderInitial<TName>;\nexport function numeric(a?: string | PgNumericConfig, b?: PgNumericConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgNumericConfig>(a, b);\n\treturn new PgNumericBuilder(name, config?.precision, config?.scale);\n}\n\nexport const decimal = numeric;\n"],"names":[],"mappings":";;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAYhC,MAAM,0QAAmF,kBAAA,CAM9F;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,EAAiB,SAAA,EAAoB,KAAA,CAAgB;QAChE,KAAA,CAAM,MAAM,UAAU,WAAW;QACjC,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;QACxB,IAAA,CAAK,MAAA,CAAO,KAAA,GAAQ;IACrB;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,mQAAqE,WAAA,CAAY;IAC7F,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEvC,UAAA;IACA,MAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAAuC;QAC/F,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,KAAA,GAAQ,OAAO,KAAA;IACrB;IAEA,aAAqB;QACpB,IAAI,IAAA,CAAK,SAAA,KAAc,KAAA,KAAa,IAAA,CAAK,KAAA,KAAU,KAAA,GAAW;YAC7D,OAAO,CAAA,QAAA,EAAW,IAAA,CAAK,SAAS,CAAA,EAAA,EAAK,IAAA,CAAK,KAAK,CAAA,CAAA,CAAA;QAChD,OAAA,IAAW,IAAA,CAAK,SAAA,KAAc,KAAA,GAAW;YACxC,OAAO;QACR,OAAO;YACN,OAAO,CAAA,QAAA,EAAW,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACjC;IACD;AACD;AAeO,SAAS,QAAQ,CAAA,EAA8B,CAAA,EAAqB;IAC1E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAwC,GAAG,CAAC;IACrE,OAAO,IAAI,iBAAiB,MAAM,QAAQ,WAAW,QAAQ,KAAK;AACnE;AAEO,MAAM,UAAU","ignoreList":[0]}},
    {"offset": {"line": 2927, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2933, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/point.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgPointTupleBuilderInitial<TName extends string> = PgPointTupleBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgPointTuple';\n\tdata: [number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgPointTupleBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgPointTuple'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgPointTupleBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'array', 'PgPointTuple');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointTuple<T extends ColumnBaseConfig<'array', 'PgPointTuple'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgPointTuple';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): [number, number] {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn [Number.parseFloat(x!), Number.parseFloat(y!)];\n\t\t}\n\t\treturn [value.x, value.y];\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `(${value[0]},${value[1]})`;\n\t}\n}\n\nexport type PgPointObjectBuilderInitial<TName extends string> = PgPointObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgPointObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgPointObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgPointObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgPointObjectBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'json', 'PgPointObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointObject<T extends ColumnBaseConfig<'json', 'PgPointObject'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgPointObject';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): { x: number; y: number } {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn { x: Number.parseFloat(x!), y: Number.parseFloat(y!) };\n\t\t}\n\t\treturn value;\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `(${value.x},${value.y})`;\n\t}\n}\n\nexport interface PgPointConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n}\n\nexport function point(): PgPointTupleBuilderInitial<''>;\nexport function point<TMode extends PgPointConfig['mode'] & {}>(\n\tconfig?: PgPointConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgPointObjectBuilderInitial<''>\n\t: PgPointTupleBuilderInitial<''>;\nexport function point<TName extends string, TMode extends PgPointConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgPointConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgPointObjectBuilderInitial<TName>\n\t: PgPointTupleBuilderInitial<TName>;\nexport function point(a?: string | PgPointConfig, b?: PgPointConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgPointConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgPointTupleBuilder(name);\n\t}\n\treturn new PgPointObjectBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,UAAU,uBAAuB;AAD1C,SAAqB,8BAA8B;;;;AAY5C,MAAM,6QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,SAAS,cAAc;IACpC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sQAA0E,WAAA,CAAY;IAClG,OAAA,CAA0B,qOAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAA4D;QACvF,IAAI,OAAO,UAAU,UAAU;YAC9B,MAAM,CAAC,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;YAC3C,OAAO;gBAAC,OAAO,UAAA,CAAW,CAAE;gBAAG,OAAO,UAAA,CAAW,CAAE,CAAC;aAAA;QACrD;QACA,OAAO;YAAC,MAAM,CAAA;YAAG,MAAM,CAAC;SAAA;IACzB;IAES,iBAAiB,KAAA,EAAiC;QAC1D,OAAO,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IAChC;AACD;AAWO,MAAM,8QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,QAAQ,eAAe;IACpC;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uQAA2E,WAAA,CAAY;IACnG,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoE;QAC/F,IAAI,OAAO,UAAU,UAAU;YAC9B,MAAM,CAAC,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;YAC3C,OAAO;gBAAE,GAAG,OAAO,UAAA,CAAW,CAAE;gBAAG,GAAG,OAAO,UAAA,CAAW,CAAE;YAAE;QAC7D;QACA,OAAO;IACR;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IAC9B;AACD;AAgBO,SAAS,MAAM,CAAA,EAA4B,CAAA,EAAmB;IACpE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAsC,GAAG,CAAC;IACnE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,oBAAoB,IAAI;IACpC;IACA,OAAO,IAAI,qBAAqB,IAAI;AACrC","ignoreList":[0]}},
    {"offset": {"line": 3014, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3020, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/postgis_extension/utils.ts"],"sourcesContent":["function hexToBytes(hex: string): Uint8Array {\n\tconst bytes: number[] = [];\n\tfor (let c = 0; c < hex.length; c += 2) {\n\t\tbytes.push(Number.parseInt(hex.slice(c, c + 2), 16));\n\t}\n\treturn new Uint8Array(bytes);\n}\n\nfunction bytesToFloat64(bytes: Uint8Array, offset: number): number {\n\tconst buffer = new ArrayBuffer(8);\n\tconst view = new DataView(buffer);\n\tfor (let i = 0; i < 8; i++) {\n\t\tview.setUint8(i, bytes[offset + i]!);\n\t}\n\treturn view.getFloat64(0, true);\n}\n\nexport function parseEWKB(hex: string): [number, number] {\n\tconst bytes = hexToBytes(hex);\n\n\tlet offset = 0;\n\n\t// Byte order: 1 is little-endian, 0 is big-endian\n\tconst byteOrder = bytes[offset];\n\toffset += 1;\n\n\tconst view = new DataView(bytes.buffer);\n\tconst geomType = view.getUint32(offset, byteOrder === 1);\n\toffset += 4;\n\n\tlet _srid: number | undefined;\n\tif (geomType & 0x20000000) { // SRID flag\n\t\t_srid = view.getUint32(offset, byteOrder === 1);\n\t\toffset += 4;\n\t}\n\n\tif ((geomType & 0xFFFF) === 1) {\n\t\tconst x = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\t\tconst y = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\n\t\treturn [x, y];\n\t}\n\n\tthrow new Error('Unsupported geometry type');\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAW,GAAA,EAAyB;IAC5C,MAAM,QAAkB,CAAC,CAAA;IACzB,IAAA,IAAS,IAAI,GAAG,IAAI,IAAI,MAAA,EAAQ,KAAK,EAAG;QACvC,MAAM,IAAA,CAAK,OAAO,QAAA,CAAS,IAAI,KAAA,CAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACpD;IACA,OAAO,IAAI,WAAW,KAAK;AAC5B;AAEA,SAAS,eAAe,KAAA,EAAmB,MAAA,EAAwB;IAClE,MAAM,SAAS,IAAI,YAAY,CAAC;IAChC,MAAM,OAAO,IAAI,SAAS,MAAM;IAChC,IAAA,IAAS,IAAI,GAAG,IAAI,GAAG,IAAK;QAC3B,KAAK,QAAA,CAAS,GAAG,KAAA,CAAM,SAAS,CAAC,CAAE;IACpC;IACA,OAAO,KAAK,UAAA,CAAW,GAAG,IAAI;AAC/B;AAEO,SAAS,UAAU,GAAA,EAA+B;IACxD,MAAM,QAAQ,WAAW,GAAG;IAE5B,IAAI,SAAS;IAGb,MAAM,YAAY,KAAA,CAAM,MAAM,CAAA;IAC9B,UAAU;IAEV,MAAM,OAAO,IAAI,SAAS,MAAM,MAAM;IACtC,MAAM,WAAW,KAAK,SAAA,CAAU,QAAQ,cAAc,CAAC;IACvD,UAAU;IAEV,IAAI;IACJ,IAAI,WAAW,WAAY;QAC1B,QAAQ,KAAK,SAAA,CAAU,QAAQ,cAAc,CAAC;QAC9C,UAAU;IACX;IAEA,IAAA,CAAK,WAAW,KAAA,MAAY,GAAG;QAC9B,MAAM,IAAI,eAAe,OAAO,MAAM;QACtC,UAAU;QACV,MAAM,IAAI,eAAe,OAAO,MAAM;QACtC,UAAU;QAEV,OAAO;YAAC;YAAG,CAAC;SAAA;IACb;IAEA,MAAM,IAAI,MAAM,2BAA2B;AAC5C","ignoreList":[0]}},
    {"offset": {"line": 3065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3071, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/postgis_extension/geometry.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\nimport { parseEWKB } from './utils.ts';\n\nexport type PgGeometryBuilderInitial<TName extends string> = PgGeometryBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgGeometry';\n\tdata: [number, number];\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgGeometryBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgGeometry'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometryBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgGeometry');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometry<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometry<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometry<T extends ColumnBaseConfig<'array', 'PgGeometry'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometry';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number] {\n\t\treturn parseEWKB(value);\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `point(${value[0]} ${value[1]})`;\n\t}\n}\n\nexport type PgGeometryObjectBuilderInitial<TName extends string> = PgGeometryObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgGeometryObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgGeometryObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgGeometryObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgGeometryObjectBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgGeometryObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometryObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometryObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometryObject<T extends ColumnBaseConfig<'json', 'PgGeometryObject'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometryObject';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): { x: number; y: number } {\n\t\tconst parsed = parseEWKB(value);\n\t\treturn { x: parsed[0], y: parsed[1] };\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `point(${value.x} ${value.y})`;\n\t}\n}\n\nexport interface PgGeometryConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n\ttype?: 'point' | (string & {});\n\tsrid?: number;\n}\n\nexport function geometry(): PgGeometryBuilderInitial<''>;\nexport function geometry<TMode extends PgGeometryConfig['mode'] & {}>(\n\tconfig?: PgGeometryConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgGeometryObjectBuilderInitial<''> : PgGeometryBuilderInitial<''>;\nexport function geometry<TName extends string, TMode extends PgGeometryConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgGeometryConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgGeometryObjectBuilderInitial<TName> : PgGeometryBuilderInitial<TName>;\nexport function geometry(a?: string | PgGeometryConfig, b?: PgGeometryConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgGeometryConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgGeometryBuilder(name);\n\t}\n\treturn new PgGeometryObjectBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,UAAU,uBAAuB;AAC1C,SAAS,iBAAiB;AAF1B,SAAqB,8BAA8B;;;;;AAa5C,MAAM,2QAAoF,kBAAA,CAAmB;IACnH,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,SAAS,YAAY;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,oQAAsE,WAAA,CAAY;IAC9F,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAiC;QAC5D,gRAAO,YAAA,EAAU,KAAK;IACvB;IAES,iBAAiB,KAAA,EAAiC;QAC1D,OAAO,CAAA,MAAA,EAAS,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IACrC;AACD;AAWO,MAAM,iRACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,0BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,kBAAkB;IACvC;IAAA,cAAA,GAGS,MACR,KAAA,EACoD;QACpD,OAAO,IAAI,iBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,0QAAiF,WAAA,CAAY;IACzG,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAyC;QACpE,MAAM,kRAAS,YAAA,EAAU,KAAK;QAC9B,OAAO;YAAE,GAAG,MAAA,CAAO,CAAC,CAAA;YAAG,GAAG,MAAA,CAAO,CAAC,CAAA;QAAE;IACrC;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,MAAA,EAAS,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IACnC;AACD;AAgBO,SAAS,SAAS,CAAA,EAA+B,CAAA,EAAsB;IAC7E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,kBAAkB,IAAI;IAClC;IACA,OAAO,IAAI,wBAAwB,IAAI;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3147, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/real.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgRealBuilderInitial<TName extends string> = PgRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgReal';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n}>;\n\nexport class PgRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgReal'>> extends PgColumnBuilder<\n\tT,\n\t{ length: number | undefined }\n> {\n\tstatic override readonly [entityKind]: string = 'PgRealBuilder';\n\n\tconstructor(name: T['name'], length?: number) {\n\t\tsuper(name, 'number', 'PgReal');\n\t\tthis.config.length = length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgReal<T extends ColumnBaseConfig<'number', 'PgReal'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgReal';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgRealBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n\n\toverride mapFromDriverValue = (value: string | number): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function real(): PgRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): PgRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new PgRealBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,uQAA6E,kBAAA,CAGxF;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAiB;QAC7C,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS;IACtB;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA+D,WAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,qBAAqB,CAAC,UAAmC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,UAAA,CAAW,KAAK;QAC/B;QACA,OAAO;IACR,EAAA;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 3186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3192, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/serial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSerial'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgSerialBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSerial<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSerial<T extends ColumnBaseConfig<'number', 'PgSerial'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'serial';\n\t}\n}\n\nexport function serial(): PgSerialBuilderInitial<''>;\nexport function serial<TName extends string>(name: TName): PgSerialBuilderInitial<TName>;\nexport function serial(name?: string) {\n\treturn new PgSerialBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAQA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAenC,MAAM,yQAAiF,kBAAA,CAAmB;IAChH,OAAA,yNAA0B,aAAU,CAAA,GAAY,kBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,UAAU;QAChC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EAC4C;QAC5C,OAAO,IAAI,SAA0C,OAAO,IAAA,CAAK,MAA8C;IAChH;AACD;AAEO,MAAM,kQAAmE,WAAA,CAAY;IAC3F,OAAA,yNAA0B,aAAU,CAAA,GAAY,WAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,OAAO,IAAA,EAAe;IACrC,OAAO,IAAI,gBAAgB,QAAQ,EAAE;AACtC","ignoreList":[0]}},
    {"offset": {"line": 3223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3229, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/smallint.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgSmallIntBuilderInitial<TName extends string> = PgSmallIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgSmallInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgSmallIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallInt'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgSmallIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSmallInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSmallInt<T extends ColumnBaseConfig<'number', 'PgSmallInt'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSmallInt';\n\n\tgetSQLType(): string {\n\t\treturn 'smallint';\n\t}\n\n\toverride mapFromDriverValue = (value: number | string): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function smallint(): PgSmallIntBuilderInitial<''>;\nexport function smallint<TName extends string>(name: TName): PgSmallIntBuilderInitial<TName>;\nexport function smallint(name?: string) {\n\treturn new PgSmallIntBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,8BAA8B;AADvC,SAAS,gBAAgB;;;;AAYlB,MAAM,kRACJ,yBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,mQAAuE,YAAA,CAAY;IAC/F,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,qBAAqB,CAAC,UAAmC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,KAAK;QACpB;QACA,OAAO;IACR,EAAA;AACD;AAIO,SAAS,SAAS,IAAA,EAAe;IACvC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3272, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/smallserial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSmallSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSmallSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSmallSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSmallSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallSerial'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgSmallSerialBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSmallSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallSerial<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSmallSerial<T extends ColumnBaseConfig<'number', 'PgSmallSerial'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSmallSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'smallserial';\n\t}\n}\n\nexport function smallserial(): PgSmallSerialBuilderInitial<''>;\nexport function smallserial<TName extends string>(name: TName): PgSmallSerialBuilderInitial<TName>;\nexport function smallserial(name?: string) {\n\treturn new PgSmallSerialBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAQA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAenC,MAAM,8QACJ,kBAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uQAA6E,WAAA,CAAY;IACrG,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,YAAY,IAAA,EAAe;IAC1C,OAAO,IAAI,qBAAqB,QAAQ,EAAE;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 3303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3309, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/text.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\ntype PgTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgText';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n}>;\n\nexport class PgTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgText'>,\n> extends PgColumnBuilder<T, { enumValues: T['enumValues'] }> {\n\tstatic override readonly [entityKind]: string = 'PgTextBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tconfig: PgTextConfig<T['enumValues']>,\n\t) {\n\t\tsuper(name, 'string', 'PgText');\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgText<T extends ColumnBaseConfig<'string', 'PgText'>>\n\textends PgColumn<T, { enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n}\n\nexport interface PgTextConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n> {\n\tenum?: TEnum;\n}\n\nexport function text(): PgTextBuilderInitial<'', [string, ...string[]]>;\nexport function text<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tconfig?: PgTextConfig<T | Writable<T>>,\n): PgTextBuilderInitial<'', Writable<T>>;\nexport function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig?: PgTextConfig<T | Writable<T>>,\n): PgTextBuilderInitial<TName, Writable<T>>;\nexport function text(a?: string | PgTextConfig, b: PgTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgTextConfig>(a, b);\n\treturn new PgTextBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA6C;;;;AAY/C,MAAM,uQAEH,kBAAA,CAAoD;IAC7D,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YACC,IAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQACJ,WAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAE9B,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO;IACR;AACD;AAgBO,SAAS,KAAK,CAAA,EAA2B,IAAkB,CAAC,CAAA,EAAQ;IAC1E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,OAAO,IAAI,cAAc,MAAM,MAAa;AAC7C","ignoreList":[0]}},
    {"offset": {"line": 3343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3349, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/time.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgTimeBuilderInitial<TName extends string> = PgTimeBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTime';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimeBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTime'>> extends PgDateColumnBaseBuilder<\n\tT,\n\t{ withTimezone: boolean; precision: number | undefined }\n> {\n\tstatic override readonly [entityKind]: string = 'PgTimeBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\treadonly withTimezone: boolean,\n\t\treadonly precision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTime');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTime<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTime<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTime<T extends ColumnBaseConfig<'string', 'PgTime'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTime';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimeBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `time${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport interface TimeConfig {\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function time(): PgTimeBuilderInitial<''>;\nexport function time(config?: TimeConfig): PgTimeBuilderInitial<''>;\nexport function time<TName extends string>(name: TName, config?: TimeConfig): PgTimeBuilderInitial<TName>;\nexport function time(a?: string | TimeConfig, b: TimeConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<TimeConfig>(a, b);\n\treturn new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,+BAA+B;AADxC,SAAS,gBAAgB;AADzB,SAAS,8BAA8B;;;;;AAchC,MAAM,+QAA6E,0BAAA,CAGxF;IAGD,YACC,IAAA,EACS,YAAA,EACA,SAAA,CACR;QACD,KAAA,CAAM,MAAM,UAAU,QAAQ;QAHrB,IAAA,CAAA,YAAA,GAAA;QACA,IAAA,CAAA,SAAA,GAAA;QAGT,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAVA,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAAA,cAAA,GAavC,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,+PAA+D,YAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACxE,OAAO,CAAA,IAAA,EAAO,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IACrE;AACD;AAUO,SAAS,KAAK,CAAA,EAAyB,IAAgB,CAAC,CAAA,EAAG;IACjE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAmC,GAAG,CAAC;IAChE,OAAO,IAAI,cAAc,MAAM,OAAO,YAAA,IAAgB,OAAO,OAAO,SAAS;AAC9E","ignoreList":[0]}},
    {"offset": {"line": 3395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3401, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/timestamp.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgTimestampBuilderInitial<TName extends string> = PgTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgTimestamp';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgTimestamp'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgTimestampBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'date', 'PgTimestamp');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestamp<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTimestamp<T extends ColumnBaseConfig<'date', 'PgTimestamp'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTimestamp';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : ` (${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n\n\toverride mapFromDriverValue = (value: string): Date | null => {\n\t\treturn new Date(this.withTimezone ? value : value + '+0000');\n\t};\n\n\toverride mapToDriverValue = (value: Date): string => {\n\t\treturn value.toISOString();\n\t};\n}\n\nexport type PgTimestampStringBuilderInitial<TName extends string> = PgTimestampStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTimestampString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTimestampString'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgTimestampStringBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTimestampString');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestampString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestampString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgTimestampString<T extends ColumnBaseConfig<'string', 'PgTimestampString'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTimestampString';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampStringBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport type Precision = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface PgTimestampConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function timestamp(): PgTimestampBuilderInitial<''>;\nexport function timestamp<TMode extends PgTimestampConfig['mode'] & {}>(\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<''> : PgTimestampBuilderInitial<''>;\nexport function timestamp<TName extends string, TMode extends PgTimestampConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<TName> : PgTimestampBuilderInitial<TName>;\nexport function timestamp(a?: string | PgTimestampConfig, b: PgTimestampConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<PgTimestampConfig | undefined>(a, b);\n\tif (config?.mode === 'string') {\n\t\treturn new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n\t}\n\treturn new PgTimestampBuilder(name, config?.withTimezone ?? false, config?.precision);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAI3B,SAAS,+BAA+B;AADxC,SAAS,gBAAgB;AADzB,SAAqB,8BAA8B;;;;;AAa5C,MAAM,oRACJ,0BAAA,CAIT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,qBAAA;IAEhD,YACC,IAAA,EACA,YAAA,EACA,SAAA,CACC;QACD,KAAA,CAAM,MAAM,QAAQ,aAAa;QACjC,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAAA,cAAA,GAGS,MACR,KAAA,EAC+C;QAC/C,OAAO,IAAI,YAA6C,OAAO,IAAA,CAAK,MAA8C;IACnH;AACD;AAEO,MAAM,qQAAuE,WAAA,CAAY;IAC/F,OAAA,yNAA0B,aAAU,CAAA,GAAY,cAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAAyC;QACjG,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,EAAA,EAAK,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACzE,OAAO,CAAA,SAAA,EAAY,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IAC1E;IAES,qBAAqB,CAAC,UAA+B;QAC7D,OAAO,IAAI,KAAK,IAAA,CAAK,YAAA,GAAe,QAAQ,QAAQ,OAAO;IAC5D,EAAA;IAES,mBAAmB,CAAC,UAAwB;QACpD,OAAO,MAAM,WAAA,CAAY;IAC1B,EAAA;AACD;AAWO,MAAM,0RACJ,0BAAA,CAIT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,YACC,IAAA,EACA,YAAA,EACA,SAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,mBAAmB;QACzC,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAAA,cAAA,GAGS,MACR,KAAA,EACqD;QACrD,OAAO,IAAI,kBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,2QAAqF,WAAA,CAAY;IAC7G,OAAA,yNAA0B,aAAU,CAAA,GAAY,oBAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAA+C;QACvG,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACxE,OAAO,CAAA,SAAA,EAAY,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IAC1E;AACD;AAkBO,SAAS,UAAU,CAAA,EAAgC,IAAuB,CAAC,CAAA,EAAG;IACpF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,IAAI,mPAAA,EAAsD,GAAG,CAAC;IACnF,IAAI,QAAQ,SAAS,UAAU;QAC9B,OAAO,IAAI,yBAAyB,MAAM,OAAO,YAAA,IAAgB,OAAO,OAAO,SAAS;IACzF;IACA,OAAO,IAAI,mBAAmB,MAAM,QAAQ,gBAAgB,OAAO,QAAQ,SAAS;AACrF","ignoreList":[0]}},
    {"offset": {"line": 3481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3487, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/uuid.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgUUIDBuilderInitial<TName extends string> = PgUUIDBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgUUID';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgUUIDBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgUUID'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgUUIDBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgUUID');\n\t}\n\n\t/**\n\t * Adds `default gen_random_uuid()` to the column definition.\n\t */\n\tdefaultRandom(): ReturnType<this['default']> {\n\t\treturn this.default(sql`gen_random_uuid()`) as ReturnType<this['default']>;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgUUID<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgUUID<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgUUID<T extends ColumnBaseConfig<'string', 'PgUUID'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgUUID';\n\n\tgetSQLType(): string {\n\t\treturn 'uuid';\n\t}\n}\n\nexport function uuid(): PgUUIDBuilderInitial<''>;\nexport function uuid<TName extends string>(name: TName): PgUUIDBuilderInitial<TName>;\nexport function uuid(name?: string) {\n\treturn new PgUUIDBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AACpB,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,uQAA6E,kBAAA,CAAmB;IAC5G,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA;;GAAA,GAKA,gBAA6C;QAC5C,OAAO,IAAA,CAAK,OAAA,6NAAQ,MAAA,CAAA,iBAAA,CAAsB;IAC3C;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gQAA+D,WAAA,CAAY;IACvF,OAAA,yNAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 3523, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3529, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/varchar.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgVarcharBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = PgVarcharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgVarchar';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tlength: TLength;\n}>;\n\nexport class PgVarcharBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgVarchar'> & { length?: number | undefined },\n> extends PgColumnBuilder<\n\tT,\n\t{ length: T['length']; enumValues: T['enumValues'] },\n\t{ length: T['length'] }\n> {\n\tstatic override readonly [entityKind]: string = 'PgVarcharBuilder';\n\n\tconstructor(name: T['name'], config: PgVarcharConfig<T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'PgVarchar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVarchar<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new PgVarchar<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgVarchar<T extends ColumnBaseConfig<'string', 'PgVarchar'> & { length?: number | undefined }>\n\textends PgColumn<T, { length: T['length']; enumValues: T['enumValues'] }, { length: T['length'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgVarchar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `varchar` : `varchar(${this.length})`;\n\t}\n}\n\nexport interface PgVarcharConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> {\n\tenum?: TEnum;\n\tlength?: TLength;\n}\n\nexport function varchar(): PgVarcharBuilderInitial<'', [string, ...string[]], undefined>;\nexport function varchar<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tconfig?: PgVarcharConfig<T | Writable<T>, L>,\n): PgVarcharBuilderInitial<'', Writable<T>, L>;\nexport function varchar<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tname: TName,\n\tconfig?: PgVarcharConfig<T | Writable<T>, L>,\n): PgVarcharBuilderInitial<TName, Writable<T>, L>;\nexport function varchar(a?: string | PgVarcharConfig, b: PgVarcharConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgVarcharConfig>(a, b);\n\treturn new PgVarcharBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA6C;;;;AAiB/C,MAAM,0QAEH,kBAAA,CAIR;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAuD;QACnF,KAAA,CAAM,MAAM,UAAU,WAAW;QACjC,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;QAC5B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACuE;QACvE,OAAO,IAAI,UACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,mQACJ,WAAA,CACT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,YAAA;IAEvC,SAAS,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IACZ,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO,IAAA,CAAK,MAAA,KAAW,KAAA,IAAY,CAAA,OAAA,CAAA,GAAY,CAAA,QAAA,EAAW,IAAA,CAAK,MAAM,CAAA,CAAA,CAAA;IACtE;AACD;AA2BO,SAAS,QAAQ,CAAA,EAA8B,IAAqB,CAAC,CAAA,EAAQ;IACnF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAwC,GAAG,CAAC;IACrE,OAAO,IAAI,iBAAiB,MAAM,MAAa;AAChD","ignoreList":[0]}},
    {"offset": {"line": 3565, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3571, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/vector_extension/bit.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgBinaryVectorBuilderInitial<TName extends string, TDimensions extends number> = PgBinaryVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgBinaryVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgBinaryVectorBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgBinaryVector'> & { dimensions: number },\n> extends PgColumnBuilder<\n\tT,\n\t{ dimensions: T['dimensions'] }\n> {\n\tstatic override readonly [entityKind]: string = 'PgBinaryVectorBuilder';\n\n\tconstructor(name: string, config: PgBinaryVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'string', 'PgBinaryVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBinaryVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgBinaryVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBinaryVector<T extends ColumnBaseConfig<'string', 'PgBinaryVector'> & { dimensions: number }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgBinaryVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `bit(${this.dimensions})`;\n\t}\n}\n\nexport interface PgBinaryVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function bit<D extends number>(\n\tconfig: PgBinaryVectorConfig<D>,\n): PgBinaryVectorBuilderInitial<'', D>;\nexport function bit<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgBinaryVectorConfig<D>,\n): PgBinaryVectorBuilderInitial<TName, D>;\nexport function bit(a: string | PgBinaryVectorConfig, b?: PgBinaryVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBinaryVectorConfig>(a, b);\n\treturn new PgBinaryVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAahC,MAAM,+QAEH,kBAAA,CAGR;IACD,OAAA,yNAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA+C;QACxE,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACoF;QACpF,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wQACJ,WAAA,CACT;IACC,OAAA,CAA0B,qOAAU,CAAA,GAAY,iBAAA;IAEvC,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,aAAqB;QACpB,OAAO,CAAA,IAAA,EAAO,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IAC9B;AACD;AAaO,SAAS,IAAI,CAAA,EAAkC,CAAA,EAA0B;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAA6C,GAAG,CAAC;IAC1E,OAAO,IAAI,sBAAsB,MAAM,MAAM;AAC9C","ignoreList":[0]}},
    {"offset": {"line": 3605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3611, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/vector_extension/halfvec.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgHalfVectorBuilderInitial<TName extends string, TDimensions extends number> = PgHalfVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgHalfVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgHalfVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgHalfVector'> & { dimensions: number }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: T['dimensions'] },\n\t\t{ dimensions: T['dimensions'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgHalfVectorBuilder';\n\n\tconstructor(name: string, config: PgHalfVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'array', 'PgHalfVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgHalfVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgHalfVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgHalfVector<T extends ColumnBaseConfig<'array', 'PgHalfVector'> & { dimensions: number }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgHalfVector';\n\n\treadonly dimensions: T['dimensions'] = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `halfvec(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgHalfVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function halfvec<D extends number>(\n\tconfig: PgHalfVectorConfig<D>,\n): PgHalfVectorBuilderInitial<'', D>;\nexport function halfvec<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgHalfVectorConfig,\n): PgHalfVectorBuilderInitial<TName, D>;\nexport function halfvec(a: string | PgHalfVectorConfig, b?: PgHalfVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgHalfVectorConfig>(a, b);\n\treturn new PgHalfVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAahC,MAAM,6QACJ,kBAAA,CAKT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA6C;QACtE,KAAA,CAAM,MAAM,SAAS,cAAc;QACnC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACkF;QAClF,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sQACJ,WAAA,CACT;IACC,OAAA,wNAA0B,cAAU,CAAA,GAAY,eAAA;IAEvC,aAA8B,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAEnD,aAAqB;QACpB,OAAO,CAAA,QAAA,EAAW,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IAClC;IAES,iBAAiB,KAAA,EAAyB;QAClD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAwB;QACnD,OAAO,MACL,KAAA,CAAM,GAAG,CAAA,CAAE,EACX,KAAA,CAAM,GAAG,EACT,GAAA,CAAI,CAAC,IAAM,OAAO,UAAA,CAAW,CAAC,CAAC;IAClC;AACD;AAaO,SAAS,QAAQ,CAAA,EAAgC,CAAA,EAAwB;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAA2C,GAAG,CAAC;IACxE,OAAO,IAAI,oBAAoB,MAAM,MAAM;AAC5C","ignoreList":[0]}},
    {"offset": {"line": 3651, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3657, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/vector_extension/sparsevec.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgSparseVectorBuilderInitial<TName extends string> = PgSparseVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgSparseVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgSparseVectorBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgSparseVectorBuilder';\n\n\tconstructor(name: string, config: PgSparseVectorConfig) {\n\t\tsuper(name, 'string', 'PgSparseVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSparseVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSparseVector<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSparseVector<T extends ColumnBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic override readonly [entityKind]: string = 'PgSparseVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `sparsevec(${this.dimensions})`;\n\t}\n}\n\nexport interface PgSparseVectorConfig {\n\tdimensions: number;\n}\n\nexport function sparsevec(\n\tconfig: PgSparseVectorConfig,\n): PgSparseVectorBuilderInitial<''>;\nexport function sparsevec<TName extends string>(\n\tname: TName,\n\tconfig: PgSparseVectorConfig,\n): PgSparseVectorBuilderInitial<TName>;\nexport function sparsevec(a: string | PgSparseVectorConfig, b?: PgSparseVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgSparseVectorConfig>(a, b);\n\treturn new PgSparseVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAYhC,MAAM,+QACJ,kBAAA,CAIT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA8B;QACvD,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wQACJ,WAAA,CACT;IACC,OAAA,CAA0B,qOAAU,CAAA,GAAY,iBAAA;IAEvC,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,aAAqB;QACpB,OAAO,CAAA,UAAA,EAAa,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IACpC;AACD;AAaO,SAAS,UAAU,CAAA,EAAkC,CAAA,EAA0B;IACrF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAA6C,GAAG,CAAC;IAC1E,OAAO,IAAI,sBAAsB,MAAM,MAAM;AAC9C","ignoreList":[0]}},
    {"offset": {"line": 3691, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3697, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/vector_extension/vector.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgVectorBuilderInitial<TName extends string, TDimensions extends number> = PgVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgVector'> & { dimensions: number }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: T['dimensions'] },\n\t\t{ dimensions: T['dimensions'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgVectorBuilder';\n\n\tconstructor(name: string, config: PgVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'array', 'PgVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgVector<T extends ColumnBaseConfig<'array', 'PgVector'> & { dimensions: number | undefined }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgVector';\n\n\treadonly dimensions: T['dimensions'] = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `vector(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function vector<D extends number>(\n\tconfig: PgVectorConfig<D>,\n): PgVectorBuilderInitial<'', D>;\nexport function vector<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgVectorConfig<D>,\n): PgVectorBuilderInitial<TName, D>;\nexport function vector(a: string | PgVectorConfig, b?: PgVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgVectorConfig>(a, b);\n\treturn new PgVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;AAD1C,SAAS,8BAA8B;;;;AAahC,MAAM,yQACJ,kBAAA,CAKT;IACC,OAAA,yNAA0B,aAAU,CAAA,GAAY,kBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAAyC;QAClE,KAAA,CAAM,MAAM,SAAS,UAAU;QAC/B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8E;QAC9E,OAAO,IAAI,SACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,kQACJ,WAAA,CACT;IACC,OAAA,wNAA0B,cAAU,CAAA,GAAY,WAAA;IAEvC,aAA8B,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAEnD,aAAqB;QACpB,OAAO,CAAA,OAAA,EAAU,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IACjC;IAES,iBAAiB,KAAA,EAAyB;QAClD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAwB;QACnD,OAAO,MACL,KAAA,CAAM,GAAG,CAAA,CAAE,EACX,KAAA,CAAM,GAAG,EACT,GAAA,CAAI,CAAC,IAAM,OAAO,UAAA,CAAW,CAAC,CAAC;IAClC;AACD;AAaO,SAAS,OAAO,CAAA,EAA4B,CAAA,EAAoB;IACtE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,8NAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,OAAO,IAAI,gBAAgB,MAAM,MAAM;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3737, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3743, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/columns/all.ts"],"sourcesContent":["import { bigint } from './bigint.ts';\nimport { bigserial } from './bigserial.ts';\nimport { boolean } from './boolean.ts';\nimport { char } from './char.ts';\nimport { cidr } from './cidr.ts';\nimport { customType } from './custom.ts';\nimport { date } from './date.ts';\nimport { doublePrecision } from './double-precision.ts';\nimport { inet } from './inet.ts';\nimport { integer } from './integer.ts';\nimport { interval } from './interval.ts';\nimport { json } from './json.ts';\nimport { jsonb } from './jsonb.ts';\nimport { line } from './line.ts';\nimport { macaddr } from './macaddr.ts';\nimport { macaddr8 } from './macaddr8.ts';\nimport { numeric } from './numeric.ts';\nimport { point } from './point.ts';\nimport { geometry } from './postgis_extension/geometry.ts';\nimport { real } from './real.ts';\nimport { serial } from './serial.ts';\nimport { smallint } from './smallint.ts';\nimport { smallserial } from './smallserial.ts';\nimport { text } from './text.ts';\nimport { time } from './time.ts';\nimport { timestamp } from './timestamp.ts';\nimport { uuid } from './uuid.ts';\nimport { varchar } from './varchar.ts';\nimport { bit } from './vector_extension/bit.ts';\nimport { halfvec } from './vector_extension/halfvec.ts';\nimport { sparsevec } from './vector_extension/sparsevec.ts';\nimport { vector } from './vector_extension/vector.ts';\n\nexport function getPgColumnBuilders() {\n\treturn {\n\t\tbigint,\n\t\tbigserial,\n\t\tboolean,\n\t\tchar,\n\t\tcidr,\n\t\tcustomType,\n\t\tdate,\n\t\tdoublePrecision,\n\t\tinet,\n\t\tinteger,\n\t\tinterval,\n\t\tjson,\n\t\tjsonb,\n\t\tline,\n\t\tmacaddr,\n\t\tmacaddr8,\n\t\tnumeric,\n\t\tpoint,\n\t\tgeometry,\n\t\treal,\n\t\tserial,\n\t\tsmallint,\n\t\tsmallserial,\n\t\ttext,\n\t\ttime,\n\t\ttimestamp,\n\t\tuuid,\n\t\tvarchar,\n\t\tbit,\n\t\thalfvec,\n\t\tsparsevec,\n\t\tvector,\n\t};\n}\n\nexport type PgColumnsBuilders = ReturnType<typeof getPgColumnBuilders>;\n"],"names":[],"mappings":";;;AAAA,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,uBAAuB;AAChC,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,aAAa;AACtB,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,cAAc;AACvB,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhB,SAAS,sBAAsB;IACrC,OAAO;iQACN,SAAA;uQACA,YAAA;mQACA,UAAA;6PACA,OAAA;6PACA,OAAA;qQACA,aAAA;6PACA,OAAA;uRACA,kBAAA;6PACA,OAAA;mQACA,UAAA;qQACA,WAAA;6PACA,OAAA;+PACA,QAAA;6PACA,OAAA;mQACA,UAAA;qQACA,WAAA;mQACA,UAAA;+PACA,QAAA;0RACA,WAAA;6PACA,OAAA;iQACA,SAAA;qQACA,WAAA;2QACA,cAAA;6PACA,OAAA;6PACA,OAAA;uQACA,YAAA;6PACA,OAAA;mQACA,UAAA;+QACA,MAAA;uRACA,UAAA;2RACA,YAAA;qRACA,SAAA;IACD;AACD","ignoreList":[0]}},
    {"offset": {"line": 3848, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3854, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/table.ts"],"sourcesContent":["import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getPgColumnBuilders, type PgColumnsBuilders } from './columns/all.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PgPolicy } from './policies.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfigValue =\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n\t| PgPolicy;\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\tPgTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n/** @internal */\nexport const EnableRLS = Symbol.for('drizzle:EnableRLS');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t\tEnableRLS: EnableRLS as typeof EnableRLS,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\t[EnableRLS]: boolean = false;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t}\n\t& {\n\t\tenableRLS: () => Omit<\n\t\t\tPgTableWithColumns<T>,\n\t\t\t'enableRLS'\n\t\t>;\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: PgColumnsBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig | PgTableExtraConfigValue[])\n\t\t| undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getPgColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn Object.assign(table, {\n\t\tenableRLS: () => {\n\t\t\ttable[PgTable.Symbol.EnableRLS] = true;\n\t\t\treturn table as PgTableWithColumns<{\n\t\t\t\tname: TTableName;\n\t\t\t\tschema: TSchemaName;\n\t\t\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\t\t\tdialect: 'pg';\n\t\t\t}>;\n\t\t},\n\t});\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n"],"names":["name"],"mappings":";;;;;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAA0E;AAEnF,SAAS,2BAAmD;;;;AAwBrD,MAAM,oBAAoB,OAAO,GAAA,CAAI,6BAA6B;AAElE,MAAM,YAAY,OAAO,GAAA,CAAI,mBAAmB;AAEhD,MAAM,uOAAqD,QAAA,CAAS;IAC1E,OAAA,yNAA0B,aAAU,CAAA,GAAY,UAAA;IAAA,cAAA,GAGhD,OAAyB,SAAS,OAAO,MAAA,CAAO,CAAC,0NAAG,QAAA,CAAM,MAAA,EAAQ;QACjE;QACA;IACD,CAAC,EAAA;IAAA,aAAA,GAGD,CAAC,iBAAiB,CAAA,GAAkB,CAAC,CAAA,CAAA;IAAA,cAAA,GAGrC,CAAC,SAAS,CAAA,GAAa,MAAA;IAAA,cAAA,GAGvB,wNAAU,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GACxC,KAAA,EAAA;AACF;AAiBO,SAAS,kBAKf,IAAA,EACA,OAAA,EACA,WAAA,EAGA,MAAA,EACA,WAAW,IAAA,EAMT;IACF,MAAM,WAAW,IAAI,QAKlB,MAAM,QAAQ,QAAQ;IAEzB,MAAM,gBAA6B,OAAO,YAAY,aAAa,0PAAQ,sBAAA,CAAoB,CAAC,KAAI;IAEpG,MAAM,eAAe,OAAO,WAAA,CAC3B,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,KAAA,CAAM,QAAQ;QACxC,QAAA,CAAS,iBAAiB,CAAA,CAAE,IAAA,CAAK,GAAG,WAAW,gBAAA,CAAiB,QAAQ,QAAQ,CAAC;QACjF,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,6BAA6B,OAAO,WAAA,CACzC,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,sBAAA,CAAuB,QAAQ;QACzD,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,QAAQ,OAAO,MAAA,CAAO,UAAU,YAAY;IAElD,KAAA,CAAM,+NAAA,CAAM,MAAA,CAAO,OAAO,CAAA,GAAI;IAC9B,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAEzC,IAAI,aAAa;QAChB,KAAA,CAAM,QAAQ,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAC5C;IAEA,OAAO,OAAO,MAAA,CAAO,OAAO;QAC3B,WAAW,MAAM;YAChB,KAAA,CAAM,QAAQ,MAAA,CAAO,SAAS,CAAA,GAAI;YAClC,OAAO;QAMR;IACD,CAAC;AACF;AA2GO,MAAM,UAAqB,CAAC,MAAM,SAAS,gBAAgB;IACjE,OAAO,kBAAkB,MAAM,SAAS,aAAa,KAAA,CAAS;AAC/D;AAEO,SAAS,eAAe,kBAAA,EAAyD;IACvF,OAAO,CAAC,MAAM,SAAS,gBAAgB;QACtC,OAAO,kBAAkB,mBAAmB,IAAI,GAAkB,SAAS,aAAa,KAAA,GAAW,IAAI;IACxG;AACD","ignoreList":[0]}},
    {"offset": {"line": 3925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3931, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/primary-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,eAAe;;;AAejB,SAAS,WAAA,GAAc,MAAA,EAAa;IAC1C,IAAI,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS;QACtB,OAAO,IAAI,kBAAkB,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS,MAAA,CAAO,CAAC,CAAA,CAAE,IAAI;IAC/D;IACA,OAAO,IAAI,kBAAkB,MAAM;AACpC;AAEO,MAAM,kBAAkB;IAC9B,OAAA,yNAAiB,aAAU,CAAA,GAAY,sBAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAGA,KAAA;IAEA,YACC,OAAA,EACA,IAAA,CACC;QACD,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IAAA,cAAA,GAGA,MAAM,KAAA,EAA4B;QACjC,OAAO,IAAI,WAAW,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IACrD;AACD;AAEO,MAAM,WAAW;IAMvB,YAAqB,KAAA,EAAgB,OAAA,EAA4B,IAAA,CAAe;QAA3D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IARA,OAAA,yNAAiB,aAAU,CAAA,GAAY,eAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAkB;QACjB,OAAO,IAAA,CAAK,IAAA,IAAQ,GAAG,IAAA,CAAK,KAAA,sOAAM,UAAA,CAAQ,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA,EAAI,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,EAAE,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IAC9G;AACD","ignoreList":[0]}},
    {"offset": {"line": 3973, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3978, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/build/webpack/loaders/next-flight-loader/server-reference.ts"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nexport { registerServerReference } from 'react-server-dom-webpack/server.edge'\n"],"names":["registerServerReference"],"mappings":"AAAA,oDAAoD,GAAA;;;;+BAC3CA,2BAAAA;;;eAAAA,YAAAA,uBAAuB;;;4BAAQ","ignoreList":[0]}},
    {"offset": {"line": 3989, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3994, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/lib/trace/constants.ts"],"sourcesContent":["/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/\n\n// eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */\n\nenum BaseServerSpan {\n  handleRequest = 'BaseServer.handleRequest',\n  run = 'BaseServer.run',\n  pipe = 'BaseServer.pipe',\n  getStaticHTML = 'BaseServer.getStaticHTML',\n  render = 'BaseServer.render',\n  renderToResponseWithComponents = 'BaseServer.renderToResponseWithComponents',\n  renderToResponse = 'BaseServer.renderToResponse',\n  renderToHTML = 'BaseServer.renderToHTML',\n  renderError = 'BaseServer.renderError',\n  renderErrorToResponse = 'BaseServer.renderErrorToResponse',\n  renderErrorToHTML = 'BaseServer.renderErrorToHTML',\n  render404 = 'BaseServer.render404',\n}\n\nenum LoadComponentsSpan {\n  loadDefaultErrorComponents = 'LoadComponents.loadDefaultErrorComponents',\n  loadComponents = 'LoadComponents.loadComponents',\n}\n\nenum NextServerSpan {\n  getRequestHandler = 'NextServer.getRequestHandler',\n  getServer = 'NextServer.getServer',\n  getServerRequestHandler = 'NextServer.getServerRequestHandler',\n  createServer = 'createServer.createServer',\n}\n\nenum NextNodeServerSpan {\n  compression = 'NextNodeServer.compression',\n  getBuildId = 'NextNodeServer.getBuildId',\n  createComponentTree = 'NextNodeServer.createComponentTree',\n  clientComponentLoading = 'NextNodeServer.clientComponentLoading',\n  getLayoutOrPageModule = 'NextNodeServer.getLayoutOrPageModule',\n  generateStaticRoutes = 'NextNodeServer.generateStaticRoutes',\n  generateFsStaticRoutes = 'NextNodeServer.generateFsStaticRoutes',\n  generatePublicRoutes = 'NextNodeServer.generatePublicRoutes',\n  generateImageRoutes = 'NextNodeServer.generateImageRoutes.route',\n  sendRenderResult = 'NextNodeServer.sendRenderResult',\n  proxyRequest = 'NextNodeServer.proxyRequest',\n  runApi = 'NextNodeServer.runApi',\n  render = 'NextNodeServer.render',\n  renderHTML = 'NextNodeServer.renderHTML',\n  imageOptimizer = 'NextNodeServer.imageOptimizer',\n  getPagePath = 'NextNodeServer.getPagePath',\n  getRoutesManifest = 'NextNodeServer.getRoutesManifest',\n  findPageComponents = 'NextNodeServer.findPageComponents',\n  getFontManifest = 'NextNodeServer.getFontManifest',\n  getServerComponentManifest = 'NextNodeServer.getServerComponentManifest',\n  getRequestHandler = 'NextNodeServer.getRequestHandler',\n  renderToHTML = 'NextNodeServer.renderToHTML',\n  renderError = 'NextNodeServer.renderError',\n  renderErrorToHTML = 'NextNodeServer.renderErrorToHTML',\n  render404 = 'NextNodeServer.render404',\n  startResponse = 'NextNodeServer.startResponse',\n\n  // nested inner span, does not require parent scope name\n  route = 'route',\n  onProxyReq = 'onProxyReq',\n  apiResolver = 'apiResolver',\n  internalFetch = 'internalFetch',\n}\n\nenum StartServerSpan {\n  startServer = 'startServer.startServer',\n}\n\nenum RenderSpan {\n  getServerSideProps = 'Render.getServerSideProps',\n  getStaticProps = 'Render.getStaticProps',\n  renderToString = 'Render.renderToString',\n  renderDocument = 'Render.renderDocument',\n  createBodyResult = 'Render.createBodyResult',\n}\n\nenum AppRenderSpan {\n  renderToString = 'AppRender.renderToString',\n  renderToReadableStream = 'AppRender.renderToReadableStream',\n  getBodyResult = 'AppRender.getBodyResult',\n  fetch = 'AppRender.fetch',\n}\n\nenum RouterSpan {\n  executeRoute = 'Router.executeRoute',\n}\n\nenum NodeSpan {\n  runHandler = 'Node.runHandler',\n}\n\nenum AppRouteRouteHandlersSpan {\n  runHandler = 'AppRouteRouteHandlers.runHandler',\n}\n\nenum ResolveMetadataSpan {\n  generateMetadata = 'ResolveMetadata.generateMetadata',\n  generateViewport = 'ResolveMetadata.generateViewport',\n}\n\nenum MiddlewareSpan {\n  execute = 'Middleware.execute',\n}\n\ntype SpanTypes =\n  | `${BaseServerSpan}`\n  | `${LoadComponentsSpan}`\n  | `${NextServerSpan}`\n  | `${StartServerSpan}`\n  | `${NextNodeServerSpan}`\n  | `${RenderSpan}`\n  | `${RouterSpan}`\n  | `${AppRenderSpan}`\n  | `${NodeSpan}`\n  | `${AppRouteRouteHandlersSpan}`\n  | `${ResolveMetadataSpan}`\n  | `${MiddlewareSpan}`\n\n// This list is used to filter out spans that are not relevant to the user\nexport const NextVanillaSpanAllowlist = [\n  MiddlewareSpan.execute,\n  BaseServerSpan.handleRequest,\n  RenderSpan.getServerSideProps,\n  RenderSpan.getStaticProps,\n  AppRenderSpan.fetch,\n  AppRenderSpan.getBodyResult,\n  RenderSpan.renderDocument,\n  NodeSpan.runHandler,\n  AppRouteRouteHandlersSpan.runHandler,\n  ResolveMetadataSpan.generateMetadata,\n  ResolveMetadataSpan.generateViewport,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.getLayoutOrPageModule,\n  NextNodeServerSpan.startResponse,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\n// These Spans are allowed to be always logged\n// when the otel log prefix env is set\nexport const LogSpanAllowList = [\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\nexport {\n  BaseServerSpan,\n  LoadComponentsSpan,\n  NextServerSpan,\n  NextNodeServerSpan,\n  StartServerSpan,\n  RenderSpan,\n  RouterSpan,\n  AppRenderSpan,\n  NodeSpan,\n  AppRouteRouteHandlersSpan,\n  ResolveMetadataSpan,\n  MiddlewareSpan,\n}\n\nexport type { SpanTypes }\n"],"names":["AppRenderSpan","AppRouteRouteHandlersSpan","BaseServerSpan","LoadComponentsSpan","LogSpanAllowList","MiddlewareSpan","NextNodeServerSpan","NextServerSpan","NextVanillaSpanAllowlist","NodeSpan","RenderSpan","ResolveMetadataSpan","RouterSpan","StartServerSpan"],"mappings":"AAAA;;;;;EAKE,GAEF,4CAA4C;AAC5C,4BAA4B,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0J1BA,aAAa,EAAA;eAAbA;;IAEAC,yBAAyB,EAAA;eAAzBA;;IATAC,cAAc,EAAA;eAAdA;;IACAC,kBAAkB,EAAA;eAAlBA;;IARWC,gBAAgB,EAAA;eAAhBA;;IAkBXC,cAAc,EAAA;eAAdA;;IARAC,kBAAkB,EAAA;eAAlBA;;IADAC,cAAc,EAAA;eAAdA;;IA9BWC,wBAAwB,EAAA;eAAxBA;;IAoCXC,QAAQ,EAAA;eAARA;;IAHAC,UAAU,EAAA;eAAVA;;IAKAC,mBAAmB,EAAA;eAAnBA;;IAJAC,UAAU,EAAA;eAAVA;;IAFAC,eAAe,EAAA;eAAfA;;;AArJF,IAAKX,iBAAAA,WAAAA,GAAAA,SAAAA,cAAAA;;;;;;;;;;;;;WAAAA;EAAAA,kBAAAA,CAAAA;AAeL,IAAKC,qBAAAA,WAAAA,GAAAA,SAAAA,kBAAAA;;;WAAAA;EAAAA,sBAAAA,CAAAA;AAKL,IAAKI,iBAAAA,WAAAA,GAAAA,SAAAA,cAAAA;;;;;WAAAA;EAAAA,kBAAAA,CAAAA;AAOL,IAAKD,qBAAAA,WAAAA,GAAAA,SAAAA,kBAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BH,wDAAwD;;;;;WA5BrDA;EAAAA,sBAAAA,CAAAA;AAmCL,IAAKO,kBAAAA,WAAAA,GAAAA,SAAAA,eAAAA;;WAAAA;EAAAA,mBAAAA,CAAAA;AAIL,IAAKH,aAAAA,WAAAA,GAAAA,SAAAA,UAAAA;;;;;;WAAAA;EAAAA,cAAAA,CAAAA;AAQL,IAAKV,gBAAAA,WAAAA,GAAAA,SAAAA,aAAAA;;;;;WAAAA;EAAAA,iBAAAA,CAAAA;AAOL,IAAKY,aAAAA,WAAAA,GAAAA,SAAAA,UAAAA;;WAAAA;EAAAA,cAAAA,CAAAA;AAIL,IAAKH,WAAAA,WAAAA,GAAAA,SAAAA,QAAAA;;WAAAA;EAAAA,YAAAA,CAAAA;AAIL,IAAKR,4BAAAA,WAAAA,GAAAA,SAAAA,yBAAAA;;WAAAA;EAAAA,6BAAAA,CAAAA;AAIL,IAAKU,sBAAAA,WAAAA,GAAAA,SAAAA,mBAAAA;;;WAAAA;EAAAA,uBAAAA,CAAAA;AAKL,IAAKN,iBAAAA,WAAAA,GAAAA,SAAAA,cAAAA;;WAAAA;EAAAA,kBAAAA,CAAAA;AAmBE,MAAMG,2BAA2B;;;;;;;;;;;;;;;;;CAiBvC;AAIM,MAAMJ,mBAAmB;;;;CAI/B","ignoreList":[0]}},
    {"offset": {"line": 4194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4199, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/shared/lib/is-thenable.ts"],"sourcesContent":["/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n"],"names":["isThenable","promise","then"],"mappings":"AAAA;;;;;CAKC,GAAA;;;;+BACeA,cAAAA;;;eAAAA;;;AAAT,SAASA,WACdC,OAAuB;IAEvB,OACEA,YAAY,QACZ,OAAOA,YAAY,YACnB,UAAUA,WACV,OAAOA,QAAQC,IAAI,KAAK;AAE5B","ignoreList":[0]}},
    {"offset": {"line": 4217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4222, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/lib/trace/tracer.ts"],"sourcesContent":["import type { FetchEventResult } from '../../web/types'\nimport type { TextMapSetter } from '@opentelemetry/api'\nimport type { SpanTypes } from './constants'\nimport { LogSpanAllowList, NextVanillaSpanAllowlist } from './constants'\n\nimport type {\n  ContextAPI,\n  Span,\n  SpanOptions,\n  Tracer,\n  AttributeValue,\n  TextMapGetter,\n} from 'next/dist/compiled/@opentelemetry/api'\nimport { isThenable } from '../../../shared/lib/is-thenable'\n\nlet api: typeof import('next/dist/compiled/@opentelemetry/api')\n\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (process.env.NEXT_RUNTIME === 'edge') {\n  api = require('@opentelemetry/api')\n} else {\n  try {\n    api = require('@opentelemetry/api')\n  } catch (err) {\n    api = require('next/dist/compiled/@opentelemetry/api')\n  }\n}\n\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } =\n  api\n\nexport class BubbledError extends Error {\n  constructor(\n    public readonly bubble?: boolean,\n    public readonly result?: FetchEventResult\n  ) {\n    super()\n  }\n}\n\nexport function isBubbledError(error: unknown): error is BubbledError {\n  if (typeof error !== 'object' || error === null) return false\n  return error instanceof BubbledError\n}\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {\n    if (error) {\n      span.recordException(error)\n    }\n    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })\n  }\n  span.end()\n}\n\ntype TracerSpanOptions = Omit<SpanOptions, 'attributes'> & {\n  parentSpan?: Span\n  spanName?: string\n  attributes?: Partial<Record<AttributeNames, AttributeValue | undefined>>\n  hideSpan?: boolean\n}\n\ninterface NextTracer {\n  getContext(): ContextAPI\n\n  /**\n   * Instruments a function by automatically creating a span activated on its\n   * scope.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its second parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   *\n   */\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n\n  /**\n   * Wrap a function to automatically create a span activated on its\n   * scope when it's called.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its last parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   */\n  wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n\n  /**\n   * Starts and returns a new Span representing a logical unit of work.\n   *\n   * This method do NOT modify the current Context by default. In result, any inner span will not\n   * automatically set its parent context to the span created by this method unless manually activate\n   * context via `tracer.getContext().with`. `trace`, or `wrap` is generally recommended as it gracefully\n   * handles context activation. (ref: https://github.com/open-telemetry/opentelemetry-js/issues/1923)\n   */\n  startSpan(type: SpanTypes): Span\n  startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n\n  /**\n   * Returns currently activated span if current context is in the scope of the span.\n   * Returns undefined otherwise.\n   */\n  getActiveScopeSpan(): Span | undefined\n\n  /**\n   * Returns trace propagation data for the currently active context. The format is equal to data provided\n   * through the OpenTelemetry propagator API.\n   */\n  getTracePropagationData(): ClientTraceDataEntry[]\n}\n\ntype NextAttributeNames =\n  | 'next.route'\n  | 'next.page'\n  | 'next.rsc'\n  | 'next.segment'\n  | 'next.span_name'\n  | 'next.span_type'\n  | 'next.clientComponentLoadCount'\ntype OTELAttributeNames = `http.${string}` | `net.${string}`\ntype AttributeNames = NextAttributeNames | OTELAttributeNames\n\n/** we use this map to propagate attributes from nested spans to the top span */\nconst rootSpanAttributesStore = new Map<\n  number,\n  Map<AttributeNames, AttributeValue | undefined>\n>()\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId')\nlet lastSpanId = 0\nconst getSpanId = () => lastSpanId++\n\nexport interface ClientTraceDataEntry {\n  key: string\n  value: string\n}\n\nconst clientTraceDataSetter: TextMapSetter<ClientTraceDataEntry[]> = {\n  set(carrier, key, value) {\n    carrier.push({\n      key,\n      value,\n    })\n  },\n}\n\nclass NextTracerImpl implements NextTracer {\n  /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */\n  private getTracerInstance(): Tracer {\n    return trace.getTracer('next.js', '0.0.1')\n  }\n\n  public getContext(): ContextAPI {\n    return context\n  }\n\n  public getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeContext, entries, clientTraceDataSetter)\n    return entries\n  }\n\n  public getActiveScopeSpan(): Span | undefined {\n    return trace.getSpan(context?.active())\n  }\n\n  public withPropagatedContext<T, C>(\n    carrier: C,\n    fn: () => T,\n    getter?: TextMapGetter<C>\n  ): T {\n    const activeContext = context.active()\n    if (trace.getSpanContext(activeContext)) {\n      // Active span is already set, too late to propagate.\n      return fn()\n    }\n    const remoteContext = propagation.extract(activeContext, carrier, getter)\n    return context.with(remoteContext, fn)\n  }\n\n  // Trace, wrap implementation is inspired by datadog trace implementation\n  // (https://datadoghq.dev/dd-trace-js/interfaces/tracer.html#trace).\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(...args: Array<any>) {\n    const [type, fnOrOptions, fnOrEmpty] = args\n\n    // coerce options form overload\n    const {\n      fn,\n      options,\n    }: {\n      fn: (span?: Span, done?: (error?: Error) => any) => T | Promise<T>\n      options: TracerSpanOptions\n    } =\n      typeof fnOrOptions === 'function'\n        ? {\n            fn: fnOrOptions,\n            options: {},\n          }\n        : {\n            fn: fnOrEmpty,\n            options: { ...fnOrOptions },\n          }\n\n    const spanName = options.spanName ?? type\n\n    if (\n      (!NextVanillaSpanAllowlist.includes(type) &&\n        process.env.NEXT_OTEL_VERBOSE !== '1') ||\n      options.hideSpan\n    ) {\n      return fn()\n    }\n\n    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n    let spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    let isRootSpan = false\n\n    if (!spanContext) {\n      spanContext = context?.active() ?? ROOT_CONTEXT\n      isRootSpan = true\n    } else if (trace.getSpanContext(spanContext)?.isRemote) {\n      isRootSpan = true\n    }\n\n    const spanId = getSpanId()\n\n    options.attributes = {\n      'next.span_name': spanName,\n      'next.span_type': type,\n      ...options.attributes,\n    }\n\n    return context.with(spanContext.setValue(rootSpanIdKey, spanId), () =>\n      this.getTracerInstance().startActiveSpan(\n        spanName,\n        options,\n        (span: Span) => {\n          const startTime =\n            'performance' in globalThis && 'measure' in performance\n              ? globalThis.performance.now()\n              : undefined\n\n          const onCleanup = () => {\n            rootSpanAttributesStore.delete(spanId)\n            if (\n              startTime &&\n              process.env.NEXT_OTEL_PERFORMANCE_PREFIX &&\n              LogSpanAllowList.includes(type || ('' as any))\n            ) {\n              performance.measure(\n                `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(\n                  type.split('.').pop() || ''\n                ).replace(\n                  /[A-Z]/g,\n                  (match: string) => '-' + match.toLowerCase()\n                )}`,\n                {\n                  start: startTime,\n                  end: performance.now(),\n                }\n              )\n            }\n          }\n\n          if (isRootSpan) {\n            rootSpanAttributesStore.set(\n              spanId,\n              new Map(\n                Object.entries(options.attributes ?? {}) as [\n                  AttributeNames,\n                  AttributeValue | undefined,\n                ][]\n              )\n            )\n          }\n          try {\n            if (fn.length > 1) {\n              return fn(span, (err) => closeSpanWithError(span, err))\n            }\n\n            const result = fn(span)\n            if (isThenable(result)) {\n              // If there's error make sure it throws\n              return result\n                .then((res) => {\n                  span.end()\n                  // Need to pass down the promise result,\n                  // it could be react stream response with error { error, stream }\n                  return res\n                })\n                .catch((err) => {\n                  closeSpanWithError(span, err)\n                  throw err\n                })\n                .finally(onCleanup)\n            } else {\n              span.end()\n              onCleanup()\n            }\n\n            return result\n          } catch (err: any) {\n            closeSpanWithError(span, err)\n            onCleanup()\n            throw err\n          }\n        }\n      )\n    )\n  }\n\n  public wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap(...args: Array<any>) {\n    const tracer = this\n    const [name, options, fn] =\n      args.length === 3 ? args : [args[0], {}, args[1]]\n\n    if (\n      !NextVanillaSpanAllowlist.includes(name) &&\n      process.env.NEXT_OTEL_VERBOSE !== '1'\n    ) {\n      return fn\n    }\n\n    return function (this: any) {\n      let optionsObj = options\n      if (typeof optionsObj === 'function' && typeof fn === 'function') {\n        optionsObj = optionsObj.apply(this, arguments)\n      }\n\n      const lastArgId = arguments.length - 1\n      const cb = arguments[lastArgId]\n\n      if (typeof cb === 'function') {\n        const scopeBoundCb = tracer.getContext().bind(context.active(), cb)\n        return tracer.trace(name, optionsObj, (_span, done) => {\n          arguments[lastArgId] = function (err: any) {\n            done?.(err)\n            return scopeBoundCb.apply(this, arguments)\n          }\n\n          return fn.apply(this, arguments)\n        })\n      } else {\n        return tracer.trace(name, optionsObj, () => fn.apply(this, arguments))\n      }\n    }\n  }\n\n  public startSpan(type: SpanTypes): Span\n  public startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n  public startSpan(...args: Array<any>): Span {\n    const [type, options]: [string, TracerSpanOptions | undefined] = args as any\n\n    const spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    return this.getTracerInstance().startSpan(type, options, spanContext)\n  }\n\n  private getSpanContext(parentSpan?: Span) {\n    const spanContext = parentSpan\n      ? trace.setSpan(context.active(), parentSpan)\n      : undefined\n\n    return spanContext\n  }\n\n  public getRootSpanAttributes() {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    return rootSpanAttributesStore.get(spanId)\n  }\n\n  public setRootSpanAttribute(key: AttributeNames, value: AttributeValue) {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    const attributes = rootSpanAttributesStore.get(spanId)\n    if (attributes) {\n      attributes.set(key, value)\n    }\n  }\n}\n\nconst getTracer = (() => {\n  const tracer = new NextTracerImpl()\n\n  return () => tracer\n})()\n\nexport { getTracer, SpanStatusCode, SpanKind }\nexport type { NextTracer, Span, SpanOptions, ContextAPI, TracerSpanOptions }\n"],"names":["BubbledError","SpanKind","SpanStatusCode","getTracer","isBubbledError","api","process","env","NEXT_RUNTIME","require","err","context","propagation","trace","ROOT_CONTEXT","Error","constructor","bubble","result","error","closeSpanWithError","span","setAttribute","recordException","setStatus","code","ERROR","message","end","rootSpanAttributesStore","Map","rootSpanIdKey","createContextKey","lastSpanId","getSpanId","clientTraceDataSetter","set","carrier","key","value","push","NextTracerImpl","getTracerInstance","getContext","getTracePropagationData","activeContext","active","entries","inject","getActiveScopeSpan","getSpan","withPropagatedContext","fn","getter","getSpanContext","remoteContext","extract","with","args","type","fnOrOptions","fnOrEmpty","options","spanName","NextVanillaSpanAllowlist","includes","NEXT_OTEL_VERBOSE","hideSpan","spanContext","parentSpan","isRootSpan","isRemote","spanId","attributes","setValue","startActiveSpan","startTime","globalThis","performance","now","undefined","onCleanup","delete","NEXT_OTEL_PERFORMANCE_PREFIX","LogSpanAllowList","measure","split","pop","replace","match","toLowerCase","start","Object","length","isThenable","then","res","catch","finally","wrap","tracer","name","optionsObj","apply","arguments","lastArgId","cb","scopeBoundCb","bind","_span","done","startSpan","setSpan","getRootSpanAttributes","getValue","get","setRootSpanAttribute"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4470, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4475, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/lib/detached-promise.ts"],"sourcesContent":["/**\n * A `Promise.withResolvers` implementation that exposes the `resolve` and\n * `reject` functions on a `Promise`.\n *\n * @see https://tc39.es/proposal-promise-with-resolvers/\n */\nexport class DetachedPromise<T = any> {\n  public readonly resolve: (value: T | PromiseLike<T>) => void\n  public readonly reject: (reason: any) => void\n  public readonly promise: Promise<T>\n\n  constructor() {\n    let resolve: (value: T | PromiseLike<T>) => void\n    let reject: (reason: any) => void\n\n    // Create the promise and assign the resolvers to the object.\n    this.promise = new Promise<T>((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n\n    // We know that resolvers is defined because the Promise constructor runs\n    // synchronously.\n    this.resolve = resolve!\n    this.reject = reject!\n  }\n}\n"],"names":["DetachedPromise","constructor","resolve","reject","promise","Promise","res","rej"],"mappings":"AAAA;;;;;CAKC,GAAA;;;;+BACYA,mBAAAA;;;eAAAA;;;AAAN,MAAMA;IAKXC,aAAc;QACZ,IAAIC;QACJ,IAAIC;QAEJ,6DAA6D;QAC7D,IAAI,CAACC,OAAO,GAAG,IAAIC,QAAW,CAACC,KAAKC;YAClCL,UAAUI;YACVH,SAASI;QACX;QAEA,yEAAyE;QACzE,iBAAiB;QACjB,IAAI,CAACL,OAAO,GAAGA;QACf,IAAI,CAACC,MAAM,GAAGA;IAChB;AACF","ignoreList":[0]}},
    {"offset": {"line": 4505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4510, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/lib/scheduler.ts"],"sourcesContent":["export type ScheduledFn<T = void> = () => T | PromiseLike<T>\nexport type SchedulerFn<T = void> = (cb: ScheduledFn<T>) => void\n\n/**\n * Schedules a function to be called on the next tick after the other promises\n * have been resolved.\n *\n * @param cb the function to schedule\n */\nexport const scheduleOnNextTick = <T = void>(cb: ScheduledFn<T>): void => {\n  // We use Promise.resolve().then() here so that the operation is scheduled at\n  // the end of the promise job queue, we then add it to the next process tick\n  // to ensure it's evaluated afterwards.\n  //\n  // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255\n  //\n  Promise.resolve().then(() => {\n    if (process.env.NEXT_RUNTIME === 'edge') {\n      setTimeout(cb, 0)\n    } else {\n      process.nextTick(cb)\n    }\n  })\n}\n\n/**\n * Schedules a function to be called using `setImmediate` or `setTimeout` if\n * `setImmediate` is not available (like in the Edge runtime).\n *\n * @param cb the function to schedule\n */\nexport const scheduleImmediate = <T = void>(cb: ScheduledFn<T>): void => {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    setTimeout(cb, 0)\n  } else {\n    setImmediate(cb)\n  }\n}\n\n/**\n * returns a promise than resolves in a future task. There is no guarantee that the task it resolves in\n * will be the next task but if you await it you can at least be sure that the current task is over and\n * most usefully that the entire microtask queue of the current task has been emptied.\n */\nexport function atLeastOneTask() {\n  return new Promise<void>((resolve) => scheduleImmediate(resolve))\n}\n\n/**\n * This utility function is extracted to make it easier to find places where we are doing\n * specific timing tricks to try to schedule work after React has rendered. This is especially\n * important at the moment because Next.js uses the edge builds of React which use setTimeout to\n * schedule work when you might expect that something like setImmediate would do the trick.\n *\n * Long term we should switch to the node versions of React rendering when possible and then\n * update this to use setImmediate rather than setTimeout\n */\nexport function waitAtLeastOneReactRenderTask(): Promise<void> {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    return new Promise((r) => setTimeout(r, 0))\n  } else {\n    return new Promise((r) => setImmediate(r))\n  }\n}\n"],"names":["atLeastOneTask","scheduleImmediate","scheduleOnNextTick","waitAtLeastOneReactRenderTask","cb","Promise","resolve","then","process","env","NEXT_RUNTIME","setTimeout","nextTick","setImmediate","r"],"mappings":";;;;;;;;;;;;;;;;;IA4CgBA,cAAc,EAAA;eAAdA;;IAbHC,iBAAiB,EAAA;eAAjBA;;IAtBAC,kBAAkB,EAAA;eAAlBA;;IAgDGC,6BAA6B,EAAA;eAA7BA;;;AAhDT,MAAMD,qBAAqB,CAAWE;IAC3C,6EAA6E;IAC7E,4EAA4E;IAC5E,uCAAuC;IACvC,EAAE;IACF,kLAAkL;IAClL,EAAE;IACFC,QAAQC,OAAO,GAAGC,IAAI,CAAC;QACrB,IAAIC,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;QAEzC,OAAO;YACLF,QAAQI,QAAQ,CAACR;QACnB;IACF;AACF;AAQO,MAAMH,oBAAoB,CAAWG;IAC1C,IAAII,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;IAEzC,OAAO;QACLG,aAAaT;IACf;AACF;AAOO,SAASJ;IACd,OAAO,IAAIK,QAAc,CAACC,UAAYL,kBAAkBK;AAC1D;AAWO,SAASH;IACd,IAAIK,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;IAEzC,OAAO;QACL,OAAO,IAAIL,QAAQ,CAACS,IAAMD,aAAaC;IACzC;AACF","ignoreList":[0]}},
    {"offset": {"line": 4572, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4577, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/stream-utils/encodedTags.ts"],"sourcesContent":["export const ENCODED_TAGS = {\n  // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`\n  OPENING: {\n    // <html\n    HTML: new Uint8Array([60, 104, 116, 109, 108]),\n    // <body\n    BODY: new Uint8Array([60, 98, 111, 100, 121]),\n  },\n  CLOSED: {\n    // </head>\n    HEAD: new Uint8Array([60, 47, 104, 101, 97, 100, 62]),\n    // </body>\n    BODY: new Uint8Array([60, 47, 98, 111, 100, 121, 62]),\n    // </html>\n    HTML: new Uint8Array([60, 47, 104, 116, 109, 108, 62]),\n    // </body></html>\n    BODY_AND_HTML: new Uint8Array([\n      60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62,\n    ]),\n  },\n} as const\n"],"names":["ENCODED_TAGS","OPENING","HTML","Uint8Array","BODY","CLOSED","HEAD","BODY_AND_HTML"],"mappings":";;;;+BAAaA,gBAAAA;;;eAAAA;;;AAAN,MAAMA,eAAe;IAC1B,iHAAiH;IACjHC,SAAS;QACP,QAAQ;QACRC,MAAM,IAAIC,WAAW;YAAC;YAAI;YAAK;YAAK;YAAK;SAAI;QAC7C,QAAQ;QACRC,MAAM,IAAID,WAAW;YAAC;YAAI;YAAI;YAAK;YAAK;SAAI;IAC9C;IACAE,QAAQ;QACN,UAAU;QACVC,MAAM,IAAIH,WAAW;YAAC;YAAI;YAAI;YAAK;YAAK;YAAI;YAAK;SAAG;QACpD,UAAU;QACVC,MAAM,IAAID,WAAW;YAAC;YAAI;YAAI;YAAI;YAAK;YAAK;YAAK;SAAG;QACpD,UAAU;QACVD,MAAM,IAAIC,WAAW;YAAC;YAAI;YAAI;YAAK;YAAK;YAAK;YAAK;SAAG;QACrD,iBAAiB;QACjBI,eAAe,IAAIJ,WAAW;YAC5B;YAAI;YAAI;YAAI;YAAK;YAAK;YAAK;YAAI;YAAI;YAAI;YAAK;YAAK;YAAK;YAAK;SAC5D;IACH;AACF","ignoreList":[0]}},
    {"offset": {"line": 4657, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4662, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/stream-utils/uint8array-helpers.ts"],"sourcesContent":["/**\n * Find the starting index of Uint8Array `b` within Uint8Array `a`.\n */\nexport function indexOfUint8Array(a: Uint8Array, b: Uint8Array) {\n  if (b.length === 0) return 0\n  if (a.length === 0 || b.length > a.length) return -1\n\n  // start iterating through `a`\n  for (let i = 0; i <= a.length - b.length; i++) {\n    let completeMatch = true\n    // from index `i`, iterate through `b` and check for mismatch\n    for (let j = 0; j < b.length; j++) {\n      // if the values do not match, then this isn't a complete match, exit `b` iteration early and iterate to next index of `a`.\n      if (a[i + j] !== b[j]) {\n        completeMatch = false\n        break\n      }\n    }\n\n    if (completeMatch) {\n      return i\n    }\n  }\n\n  return -1\n}\n\n/**\n * Check if two Uint8Arrays are strictly equivalent.\n */\nexport function isEquivalentUint8Arrays(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\n/**\n * Remove Uint8Array `b` from Uint8Array `a`.\n *\n * If `b` is not in `a`, `a` is returned unchanged.\n *\n * Otherwise, the function returns a new Uint8Array instance with size `a.length - b.length`\n */\nexport function removeFromUint8Array(a: Uint8Array, b: Uint8Array) {\n  const tagIndex = indexOfUint8Array(a, b)\n  if (tagIndex === 0) return a.subarray(b.length)\n  if (tagIndex > -1) {\n    const removed = new Uint8Array(a.length - b.length)\n    removed.set(a.slice(0, tagIndex))\n    removed.set(a.slice(tagIndex + b.length), tagIndex)\n    return removed\n  } else {\n    return a\n  }\n}\n"],"names":["indexOfUint8Array","isEquivalentUint8Arrays","removeFromUint8Array","a","b","length","i","completeMatch","j","tagIndex","subarray","removed","Uint8Array","set","slice"],"mappings":"AAAA;;CAEC,GAAA;;;;;;;;;;;;;;;;IACeA,iBAAiB,EAAA;eAAjBA;;IA2BAC,uBAAuB,EAAA;eAAvBA;;IAiBAC,oBAAoB,EAAA;eAApBA;;;AA5CT,SAASF,kBAAkBG,CAAa,EAAEC,CAAa;IAC5D,IAAIA,EAAEC,MAAM,KAAK,GAAG,OAAO;IAC3B,IAAIF,EAAEE,MAAM,KAAK,KAAKD,EAAEC,MAAM,GAAGF,EAAEE,MAAM,EAAE,OAAO,CAAC;IAEnD,8BAA8B;IAC9B,IAAK,IAAIC,IAAI,GAAGA,KAAKH,EAAEE,MAAM,GAAGD,EAAEC,MAAM,EAAEC,IAAK;QAC7C,IAAIC,gBAAgB;QACpB,6DAA6D;QAC7D,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,EAAEC,MAAM,EAAEG,IAAK;YACjC,2HAA2H;YAC3H,IAAIL,CAAC,CAACG,IAAIE,EAAE,KAAKJ,CAAC,CAACI,EAAE,EAAE;gBACrBD,gBAAgB;gBAChB;YACF;QACF;QAEA,IAAIA,eAAe;YACjB,OAAOD;QACT;IACF;IAEA,OAAO,CAAC;AACV;AAKO,SAASL,wBAAwBE,CAAa,EAAEC,CAAa;IAClE,IAAID,EAAEE,MAAM,KAAKD,EAAEC,MAAM,EAAE,OAAO;IAElC,IAAK,IAAIC,IAAI,GAAGA,IAAIH,EAAEE,MAAM,EAAEC,IAAK;QACjC,IAAIH,CAAC,CAACG,EAAE,KAAKF,CAAC,CAACE,EAAE,EAAE,OAAO;IAC5B;IAEA,OAAO;AACT;AASO,SAASJ,qBAAqBC,CAAa,EAAEC,CAAa;IAC/D,MAAMK,WAAWT,kBAAkBG,GAAGC;IACtC,IAAIK,aAAa,GAAG,OAAON,EAAEO,QAAQ,CAACN,EAAEC,MAAM;IAC9C,IAAII,WAAW,CAAC,GAAG;QACjB,MAAME,UAAU,IAAIC,WAAWT,EAAEE,MAAM,GAAGD,EAAEC,MAAM;QAClDM,QAAQE,GAAG,CAACV,EAAEW,KAAK,CAAC,GAAGL;QACvBE,QAAQE,GAAG,CAACV,EAAEW,KAAK,CAACL,WAAWL,EAAEC,MAAM,GAAGI;QAC1C,OAAOE;IACT,OAAO;QACL,OAAOR;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 4729, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4734, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/stream-utils/node-web-streams-helper.ts"],"sourcesContent":["import { getTracer } from '../lib/trace/tracer'\nimport { AppRenderSpan } from '../lib/trace/constants'\nimport { DetachedPromise } from '../../lib/detached-promise'\nimport { scheduleImmediate, atLeastOneTask } from '../../lib/scheduler'\nimport { ENCODED_TAGS } from './encodedTags'\nimport {\n  indexOfUint8Array,\n  isEquivalentUint8Arrays,\n  removeFromUint8Array,\n} from './uint8array-helpers'\n\nfunction voidCatch() {\n  // this catcher is designed to be used with pipeTo where we expect the underlying\n  // pipe implementation to forward errors but we don't want the pipeTo promise to reject\n  // and be unhandled\n}\n\nexport type ReactReadableStream = ReadableStream<Uint8Array> & {\n  allReady?: Promise<void> | undefined\n}\n\n// We can share the same encoder instance everywhere\n// Notably we cannot do the same for TextDecoder because it is stateful\n// when handling streaming data\nconst encoder = new TextEncoder()\n\nexport function chainStreams<T>(\n  ...streams: ReadableStream<T>[]\n): ReadableStream<T> {\n  // We could encode this invariant in the arguments but current uses of this function pass\n  // use spread so it would be missed by\n  if (streams.length === 0) {\n    throw new Error('Invariant: chainStreams requires at least one stream')\n  }\n\n  // If we only have 1 stream we fast path it by returning just this stream\n  if (streams.length === 1) {\n    return streams[0]\n  }\n\n  const { readable, writable } = new TransformStream()\n\n  // We always initiate pipeTo immediately. We know we have at least 2 streams\n  // so we need to avoid closing the writable when this one finishes.\n  let promise = streams[0].pipeTo(writable, { preventClose: true })\n\n  let i = 1\n  for (; i < streams.length - 1; i++) {\n    const nextStream = streams[i]\n    promise = promise.then(() =>\n      nextStream.pipeTo(writable, { preventClose: true })\n    )\n  }\n\n  // We can omit the length check because we halted before the last stream and there\n  // is at least two streams so the lastStream here will always be defined\n  const lastStream = streams[i]\n  promise = promise.then(() => lastStream.pipeTo(writable))\n\n  // Catch any errors from the streams and ignore them, they will be handled\n  // by whatever is consuming the readable stream.\n  promise.catch(voidCatch)\n\n  return readable\n}\n\nexport function streamFromString(str: string): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(encoder.encode(str))\n      controller.close()\n    },\n  })\n}\n\nexport function streamFromBuffer(chunk: Buffer): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(chunk)\n      controller.close()\n    },\n  })\n}\n\nexport async function streamToBuffer(\n  stream: ReadableStream<Uint8Array>\n): Promise<Buffer> {\n  const reader = stream.getReader()\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) {\n      break\n    }\n\n    chunks.push(value)\n  }\n\n  return Buffer.concat(chunks)\n}\n\nexport async function streamToString(\n  stream: ReadableStream<Uint8Array>\n): Promise<string> {\n  const decoder = new TextDecoder('utf-8', { fatal: true })\n  let string = ''\n\n  for await (const chunk of stream) {\n    string += decoder.decode(chunk, { stream: true })\n  }\n\n  string += decoder.decode()\n\n  return string\n}\n\nexport function createBufferedTransformStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let bufferedChunks: Array<Uint8Array> = []\n  let bufferByteLength: number = 0\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    // If we already have a pending flush, then return early.\n    if (pending) return\n\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        const chunk = new Uint8Array(bufferByteLength)\n        let copiedBytes = 0\n\n        for (let i = 0; i < bufferedChunks.length; i++) {\n          const bufferedChunk = bufferedChunks[i]\n          chunk.set(bufferedChunk, copiedBytes)\n          copiedBytes += bufferedChunk.byteLength\n        }\n        // We just wrote all the buffered chunks so we need to reset the bufferedChunks array\n        // and our bufferByteLength to prepare for the next round of buffered chunks\n        bufferedChunks.length = 0\n        bufferByteLength = 0\n        controller.enqueue(chunk)\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      // Combine the previous buffer with the new chunk.\n      bufferedChunks.push(chunk)\n      bufferByteLength += chunk.byteLength\n\n      // Flush the buffer to the controller.\n      flush(controller)\n    },\n    flush() {\n      if (!pending) return\n\n      return pending.promise\n    },\n  })\n}\n\nfunction createInsertedHTMLStream(\n  getServerInsertedHTML: () => Promise<string>\n): TransformStream<Uint8Array, Uint8Array> {\n  return new TransformStream({\n    transform: async (chunk, controller) => {\n      const html = await getServerInsertedHTML()\n      if (html) {\n        controller.enqueue(encoder.encode(html))\n      }\n\n      controller.enqueue(chunk)\n    },\n  })\n}\n\nexport function renderToInitialFizzStream({\n  ReactDOMServer,\n  element,\n  streamOptions,\n}: {\n  ReactDOMServer: typeof import('react-dom/server.edge')\n  element: React.ReactElement\n  streamOptions?: Parameters<typeof ReactDOMServer.renderToReadableStream>[1]\n}): Promise<ReactReadableStream> {\n  return getTracer().trace(AppRenderSpan.renderToReadableStream, async () =>\n    ReactDOMServer.renderToReadableStream(element, streamOptions)\n  )\n}\n\nfunction createHeadInsertionTransformStream(\n  insert: () => Promise<string>\n): TransformStream<Uint8Array, Uint8Array> {\n  let inserted = false\n  let freezing = false\n\n  // We need to track if this transform saw any bytes because if it didn't\n  // we won't want to insert any server HTML at all\n  let hasBytes = false\n\n  return new TransformStream({\n    async transform(chunk, controller) {\n      hasBytes = true\n      // While react is flushing chunks, we don't apply insertions\n      if (freezing) {\n        controller.enqueue(chunk)\n        return\n      }\n\n      const insertion = await insert()\n\n      if (inserted) {\n        if (insertion) {\n          const encodedInsertion = encoder.encode(insertion)\n          controller.enqueue(encodedInsertion)\n        }\n        controller.enqueue(chunk)\n        freezing = true\n      } else {\n        // TODO (@Ethan-Arrowood): Replace the generic `indexOfUint8Array` method with something finely tuned for the subset of things actually being checked for.\n        const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.HEAD)\n        if (index !== -1) {\n          if (insertion) {\n            const encodedInsertion = encoder.encode(insertion)\n            const insertedHeadContent = new Uint8Array(\n              chunk.length + encodedInsertion.length\n            )\n            insertedHeadContent.set(chunk.slice(0, index))\n            insertedHeadContent.set(encodedInsertion, index)\n            insertedHeadContent.set(\n              chunk.slice(index),\n              index + encodedInsertion.length\n            )\n            controller.enqueue(insertedHeadContent)\n          } else {\n            controller.enqueue(chunk)\n          }\n          freezing = true\n          inserted = true\n        }\n      }\n\n      if (!inserted) {\n        controller.enqueue(chunk)\n      } else {\n        scheduleImmediate(() => {\n          freezing = false\n        })\n      }\n    },\n    async flush(controller) {\n      // Check before closing if there's anything remaining to insert.\n      if (hasBytes) {\n        const insertion = await insert()\n        if (insertion) {\n          controller.enqueue(encoder.encode(insertion))\n        }\n      }\n    },\n  })\n}\n\n// Suffix after main body content - scripts before </body>,\n// but wait for the major chunks to be enqueued.\nfunction createDeferredSuffixStream(\n  suffix: string\n): TransformStream<Uint8Array, Uint8Array> {\n  let flushed = false\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        controller.enqueue(encoder.encode(suffix))\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // If we've already flushed, we're done.\n      if (flushed) return\n\n      // Schedule the flush to happen.\n      flushed = true\n      flush(controller)\n    },\n    flush(controller) {\n      if (pending) return pending.promise\n      if (flushed) return\n\n      // Flush now.\n      controller.enqueue(encoder.encode(suffix))\n    },\n  })\n}\n\n// Merge two streams into one. Ensure the final transform stream is closed\n// when both are finished.\nfunction createMergedTransformStream(\n  stream: ReadableStream<Uint8Array>\n): TransformStream<Uint8Array, Uint8Array> {\n  let pull: Promise<void> | null = null\n  let donePulling = false\n\n  async function startPulling(controller: TransformStreamDefaultController) {\n    if (pull) {\n      return\n    }\n\n    const reader = stream.getReader()\n\n    // NOTE: streaming flush\n    // We are buffering here for the inlined data stream because the\n    // \"shell\" stream might be chunkenized again by the underlying stream\n    // implementation, e.g. with a specific high-water mark. To ensure it's\n    // the safe timing to pipe the data stream, this extra tick is\n    // necessary.\n\n    // We don't start reading until we've left the current Task to ensure\n    // that it's inserted after flushing the shell. Note that this implementation\n    // might get stale if impl details of Fizz change in the future.\n    await atLeastOneTask()\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (done) {\n          donePulling = true\n          return\n        }\n\n        controller.enqueue(value)\n      }\n    } catch (err) {\n      controller.error(err)\n    }\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // Start the streaming if it hasn't already been started yet.\n      if (!pull) {\n        pull = startPulling(controller)\n      }\n    },\n    flush(controller) {\n      if (donePulling) {\n        return\n      }\n      return pull || startPulling(controller)\n    },\n  })\n}\n\nconst CLOSE_TAG = '</body></html>'\n\n/**\n * This transform stream moves the suffix to the end of the stream, so results\n * like `</body></html><script>...</script>` will be transformed to\n * `<script>...</script></body></html>`.\n */\nfunction createMoveSuffixStream(): TransformStream<Uint8Array, Uint8Array> {\n  let foundSuffix = false\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (foundSuffix) {\n        return controller.enqueue(chunk)\n      }\n\n      const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n      if (index > -1) {\n        foundSuffix = true\n\n        // If the whole chunk is the suffix, then don't write anything, it will\n        // be written in the flush.\n        if (chunk.length === ENCODED_TAGS.CLOSED.BODY_AND_HTML.length) {\n          return\n        }\n\n        // Write out the part before the suffix.\n        const before = chunk.slice(0, index)\n        controller.enqueue(before)\n\n        // In the case where the suffix is in the middle of the chunk, we need\n        // to split the chunk into two parts.\n        if (chunk.length > ENCODED_TAGS.CLOSED.BODY_AND_HTML.length + index) {\n          // Write out the part after the suffix.\n          const after = chunk.slice(\n            index + ENCODED_TAGS.CLOSED.BODY_AND_HTML.length\n          )\n          controller.enqueue(after)\n        }\n      } else {\n        controller.enqueue(chunk)\n      }\n    },\n    flush(controller) {\n      // Even if we didn't find the suffix, the HTML is not valid if we don't\n      // add it, so insert it at the end.\n      controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n    },\n  })\n}\n\nfunction createStripDocumentClosingTagsTransform(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  return new TransformStream({\n    transform(chunk, controller) {\n      // We rely on the assumption that chunks will never break across a code unit.\n      // This is reasonable because we currently concat all of React's output from a single\n      // flush into one chunk before streaming it forward which means the chunk will represent\n      // a single coherent utf-8 string. This is not safe to use if we change our streaming to no\n      // longer do this large buffered chunk\n      if (\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.HTML)\n      ) {\n        // the entire chunk is the closing tags; return without enqueueing anything.\n        return\n      }\n\n      // We assume these tags will go at together at the end of the document and that\n      // they won't appear anywhere else in the document. This is not really a safe assumption\n      // but until we revamp our streaming infra this is a performant way to string the tags\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY)\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.HTML)\n\n      controller.enqueue(chunk)\n    },\n  })\n}\n\n/*\n * Checks if the root layout is missing the html or body tags\n * and if so, it will inject a script tag to throw an error in the browser, showing the user\n * the error message in the error overlay.\n */\nexport function createRootLayoutValidatorStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let foundHtml = false\n  let foundBody = false\n  return new TransformStream({\n    async transform(chunk, controller) {\n      // Peek into the streamed chunk to see if the tags are present.\n      if (\n        !foundHtml &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.HTML) > -1\n      ) {\n        foundHtml = true\n      }\n\n      if (\n        !foundBody &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.BODY) > -1\n      ) {\n        foundBody = true\n      }\n\n      controller.enqueue(chunk)\n    },\n    flush(controller) {\n      const missingTags: typeof window.__next_root_layout_missing_tags = []\n      if (!foundHtml) missingTags.push('html')\n      if (!foundBody) missingTags.push('body')\n\n      if (!missingTags.length) return\n\n      controller.enqueue(\n        encoder.encode(\n          `<script>self.__next_root_layout_missing_tags=${JSON.stringify(\n            missingTags\n          )}</script>`\n        )\n      )\n    },\n  })\n}\n\nfunction chainTransformers<T>(\n  readable: ReadableStream<T>,\n  transformers: ReadonlyArray<TransformStream<T, T> | null>\n): ReadableStream<T> {\n  let stream = readable\n  for (const transformer of transformers) {\n    if (!transformer) continue\n\n    stream = stream.pipeThrough(transformer)\n  }\n  return stream\n}\n\nexport type ContinueStreamOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array> | undefined\n  isStaticGeneration: boolean\n  getServerInsertedHTML: (() => Promise<string>) | undefined\n  serverInsertedHTMLToHead: boolean\n  validateRootLayout?: boolean\n  /**\n   * Suffix to inject after the buffered data, but before the close tags.\n   */\n  suffix?: string | undefined\n}\n\nexport async function continueFizzStream(\n  renderStream: ReactReadableStream,\n  {\n    suffix,\n    inlinedDataStream,\n    isStaticGeneration,\n    getServerInsertedHTML,\n    serverInsertedHTMLToHead,\n    validateRootLayout,\n  }: ContinueStreamOptions\n): Promise<ReadableStream<Uint8Array>> {\n  // Suffix itself might contain close tags at the end, so we need to split it.\n  const suffixUnclosed = suffix ? suffix.split(CLOSE_TAG, 1)[0] : null\n\n  // If we're generating static HTML and there's an `allReady` promise on the\n  // stream, we need to wait for it to resolve before continuing.\n  if (isStaticGeneration && 'allReady' in renderStream) {\n    await renderStream.allReady\n  }\n\n  return chainTransformers(renderStream, [\n    // Buffer everything to avoid flushing too frequently\n    createBufferedTransformStream(),\n\n    // Insert generated tags to head\n    getServerInsertedHTML && !serverInsertedHTMLToHead\n      ? createInsertedHTMLStream(getServerInsertedHTML)\n      : null,\n\n    // Insert suffix content\n    suffixUnclosed != null && suffixUnclosed.length > 0\n      ? createDeferredSuffixStream(suffixUnclosed)\n      : null,\n\n    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n    inlinedDataStream ? createMergedTransformStream(inlinedDataStream) : null,\n\n    // Validate the root layout for missing html or body tags\n    validateRootLayout ? createRootLayoutValidatorStream() : null,\n\n    // Close tags should always be deferred to the end\n    createMoveSuffixStream(),\n\n    // Special head insertions\n    // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid\n    // hydration errors. Remove this once it's ready to be handled by react itself.\n    getServerInsertedHTML && serverInsertedHTMLToHead\n      ? createHeadInsertionTransformStream(getServerInsertedHTML)\n      : null,\n  ])\n}\n\ntype ContinueDynamicPrerenderOptions = {\n  getServerInsertedHTML: () => Promise<string>\n}\n\nexport async function continueDynamicPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  { getServerInsertedHTML }: ContinueDynamicPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      .pipeThrough(createStripDocumentClosingTagsTransform())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n  )\n}\n\ntype ContinueStaticPrerenderOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n}\n\nexport async function continueStaticPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  { inlinedDataStream, getServerInsertedHTML }: ContinueStaticPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(createMergedTransformStream(inlinedDataStream))\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\ntype ContinueResumeOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n}\n\nexport async function continueDynamicHTMLResume(\n  renderStream: ReadableStream<Uint8Array>,\n  { inlinedDataStream, getServerInsertedHTML }: ContinueResumeOptions\n) {\n  return (\n    renderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(createMergedTransformStream(inlinedDataStream))\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\nexport function createDocumentClosingStream(): ReadableStream<Uint8Array> {\n  return streamFromString(CLOSE_TAG)\n}\n"],"names":["chainStreams","continueDynamicHTMLResume","continueDynamicPrerender","continueFizzStream","continueStaticPrerender","createBufferedTransformStream","createDocumentClosingStream","createRootLayoutValidatorStream","renderToInitialFizzStream","streamFromBuffer","streamFromString","streamToBuffer","streamToString","voidCatch","encoder","TextEncoder","streams","length","Error","readable","writable","TransformStream","promise","pipeTo","preventClose","i","nextStream","then","lastStream","catch","str","ReadableStream","start","controller","enqueue","encode","close","chunk","stream","reader","getReader","chunks","done","value","read","push","Buffer","concat","decoder","TextDecoder","fatal","string","decode","bufferedChunks","bufferByteLength","pending","flush","detached","DetachedPromise","scheduleImmediate","Uint8Array","copiedBytes","bufferedChunk","set","byteLength","undefined","resolve","transform","createInsertedHTMLStream","getServerInsertedHTML","html","ReactDOMServer","element","streamOptions","getTracer","trace","AppRenderSpan","renderToReadableStream","createHeadInsertionTransformStream","insert","inserted","freezing","hasBytes","insertion","encodedInsertion","index","indexOfUint8Array","ENCODED_TAGS","CLOSED","HEAD","insertedHeadContent","slice","createDeferredSuffixStream","suffix","flushed","createMergedTransformStream","pull","donePulling","startPulling","atLeastOneTask","err","error","CLOSE_TAG","createMoveSuffixStream","foundSuffix","BODY_AND_HTML","before","after","createStripDocumentClosingTagsTransform","isEquivalentUint8Arrays","BODY","HTML","removeFromUint8Array","foundHtml","foundBody","OPENING","missingTags","JSON","stringify","chainTransformers","transformers","transformer","pipeThrough","renderStream","inlinedDataStream","isStaticGeneration","serverInsertedHTMLToHead","validateRootLayout","suffixUnclosed","split","allReady","prerenderStream"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IA0BgBA,YAAY,EAAA;eAAZA;;IAimBMC,yBAAyB,EAAA;eAAzBA;;IAzCAC,wBAAwB,EAAA;eAAxBA;;IAxDAC,kBAAkB,EAAA;eAAlBA;;IA2EAC,uBAAuB,EAAA;eAAvBA;;IAhfNC,6BAA6B,EAAA;eAA7BA;;IAuhBAC,2BAA2B,EAAA;eAA3BA;;IAtLAC,+BAA+B,EAAA;eAA/BA;;IAxRAC,yBAAyB,EAAA;eAAzBA;;IAnHAC,gBAAgB,EAAA;eAAhBA;;IATAC,gBAAgB,EAAA;eAAhBA;;IAkBMC,cAAc,EAAA;eAAdA;;IAkBAC,cAAc,EAAA;eAAdA;;;wBAtGI;2BACI;iCACE;2BACkB;6BACrB;mCAKtB;AAEP,SAASC;AACP,iFAAiF;AACjF,uFAAuF;AACvF,mBAAmB;AACrB;AAMA,oDAAoD;AACpD,uEAAuE;AACvE,+BAA+B;AAC/B,MAAMC,UAAU,IAAIC;AAEb,SAASf,aACd,GAAGgB,OAA4B;IAE/B,yFAAyF;IACzF,sCAAsC;IACtC,IAAIA,QAAQC,MAAM,KAAK,GAAG;QACxB,MAAM,IAAIC,MAAM;IAClB;IAEA,yEAAyE;IACzE,IAAIF,QAAQC,MAAM,KAAK,GAAG;QACxB,OAAOD,OAAO,CAAC,EAAE;IACnB;IAEA,MAAM,EAAEG,QAAQ,EAAEC,QAAQ,EAAE,GAAG,IAAIC;IAEnC,4EAA4E;IAC5E,mEAAmE;IACnE,IAAIC,UAAUN,OAAO,CAAC,EAAE,CAACO,MAAM,CAACH,UAAU;QAAEI,cAAc;IAAK;IAE/D,IAAIC,IAAI;IACR,MAAOA,IAAIT,QAAQC,MAAM,GAAG,GAAGQ,IAAK;QAClC,MAAMC,aAAaV,OAAO,CAACS,EAAE;QAC7BH,UAAUA,QAAQK,IAAI,CAAC,IACrBD,WAAWH,MAAM,CAACH,UAAU;gBAAEI,cAAc;YAAK;IAErD;IAEA,kFAAkF;IAClF,wEAAwE;IACxE,MAAMI,aAAaZ,OAAO,CAACS,EAAE;IAC7BH,UAAUA,QAAQK,IAAI,CAAC,IAAMC,WAAWL,MAAM,CAACH;IAE/C,0EAA0E;IAC1E,gDAAgD;IAChDE,QAAQO,KAAK,CAAChB;IAEd,OAAOM;AACT;AAEO,SAAST,iBAAiBoB,GAAW;IAC1C,OAAO,IAAIC,eAAe;QACxBC,OAAMC,UAAU;YACdA,WAAWC,OAAO,CAACpB,QAAQqB,MAAM,CAACL;YAClCG,WAAWG,KAAK;QAClB;IACF;AACF;AAEO,SAAS3B,iBAAiB4B,KAAa;IAC5C,OAAO,IAAIN,eAAe;QACxBC,OAAMC,UAAU;YACdA,WAAWC,OAAO,CAACG;YACnBJ,WAAWG,KAAK;QAClB;IACF;AACF;AAEO,eAAezB,eACpB2B,MAAkC;IAElC,MAAMC,SAASD,OAAOE,SAAS;IAC/B,MAAMC,SAAuB,EAAE;IAE/B,MAAO,KAAM;QACX,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMJ,OAAOK,IAAI;QACzC,IAAIF,MAAM;YACR;QACF;QAEAD,OAAOI,IAAI,CAACF;IACd;IAEA,OAAOG,OAAOC,MAAM,CAACN;AACvB;AAEO,eAAe7B,eACpB0B,MAAkC;IAElC,MAAMU,UAAU,IAAIC,YAAY,SAAS;QAAEC,OAAO;IAAK;IACvD,IAAIC,SAAS;IAEb,WAAW,MAAMd,SAASC,OAAQ;QAChCa,UAAUH,QAAQI,MAAM,CAACf,OAAO;YAAEC,QAAQ;QAAK;IACjD;IAEAa,UAAUH,QAAQI,MAAM;IAExB,OAAOD;AACT;AAEO,SAAS9C;IAId,IAAIgD,iBAAoC,EAAE;IAC1C,IAAIC,mBAA2B;IAC/B,IAAIC;IAEJ,MAAMC,QAAQ,CAACvB;QACb,yDAAyD;QACzD,IAAIsB,SAAS;QAEb,MAAME,WAAW,IAAIC,iBAAAA,eAAe;QACpCH,UAAUE;QAEVE,CAAAA,GAAAA,WAAAA,iBAAiB,EAAC;YAChB,IAAI;gBACF,MAAMtB,QAAQ,IAAIuB,WAAWN;gBAC7B,IAAIO,cAAc;gBAElB,IAAK,IAAIpC,IAAI,GAAGA,IAAI4B,eAAepC,MAAM,EAAEQ,IAAK;oBAC9C,MAAMqC,gBAAgBT,cAAc,CAAC5B,EAAE;oBACvCY,MAAM0B,GAAG,CAACD,eAAeD;oBACzBA,eAAeC,cAAcE,UAAU;gBACzC;gBACA,qFAAqF;gBACrF,4EAA4E;gBAC5EX,eAAepC,MAAM,GAAG;gBACxBqC,mBAAmB;gBACnBrB,WAAWC,OAAO,CAACG;YACrB,EAAE,OAAM;YACN,6DAA6D;YAC7D,8DAA8D;YAC9D,6CAA6C;YAC/C,SAAU;gBACRkB,UAAUU;gBACVR,SAASS,OAAO;YAClB;QACF;IACF;IAEA,OAAO,IAAI7C,gBAAgB;QACzB8C,WAAU9B,KAAK,EAAEJ,UAAU;YACzB,kDAAkD;YAClDoB,eAAeR,IAAI,CAACR;YACpBiB,oBAAoBjB,MAAM2B,UAAU;YAEpC,sCAAsC;YACtCR,MAAMvB;QACR;QACAuB;YACE,IAAI,CAACD,SAAS;YAEd,OAAOA,QAAQjC,OAAO;QACxB;IACF;AACF;AAEA,SAAS8C,yBACPC,qBAA4C;IAE5C,OAAO,IAAIhD,gBAAgB;QACzB8C,WAAW,OAAO9B,OAAOJ;YACvB,MAAMqC,OAAO,MAAMD;YACnB,IAAIC,MAAM;gBACRrC,WAAWC,OAAO,CAACpB,QAAQqB,MAAM,CAACmC;YACpC;YAEArC,WAAWC,OAAO,CAACG;QACrB;IACF;AACF;AAEO,SAAS7B,0BAA0B,EACxC+D,cAAc,EACdC,OAAO,EACPC,aAAa,EAKd;IACC,OAAOC,CAAAA,GAAAA,QAAAA,SAAS,IAAGC,KAAK,CAACC,WAAAA,aAAa,CAACC,sBAAsB,EAAE,UAC7DN,eAAeM,sBAAsB,CAACL,SAASC;AAEnD;AAEA,SAASK,mCACPC,MAA6B;IAE7B,IAAIC,WAAW;IACf,IAAIC,WAAW;IAEf,wEAAwE;IACxE,iDAAiD;IACjD,IAAIC,WAAW;IAEf,OAAO,IAAI7D,gBAAgB;QACzB,MAAM8C,WAAU9B,KAAK,EAAEJ,UAAU;YAC/BiD,WAAW;YACX,4DAA4D;YAC5D,IAAID,UAAU;gBACZhD,WAAWC,OAAO,CAACG;gBACnB;YACF;YAEA,MAAM8C,YAAY,MAAMJ;YAExB,IAAIC,UAAU;gBACZ,IAAIG,WAAW;oBACb,MAAMC,mBAAmBtE,QAAQqB,MAAM,CAACgD;oBACxClD,WAAWC,OAAO,CAACkD;gBACrB;gBACAnD,WAAWC,OAAO,CAACG;gBACnB4C,WAAW;YACb,OAAO;gBACL,0JAA0J;gBAC1J,MAAMI,QAAQC,CAAAA,GAAAA,mBAAAA,iBAAiB,EAACjD,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACC,IAAI;gBAC/D,IAAIJ,UAAU,CAAC,GAAG;oBAChB,IAAIF,WAAW;wBACb,MAAMC,mBAAmBtE,QAAQqB,MAAM,CAACgD;wBACxC,MAAMO,sBAAsB,IAAI9B,WAC9BvB,MAAMpB,MAAM,GAAGmE,iBAAiBnE,MAAM;wBAExCyE,oBAAoB3B,GAAG,CAAC1B,MAAMsD,KAAK,CAAC,GAAGN;wBACvCK,oBAAoB3B,GAAG,CAACqB,kBAAkBC;wBAC1CK,oBAAoB3B,GAAG,CACrB1B,MAAMsD,KAAK,CAACN,QACZA,QAAQD,iBAAiBnE,MAAM;wBAEjCgB,WAAWC,OAAO,CAACwD;oBACrB,OAAO;wBACLzD,WAAWC,OAAO,CAACG;oBACrB;oBACA4C,WAAW;oBACXD,WAAW;gBACb;YACF;YAEA,IAAI,CAACA,UAAU;gBACb/C,WAAWC,OAAO,CAACG;YACrB,OAAO;gBACLsB,CAAAA,GAAAA,WAAAA,iBAAiB,EAAC;oBAChBsB,WAAW;gBACb;YACF;QACF;QACA,MAAMzB,OAAMvB,UAAU;YACpB,gEAAgE;YAChE,IAAIiD,UAAU;gBACZ,MAAMC,YAAY,MAAMJ;gBACxB,IAAII,WAAW;oBACblD,WAAWC,OAAO,CAACpB,QAAQqB,MAAM,CAACgD;gBACpC;YACF;QACF;IACF;AACF;AAEA,2DAA2D;AAC3D,gDAAgD;AAChD,SAASS,2BACPC,MAAc;IAEd,IAAIC,UAAU;IACd,IAAIvC;IAEJ,MAAMC,QAAQ,CAACvB;QACb,MAAMwB,WAAW,IAAIC,iBAAAA,eAAe;QACpCH,UAAUE;QAEVE,CAAAA,GAAAA,WAAAA,iBAAiB,EAAC;YAChB,IAAI;gBACF1B,WAAWC,OAAO,CAACpB,QAAQqB,MAAM,CAAC0D;YACpC,EAAE,OAAM;YACN,6DAA6D;YAC7D,8DAA8D;YAC9D,6CAA6C;YAC/C,SAAU;gBACRtC,UAAUU;gBACVR,SAASS,OAAO;YAClB;QACF;IACF;IAEA,OAAO,IAAI7C,gBAAgB;QACzB8C,WAAU9B,KAAK,EAAEJ,UAAU;YACzBA,WAAWC,OAAO,CAACG;YAEnB,wCAAwC;YACxC,IAAIyD,SAAS;YAEb,gCAAgC;YAChCA,UAAU;YACVtC,MAAMvB;QACR;QACAuB,OAAMvB,UAAU;YACd,IAAIsB,SAAS,OAAOA,QAAQjC,OAAO;YACnC,IAAIwE,SAAS;YAEb,aAAa;YACb7D,WAAWC,OAAO,CAACpB,QAAQqB,MAAM,CAAC0D;QACpC;IACF;AACF;AAEA,0EAA0E;AAC1E,0BAA0B;AAC1B,SAASE,4BACPzD,MAAkC;IAElC,IAAI0D,OAA6B;IACjC,IAAIC,cAAc;IAElB,eAAeC,aAAajE,UAA4C;QACtE,IAAI+D,MAAM;YACR;QACF;QAEA,MAAMzD,SAASD,OAAOE,SAAS;QAE/B,wBAAwB;QACxB,gEAAgE;QAChE,qEAAqE;QACrE,uEAAuE;QACvE,8DAA8D;QAC9D,aAAa;QAEb,qEAAqE;QACrE,6EAA6E;QAC7E,gEAAgE;QAChE,MAAM2D,CAAAA,GAAAA,WAAAA,cAAc;QAEpB,IAAI;YACF,MAAO,KAAM;gBACX,MAAM,EAAEzD,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMJ,OAAOK,IAAI;gBACzC,IAAIF,MAAM;oBACRuD,cAAc;oBACd;gBACF;gBAEAhE,WAAWC,OAAO,CAACS;YACrB;QACF,EAAE,OAAOyD,KAAK;YACZnE,WAAWoE,KAAK,CAACD;QACnB;IACF;IAEA,OAAO,IAAI/E,gBAAgB;QACzB8C,WAAU9B,KAAK,EAAEJ,UAAU;YACzBA,WAAWC,OAAO,CAACG;YAEnB,6DAA6D;YAC7D,IAAI,CAAC2D,MAAM;gBACTA,OAAOE,aAAajE;YACtB;QACF;QACAuB,OAAMvB,UAAU;YACd,IAAIgE,aAAa;gBACf;YACF;YACA,OAAOD,QAAQE,aAAajE;QAC9B;IACF;AACF;AAEA,MAAMqE,YAAY;AAElB;;;;CAIC,GACD,SAASC;IACP,IAAIC,cAAc;IAElB,OAAO,IAAInF,gBAAgB;QACzB8C,WAAU9B,KAAK,EAAEJ,UAAU;YACzB,IAAIuE,aAAa;gBACf,OAAOvE,WAAWC,OAAO,CAACG;YAC5B;YAEA,MAAMgD,QAAQC,CAAAA,GAAAA,mBAAAA,iBAAiB,EAACjD,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa;YACxE,IAAIpB,QAAQ,CAAC,GAAG;gBACdmB,cAAc;gBAEd,uEAAuE;gBACvE,2BAA2B;gBAC3B,IAAInE,MAAMpB,MAAM,KAAKsE,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa,CAACxF,MAAM,EAAE;oBAC7D;gBACF;gBAEA,wCAAwC;gBACxC,MAAMyF,SAASrE,MAAMsD,KAAK,CAAC,GAAGN;gBAC9BpD,WAAWC,OAAO,CAACwE;gBAEnB,sEAAsE;gBACtE,qCAAqC;gBACrC,IAAIrE,MAAMpB,MAAM,GAAGsE,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa,CAACxF,MAAM,GAAGoE,OAAO;oBACnE,uCAAuC;oBACvC,MAAMsB,QAAQtE,MAAMsD,KAAK,CACvBN,QAAQE,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa,CAACxF,MAAM;oBAElDgB,WAAWC,OAAO,CAACyE;gBACrB;YACF,OAAO;gBACL1E,WAAWC,OAAO,CAACG;YACrB;QACF;QACAmB,OAAMvB,UAAU;YACd,uEAAuE;YACvE,mCAAmC;YACnCA,WAAWC,OAAO,CAACqD,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa;QACtD;IACF;AACF;AAEA,SAASG;IAIP,OAAO,IAAIvF,gBAAgB;QACzB8C,WAAU9B,KAAK,EAAEJ,UAAU;YACzB,6EAA6E;YAC7E,qFAAqF;YACrF,wFAAwF;YACxF,2FAA2F;YAC3F,sCAAsC;YACtC,IACE4E,CAAAA,GAAAA,mBAAAA,uBAAuB,EAACxE,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACiB,aAAa,KAChEI,CAAAA,GAAAA,mBAAAA,uBAAuB,EAACxE,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACsB,IAAI,KACvDD,CAAAA,GAAAA,mBAAAA,uBAAuB,EAACxE,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACuB,IAAI,GACvD;gBACA,4EAA4E;gBAC5E;YACF;YAEA,+EAA+E;YAC/E,wFAAwF;YACxF,sFAAsF;YACtF1E,QAAQ2E,CAAAA,GAAAA,mBAAAA,oBAAoB,EAAC3E,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACsB,IAAI;YAC5DzE,QAAQ2E,CAAAA,GAAAA,mBAAAA,oBAAoB,EAAC3E,OAAOkD,aAAAA,YAAY,CAACC,MAAM,CAACuB,IAAI;YAE5D9E,WAAWC,OAAO,CAACG;QACrB;IACF;AACF;AAOO,SAAS9B;IAId,IAAI0G,YAAY;IAChB,IAAIC,YAAY;IAChB,OAAO,IAAI7F,gBAAgB;QACzB,MAAM8C,WAAU9B,KAAK,EAAEJ,UAAU;YAC/B,+DAA+D;YAC/D,IACE,CAACgF,aACD3B,CAAAA,GAAAA,mBAAAA,iBAAiB,EAACjD,OAAOkD,aAAAA,YAAY,CAAC4B,OAAO,CAACJ,IAAI,IAAI,CAAC,GACvD;gBACAE,YAAY;YACd;YAEA,IACE,CAACC,aACD5B,CAAAA,GAAAA,mBAAAA,iBAAiB,EAACjD,OAAOkD,aAAAA,YAAY,CAAC4B,OAAO,CAACL,IAAI,IAAI,CAAC,GACvD;gBACAI,YAAY;YACd;YAEAjF,WAAWC,OAAO,CAACG;QACrB;QACAmB,OAAMvB,UAAU;YACd,MAAMmF,cAA6D,EAAE;YACrE,IAAI,CAACH,WAAWG,YAAYvE,IAAI,CAAC;YACjC,IAAI,CAACqE,WAAWE,YAAYvE,IAAI,CAAC;YAEjC,IAAI,CAACuE,YAAYnG,MAAM,EAAE;YAEzBgB,WAAWC,OAAO,CAChBpB,QAAQqB,MAAM,CACZ,CAAC,6CAA6C,EAAEkF,KAAKC,SAAS,CAC5DF,aACA,SAAS,CAAC;QAGlB;IACF;AACF;AAEA,SAASG,kBACPpG,QAA2B,EAC3BqG,YAAyD;IAEzD,IAAIlF,SAASnB;IACb,KAAK,MAAMsG,eAAeD,aAAc;QACtC,IAAI,CAACC,aAAa;QAElBnF,SAASA,OAAOoF,WAAW,CAACD;IAC9B;IACA,OAAOnF;AACT;AAcO,eAAenC,mBACpBwH,YAAiC,EACjC,EACE9B,MAAM,EACN+B,iBAAiB,EACjBC,kBAAkB,EAClBxD,qBAAqB,EACrByD,wBAAwB,EACxBC,kBAAkB,EACI;IAExB,6EAA6E;IAC7E,MAAMC,iBAAiBnC,SAASA,OAAOoC,KAAK,CAAC3B,WAAW,EAAE,CAAC,EAAE,GAAG;IAEhE,2EAA2E;IAC3E,+DAA+D;IAC/D,IAAIuB,sBAAsB,cAAcF,cAAc;QACpD,MAAMA,aAAaO,QAAQ;IAC7B;IAEA,OAAOX,kBAAkBI,cAAc;QACrC,qDAAqD;QACrDtH;QAEA,gCAAgC;QAChCgE,yBAAyB,CAACyD,2BACtB1D,yBAAyBC,yBACzB;QAEJ,wBAAwB;QACxB2D,kBAAkB,QAAQA,eAAe/G,MAAM,GAAG,IAC9C2E,2BAA2BoC,kBAC3B;QAEJ,+EAA+E;QAC/EJ,oBAAoB7B,4BAA4B6B,qBAAqB;QAErE,yDAAyD;QACzDG,qBAAqBxH,oCAAoC;QAEzD,kDAAkD;QAClDgG;QAEA,0BAA0B;QAC1B,qFAAqF;QACrF,+EAA+E;QAC/ElC,yBAAyByD,2BACrBhD,mCAAmCT,yBACnC;KACL;AACH;AAMO,eAAenE,yBACpBiI,eAA2C,EAC3C,EAAE9D,qBAAqB,EAAmC;IAE1D,OACE8D,gBACE,qDAAqD;KACpDT,WAAW,CAACrH,iCACZqH,WAAW,CAACd,2CACb,gCAAgC;KAC/Bc,WAAW,CAAC5C,mCAAmCT;AAEtD;AAOO,eAAejE,wBACpB+H,eAA2C,EAC3C,EAAEP,iBAAiB,EAAEvD,qBAAqB,EAAkC;IAE5E,OACE8D,gBACE,qDAAqD;KACpDT,WAAW,CAACrH,iCACb,gCAAgC;KAC/BqH,WAAW,CAAC5C,mCAAmCT,wBAChD,+EAA+E;KAC9EqD,WAAW,CAAC3B,4BAA4B6B,oBACzC,kDAAkD;KACjDF,WAAW,CAACnB;AAEnB;AAOO,eAAetG,0BACpB0H,YAAwC,EACxC,EAAEC,iBAAiB,EAAEvD,qBAAqB,EAAyB;IAEnE,OACEsD,aACE,qDAAqD;KACpDD,WAAW,CAACrH,iCACb,gCAAgC;KAC/BqH,WAAW,CAAC5C,mCAAmCT,wBAChD,+EAA+E;KAC9EqD,WAAW,CAAC3B,4BAA4B6B,oBACzC,kDAAkD;KACjDF,WAAW,CAACnB;AAEnB;AAEO,SAASjG;IACd,OAAOI,iBAAiB4F;AAC1B","ignoreList":[0]}},
    {"offset": {"line": 5237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5242, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/shared/lib/invariant-error.ts"],"sourcesContent":["export class InvariantError extends Error {\n  constructor(message: string, options?: ErrorOptions) {\n    super(\n      `Invariant: ${message.endsWith('.') ? message : message + '.'} This is a bug in Next.js.`,\n      options\n    )\n    this.name = 'InvariantError'\n  }\n}\n"],"names":["InvariantError","Error","constructor","message","options","endsWith","name"],"mappings":";;;;+BAAaA,kBAAAA;;;eAAAA;;;AAAN,MAAMA,uBAAuBC;IAClCC,YAAYC,OAAe,EAAEC,OAAsB,CAAE;QACnD,KAAK,CACF,gBAAaD,CAAAA,QAAQE,QAAQ,CAAC,OAAOF,UAAUA,UAAU,GAAE,IAAE,8BAC9DC;QAEF,IAAI,CAACE,IAAI,GAAG;IACd;AACF","ignoreList":[0]}},
    {"offset": {"line": 5258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5263, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/shared/lib/page-path/ensure-leading-slash.ts"],"sourcesContent":["/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n"],"names":["ensureLeadingSlash","path","startsWith"],"mappings":"AAAA;;;CAGC,GAAA;;;;+BACeA,sBAAAA;;;eAAAA;;;AAAT,SAASA,mBAAmBC,IAAY;IAC7C,OAAOA,KAAKC,UAAU,CAAC,OAAOD,OAAQ,MAAGA;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 5279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5284, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/shared/lib/segment.ts"],"sourcesContent":["import type { Segment } from '../../server/app-render/types'\n\nexport function isGroupSegment(segment: string) {\n  // Use array[0] for performant purpose\n  return segment[0] === '(' && segment.endsWith(')')\n}\n\nexport function isParallelRouteSegment(segment: string) {\n  return segment.startsWith('@') && segment !== '@children'\n}\n\nexport function addSearchParamsIfPageSegment(\n  segment: Segment,\n  searchParams: Record<string, string | string[] | undefined>\n) {\n  const isPageSegment = segment.includes(PAGE_SEGMENT_KEY)\n\n  if (isPageSegment) {\n    const stringifiedQuery = JSON.stringify(searchParams)\n    return stringifiedQuery !== '{}'\n      ? PAGE_SEGMENT_KEY + '?' + stringifiedQuery\n      : PAGE_SEGMENT_KEY\n  }\n\n  return segment\n}\n\nexport const PAGE_SEGMENT_KEY = '__PAGE__'\nexport const DEFAULT_SEGMENT_KEY = '__DEFAULT__'\n"],"names":["DEFAULT_SEGMENT_KEY","PAGE_SEGMENT_KEY","addSearchParamsIfPageSegment","isGroupSegment","isParallelRouteSegment","segment","endsWith","startsWith","searchParams","isPageSegment","includes","stringifiedQuery","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;IA4BaA,mBAAmB,EAAA;eAAnBA;;IADAC,gBAAgB,EAAA;eAAhBA;;IAhBGC,4BAA4B,EAAA;eAA5BA;;IATAC,cAAc,EAAA;eAAdA;;IAKAC,sBAAsB,EAAA;eAAtBA;;;AALT,SAASD,eAAeE,OAAe;IAC5C,sCAAsC;IACtC,OAAOA,OAAO,CAAC,EAAE,KAAK,OAAOA,QAAQC,QAAQ,CAAC;AAChD;AAEO,SAASF,uBAAuBC,OAAe;IACpD,OAAOA,QAAQE,UAAU,CAAC,QAAQF,YAAY;AAChD;AAEO,SAASH,6BACdG,OAAgB,EAChBG,YAA2D;IAE3D,MAAMC,gBAAgBJ,QAAQK,QAAQ,CAACT;IAEvC,IAAIQ,eAAe;QACjB,MAAME,mBAAmBC,KAAKC,SAAS,CAACL;QACxC,OAAOG,qBAAqB,OACxBV,mBAAmB,MAAMU,mBACzBV;IACN;IAEA,OAAOI;AACT;AAEO,MAAMJ,mBAAmB;AACzB,MAAMD,sBAAsB","ignoreList":[0]}},
    {"offset": {"line": 5335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5340, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/shared/lib/router/utils/app-paths.ts"],"sourcesContent":["import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n"],"names":["normalizeAppPath","normalizeRscURL","route","ensureLeadingSlash","split","reduce","pathname","segment","index","segments","isGroupSegment","length","url","replace"],"mappings":";;;;;;;;;;;;;;;IAsBgBA,gBAAgB,EAAA;eAAhBA;;IAmCAC,eAAe,EAAA;eAAfA;;;oCAzDmB;yBACJ;AAqBxB,SAASD,iBAAiBE,KAAa;IAC5C,OAAOC,CAAAA,GAAAA,oBAAAA,kBAAkB,EACvBD,MAAME,KAAK,CAAC,KAAKC,MAAM,CAAC,CAACC,UAAUC,SAASC,OAAOC;QACjD,8BAA8B;QAC9B,IAAI,CAACF,SAAS;YACZ,OAAOD;QACT;QAEA,sBAAsB;QACtB,IAAII,CAAAA,GAAAA,SAAAA,cAAc,EAACH,UAAU;YAC3B,OAAOD;QACT;QAEA,iCAAiC;QACjC,IAAIC,OAAO,CAAC,EAAE,KAAK,KAAK;YACtB,OAAOD;QACT;QAEA,uDAAuD;QACvD,IACGC,CAAAA,YAAY,UAAUA,YAAY,OAAM,KACzCC,UAAUC,SAASE,MAAM,GAAG,GAC5B;YACA,OAAOL;QACT;QAEA,OAAUA,WAAS,MAAGC;IACxB,GAAG;AAEP;AAMO,SAASN,gBAAgBW,GAAW;IACzC,OAAOA,IAAIC,OAAO,CAChB,eACA,AACA,8BAD8B;AAGlC","ignoreList":[0]}},
    {"offset": {"line": 5388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5393, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/app-render/encryption-utils.ts"],"sourcesContent":["import type { ActionManifest } from '../../build/webpack/plugins/flight-client-entry-plugin'\nimport type {\n  ClientReferenceManifest,\n  ClientReferenceManifestForRsc,\n} from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { workAsyncStorage } from './work-async-storage.external'\n\nlet __next_loaded_action_key: CryptoKey\n\nexport function arrayBufferToString(\n  buffer: ArrayBuffer | Uint8Array<ArrayBufferLike>\n) {\n  const bytes = new Uint8Array(buffer)\n  const len = bytes.byteLength\n\n  // @anonrig: V8 has a limit of 65535 arguments in a function.\n  // For len < 65535, this is faster.\n  // https://github.com/vercel/next.js/pull/56377#pullrequestreview-1656181623\n  if (len < 65535) {\n    return String.fromCharCode.apply(null, bytes as unknown as number[])\n  }\n\n  let binary = ''\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i])\n  }\n  return binary\n}\n\nexport function stringToUint8Array(binary: string) {\n  const len = binary.length\n  const arr = new Uint8Array(len)\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = binary.charCodeAt(i)\n  }\n\n  return arr\n}\n\nexport function encrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\nexport function decrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\n// This is a global singleton that is used to encode/decode the action bound args from\n// the closure. This can't be using a AsyncLocalStorage as it might happen on the module\n// level. Since the client reference manifest won't be mutated, let's use a global singleton\n// to keep it.\nconst SERVER_ACTION_MANIFESTS_SINGLETON = Symbol.for(\n  'next.server.action-manifests'\n)\n\nexport function setReferenceManifestsSingleton({\n  page,\n  clientReferenceManifest,\n  serverActionsManifest,\n  serverModuleMap,\n}: {\n  page: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  serverActionsManifest: DeepReadonly<ActionManifest>\n  serverModuleMap: {\n    [id: string]: {\n      id: string\n      chunks: string[]\n      name: string\n    }\n  }\n}) {\n  // @ts-expect-error\n  const clientReferenceManifestsPerPage = globalThis[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ]?.clientReferenceManifestsPerPage as\n    | undefined\n    | DeepReadonly<Record<string, ClientReferenceManifest>>\n\n  // @ts-expect-error\n  globalThis[SERVER_ACTION_MANIFESTS_SINGLETON] = {\n    clientReferenceManifestsPerPage: {\n      ...clientReferenceManifestsPerPage,\n      [normalizeAppPath(page)]: clientReferenceManifest,\n    },\n    serverActionsManifest,\n    serverModuleMap,\n  }\n}\n\nexport function getServerModuleMap() {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverModuleMap: {\n      [id: string]: {\n        id: string\n        chunks: string[]\n        name: string\n      }\n    }\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  return serverActionsManifestSingleton.serverModuleMap\n}\n\nexport function getClientReferenceManifestForRsc(): DeepReadonly<ClientReferenceManifestForRsc> {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    clientReferenceManifestsPerPage: DeepReadonly<\n      Record<string, ClientReferenceManifest>\n    >\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const { clientReferenceManifestsPerPage } = serverActionsManifestSingleton\n  const workStore = workAsyncStorage.getStore()\n\n  if (!workStore) {\n    // If there's no work store defined, we can assume that a client reference\n    // manifest is needed during module evaluation, e.g. to create a server\n    // action using a higher-order function. This might also use client\n    // components which need to be serialized by Flight, and therefore client\n    // references need to be resolvable. To make this work, we're returning a\n    // merged manifest across all pages. This is fine as long as the module IDs\n    // are not page specific, which they are not for Webpack. TODO: Fix this in\n    // Turbopack.\n    return mergeClientReferenceManifests(clientReferenceManifestsPerPage)\n  }\n\n  const clientReferenceManifest =\n    clientReferenceManifestsPerPage[workStore.route]\n\n  if (!clientReferenceManifest) {\n    throw new InvariantError(\n      `Missing Client Reference Manifest for ${workStore.route}.`\n    )\n  }\n\n  return clientReferenceManifest\n}\n\nexport async function getActionEncryptionKey() {\n  if (__next_loaded_action_key) {\n    return __next_loaded_action_key\n  }\n\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverActionsManifest: DeepReadonly<ActionManifest>\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const rawKey =\n    process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY ||\n    serverActionsManifestSingleton.serverActionsManifest.encryptionKey\n\n  if (rawKey === undefined) {\n    throw new InvariantError('Missing encryption key for Server Actions')\n  }\n\n  __next_loaded_action_key = await crypto.subtle.importKey(\n    'raw',\n    stringToUint8Array(atob(rawKey)),\n    'AES-GCM',\n    true,\n    ['encrypt', 'decrypt']\n  )\n\n  return __next_loaded_action_key\n}\n\nfunction mergeClientReferenceManifests(\n  clientReferenceManifestsPerPage: DeepReadonly<\n    Record<string, ClientReferenceManifest>\n  >\n): ClientReferenceManifestForRsc {\n  const clientReferenceManifests = Object.values(\n    clientReferenceManifestsPerPage as Record<string, ClientReferenceManifest>\n  )\n\n  const mergedClientReferenceManifest: ClientReferenceManifestForRsc = {\n    clientModules: {},\n    edgeRscModuleMapping: {},\n    rscModuleMapping: {},\n  }\n\n  for (const clientReferenceManifest of clientReferenceManifests) {\n    mergedClientReferenceManifest.clientModules = {\n      ...mergedClientReferenceManifest.clientModules,\n      ...clientReferenceManifest.clientModules,\n    }\n    mergedClientReferenceManifest.edgeRscModuleMapping = {\n      ...mergedClientReferenceManifest.edgeRscModuleMapping,\n      ...clientReferenceManifest.edgeRscModuleMapping,\n    }\n    mergedClientReferenceManifest.rscModuleMapping = {\n      ...mergedClientReferenceManifest.rscModuleMapping,\n      ...clientReferenceManifest.rscModuleMapping,\n    }\n  }\n\n  return mergedClientReferenceManifest\n}\n"],"names":["arrayBufferToString","decrypt","encrypt","getActionEncryptionKey","getClientReferenceManifestForRsc","getServerModuleMap","setReferenceManifestsSingleton","stringToUint8Array","__next_loaded_action_key","buffer","bytes","Uint8Array","len","byteLength","String","fromCharCode","apply","binary","i","length","arr","charCodeAt","key","iv","data","crypto","subtle","name","SERVER_ACTION_MANIFESTS_SINGLETON","Symbol","for","page","clientReferenceManifest","serverActionsManifest","serverModuleMap","globalThis","clientReferenceManifestsPerPage","normalizeAppPath","serverActionsManifestSingleton","InvariantError","workStore","workAsyncStorage","getStore","mergeClientReferenceManifests","route","rawKey","process","env","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","encryptionKey","undefined","importKey","atob","clientReferenceManifests","Object","values","mergedClientReferenceManifest","clientModules","edgeRscModuleMapping","rscModuleMapping"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5569, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5574, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/server/app-render/encryption.ts"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport 'server-only'\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport { renderToReadableStream } from 'react-server-dom-webpack/server.edge'\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createFromReadableStream } from 'react-server-dom-webpack/client.edge'\n\nimport { streamToString } from '../stream-utils/node-web-streams-helper'\nimport {\n  arrayBufferToString,\n  decrypt,\n  encrypt,\n  getActionEncryptionKey,\n  getClientReferenceManifestForRsc,\n  getServerModuleMap,\n  stringToUint8Array,\n} from './encryption-utils'\nimport {\n  getPrerenderResumeDataCache,\n  getRenderResumeDataCache,\n  workUnitAsyncStorage,\n} from './work-unit-async-storage.external'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nasync function decodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (typeof key === 'undefined') {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get the iv (16 bytes) and the payload from the arg.\n  const originalPayload = atob(arg)\n  const ivValue = originalPayload.slice(0, 16)\n  const payload = originalPayload.slice(16)\n\n  const decrypted = textDecoder.decode(\n    await decrypt(key, stringToUint8Array(ivValue), stringToUint8Array(payload))\n  )\n\n  if (!decrypted.startsWith(actionId)) {\n    throw new Error('Invalid Server Action payload: failed to decrypt.')\n  }\n\n  return decrypted.slice(actionId.length)\n}\n\n/**\n * Encrypt the serialized string with the action id as the salt. Add a prefix to\n * later ensure that the payload is correctly decrypted, similar to a checksum.\n */\nasync function encodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (key === undefined) {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get 16 random bytes as iv.\n  const randomBytes = new Uint8Array(16)\n  workUnitAsyncStorage.exit(() => crypto.getRandomValues(randomBytes))\n  const ivValue = arrayBufferToString(randomBytes.buffer)\n\n  const encrypted = await encrypt(\n    key,\n    randomBytes,\n    textEncoder.encode(actionId + arg)\n  )\n\n  return btoa(ivValue + arrayBufferToString(encrypted))\n}\n\n// Encrypts the action's bound args into a string.\nexport async function encryptActionBoundArgs(actionId: string, args: any[]) {\n  const { clientModules } = getClientReferenceManifestForRsc()\n\n  // Create an error before any asynchrounous calls, to capture the original\n  // call stack in case we need it when the serialization errors.\n  const error = new Error()\n  Error.captureStackTrace(error, encryptActionBoundArgs)\n\n  let didCatchError = false\n\n  // Using Flight to serialize the args into a string.\n  const serialized = await streamToString(\n    renderToReadableStream(args, clientModules, {\n      onError(err) {\n        // We're only reporting one error at a time, starting with the first.\n        if (didCatchError) {\n          return\n        }\n\n        didCatchError = true\n\n        // Use the original error message together with the previously created\n        // stack, because err.stack is a useless Flight Server call stack.\n        error.message = err instanceof Error ? err.message : String(err)\n      },\n    })\n  )\n\n  if (didCatchError) {\n    if (process.env.NODE_ENV === 'development') {\n      // Logging the error is needed for server functions that are passed to the\n      // client where the decryption is not done during rendering. Console\n      // replaying allows us to still show the error dev overlay in this case.\n      console.error(error)\n    }\n\n    throw error\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  if (!workUnitStore) {\n    return encodeActionBoundArg(actionId, serialized)\n  }\n\n  const prerenderResumeDataCache = getPrerenderResumeDataCache(workUnitStore)\n  const renderResumeDataCache = getRenderResumeDataCache(workUnitStore)\n  const cacheKey = actionId + serialized\n\n  const cachedEncrypted =\n    prerenderResumeDataCache?.encryptedBoundArgs.get(cacheKey) ??\n    renderResumeDataCache?.encryptedBoundArgs.get(cacheKey)\n\n  if (cachedEncrypted) {\n    return cachedEncrypted\n  }\n\n  const cacheSignal =\n    workUnitStore.type === 'prerender' ? workUnitStore.cacheSignal : undefined\n\n  cacheSignal?.beginRead()\n\n  const encrypted = await encodeActionBoundArg(actionId, serialized)\n\n  cacheSignal?.endRead()\n  prerenderResumeDataCache?.encryptedBoundArgs.set(cacheKey, encrypted)\n\n  return encrypted\n}\n\n// Decrypts the action's bound args from the encrypted string.\nexport async function decryptActionBoundArgs(\n  actionId: string,\n  encrypted: Promise<string>\n) {\n  const { edgeRscModuleMapping, rscModuleMapping } =\n    getClientReferenceManifestForRsc()\n\n  // Decrypt the serialized string with the action id as the salt.\n  const decrypted = await decodeActionBoundArg(actionId, await encrypted)\n\n  // Using Flight to deserialize the args from the string.\n  const deserialized = await createFromReadableStream(\n    new ReadableStream({\n      start(controller) {\n        controller.enqueue(textEncoder.encode(decrypted))\n        controller.close()\n      },\n    }),\n    {\n      serverConsumerManifest: {\n        // moduleLoading must be null because we don't want to trigger preloads of ClientReferences\n        // to be added to the current execution. Instead, we'll wait for any ClientReference\n        // to be emitted which themselves will handle the preloading.\n        moduleLoading: null,\n        moduleMap: isEdgeRuntime ? edgeRscModuleMapping : rscModuleMapping,\n        serverModuleMap: getServerModuleMap(),\n      },\n    }\n  )\n\n  return deserialized\n}\n"],"names":["decryptActionBoundArgs","encryptActionBoundArgs","isEdgeRuntime","process","env","NEXT_RUNTIME","textEncoder","TextEncoder","textDecoder","TextDecoder","decodeActionBoundArg","actionId","arg","key","getActionEncryptionKey","Error","originalPayload","atob","ivValue","slice","payload","decrypted","decode","decrypt","stringToUint8Array","startsWith","length","encodeActionBoundArg","undefined","randomBytes","Uint8Array","workUnitAsyncStorage","exit","crypto","getRandomValues","arrayBufferToString","buffer","encrypted","encrypt","encode","btoa","args","clientModules","getClientReferenceManifestForRsc","error","captureStackTrace","didCatchError","serialized","streamToString","renderToReadableStream","onError","err","message","String","NODE_ENV","console","workUnitStore","getStore","prerenderResumeDataCache","getPrerenderResumeDataCache","renderResumeDataCache","getRenderResumeDataCache","cacheKey","cachedEncrypted","encryptedBoundArgs","get","cacheSignal","type","beginRead","endRead","set","edgeRscModuleMapping","rscModuleMapping","deserialized","createFromReadableStream","ReadableStream","start","controller","enqueue","close","serverConsumerManifest","moduleLoading","moduleMap","serverModuleMap","getServerModuleMap"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5704, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5709, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-validate.ts"],"sourcesContent":["// This function ensures that all the exported values are valid server actions,\n// during the runtime. By definition all actions are required to be async\n// functions, but here we can only check that they are functions.\nexport function ensureServerEntryExports(actions: any[]) {\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i]\n    if (typeof action !== 'function') {\n      throw new Error(\n        `A \"use server\" file can only export async functions, found ${typeof action}.\\nRead more: https://nextjs.org/docs/messages/invalid-use-server-value`\n      )\n    }\n  }\n}\n"],"names":["ensureServerEntryExports","actions","i","length","action","Error"],"mappings":"AAAA,+EAA+E;AAC/E,yEAAyE;AACzE,iEAAiE;;;;;+BACjDA,4BAAAA;;;eAAAA;;;AAAT,SAASA,yBAAyBC,OAAc;IACrD,IAAK,IAAIC,IAAI,GAAGA,IAAID,QAAQE,MAAM,EAAED,IAAK;QACvC,MAAME,SAASH,OAAO,CAACC,EAAE;QACzB,IAAI,OAAOE,WAAW,YAAY;YAChC,MAAM,IAAIC,MACR,CAAC,2DAA2D,EAAE,OAAOD,OAAO,uEAAuE,CAAC;QAExJ;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 5730, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5735, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/postgres-array%402.0.0/node_modules/postgres-array/index.js"],"sourcesContent":["'use strict'\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nclass ArrayParser {\n  constructor (source, transform) {\n    this.source = source\n    this.transform = transform || identity\n    this.position = 0\n    this.entries = []\n    this.recorded = []\n    this.dimension = 0\n  }\n\n  isEof () {\n    return this.position >= this.source.length\n  }\n\n  nextCharacter () {\n    var character = this.source[this.position++]\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      }\n    }\n    return {\n      value: character,\n      escaped: false\n    }\n  }\n\n  record (character) {\n    this.recorded.push(character)\n  }\n\n  newEntry (includeEmpty) {\n    var entry\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('')\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n      if (entry !== null) entry = this.transform(entry)\n      this.entries.push(entry)\n      this.recorded = []\n    }\n  }\n\n  consumeDimensions () {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter()\n        if (char.value === '=') break\n      }\n    }\n  }\n\n  parse (nested) {\n    var character, parser, quote\n    this.consumeDimensions()\n    while (!this.isEof()) {\n      character = this.nextCharacter()\n      if (character.value === '{' && !quote) {\n        this.dimension++\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n          this.entries.push(parser.parse(true))\n          this.position += parser.position - 2\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--\n        if (!this.dimension) {\n          this.newEntry()\n          if (nested) return this.entries\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true)\n        quote = !quote\n      } else if (character.value === ',' && !quote) {\n        this.newEntry()\n      } else {\n        this.record(character.value)\n      }\n    }\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced')\n    }\n    return this.entries\n  }\n}\n\nfunction identity (value) {\n  return value\n}\n"],"names":[],"mappings":"AAAA;AAEA,QAAQ,KAAK,GAAG,SAAU,MAAM,EAAE,SAAS;IACzC,OAAO,IAAI,YAAY,QAAQ,WAAW,KAAK;AACjD;AAEA,MAAM;IACJ,YAAa,MAAM,EAAE,SAAS,CAAE;QAC9B,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,SAAS,GAAG,aAAa;QAC9B,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,OAAO,GAAG,EAAE;QACjB,IAAI,CAAC,QAAQ,GAAG,EAAE;QAClB,IAAI,CAAC,SAAS,GAAG;IACnB;IAEA,QAAS;QACP,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM;IAC5C;IAEA,gBAAiB;QACf,IAAI,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG;QAC5C,IAAI,cAAc,MAAM;YACtB,OAAO;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG;gBACnC,SAAS;YACX;QACF;QACA,OAAO;YACL,OAAO;YACP,SAAS;QACX;IACF;IAEA,OAAQ,SAAS,EAAE;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACrB;IAEA,SAAU,YAAY,EAAE;QACtB,IAAI;QACJ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAK,cAAc;YAC5C,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC3B,IAAI,UAAU,UAAU,CAAC,cAAc;gBACrC,QAAQ;YACV;YACA,IAAI,UAAU,MAAM,QAAQ,IAAI,CAAC,SAAS,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,EAAE;QACpB;IACF;IAEA,oBAAqB;QACnB,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,KAAK;YAC1B,MAAO,CAAC,IAAI,CAAC,KAAK,GAAI;gBACpB,IAAI,OAAO,IAAI,CAAC,aAAa;gBAC7B,IAAI,KAAK,KAAK,KAAK,KAAK;YAC1B;QACF;IACF;IAEA,MAAO,MAAM,EAAE;QACb,IAAI,WAAW,QAAQ;QACvB,IAAI,CAAC,iBAAiB;QACtB,MAAO,CAAC,IAAI,CAAC,KAAK,GAAI;YACpB,YAAY,IAAI,CAAC,aAAa;YAC9B,IAAI,UAAU,KAAK,KAAK,OAAO,CAAC,OAAO;gBACrC,IAAI,CAAC,SAAS;gBACd,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG;oBACtB,SAAS,IAAI,YAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,SAAS;oBAC9E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC;oBAC/B,IAAI,CAAC,QAAQ,IAAI,OAAO,QAAQ,GAAG;gBACrC;YACF,OAAO,IAAI,UAAU,KAAK,KAAK,OAAO,CAAC,OAAO;gBAC5C,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,QAAQ;oBACb,IAAI,QAAQ,OAAO,IAAI,CAAC,OAAO;gBACjC;YACF,OAAO,IAAI,UAAU,KAAK,KAAK,OAAO,CAAC,UAAU,OAAO,EAAE;gBACxD,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACzB,QAAQ,CAAC;YACX,OAAO,IAAI,UAAU,KAAK,KAAK,OAAO,CAAC,OAAO;gBAC5C,IAAI,CAAC,QAAQ;YACf,OAAO;gBACL,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK;YAC7B;QACF;QACA,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG;YACxB,MAAM,IAAI,MAAM;QAClB;QACA,OAAO,IAAI,CAAC,OAAO;IACrB;AACF;AAEA,SAAS,SAAU,KAAK;IACtB,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5828, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-types%402.2.0/node_modules/pg-types/lib/arrayParser.js"],"sourcesContent":["var array = require('postgres-array');\n\nmodule.exports = {\n  create: function (source, transform) {\n    return {\n      parse: function() {\n        return array.parse(source, transform);\n      }\n    };\n  }\n};\n"],"names":[],"mappings":"AAAA,IAAI;AAEJ,OAAO,OAAO,GAAG;IACf,QAAQ,SAAU,MAAM,EAAE,SAAS;QACjC,OAAO;YACL,OAAO;gBACL,OAAO,MAAM,KAAK,CAAC,QAAQ;YAC7B;QACF;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 5838, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5843, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/postgres-date%401.0.7/node_modules/postgres-date/index.js"],"sourcesContent":["'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n"],"names":[],"mappings":"AAAA;AAEA,IAAI,YAAY;AAChB,IAAI,OAAO;AACX,IAAI,YAAY;AAChB,IAAI,WAAW;AAEf,OAAO,OAAO,GAAG,SAAS,UAAW,OAAO;IAC1C,IAAI,SAAS,IAAI,CAAC,UAAU;QAC1B,kDAAkD;QAClD,OAAO,OAAO,QAAQ,OAAO,CAAC,KAAK;IACrC;IACA,IAAI,UAAU,UAAU,IAAI,CAAC;IAE7B,IAAI,CAAC,SAAS;QACZ,oDAAoD;QACpD,OAAO,QAAQ,YAAY;IAC7B;IAEA,IAAI,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;IACvB,IAAI,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE;IAChC,IAAI,MAAM;QACR,OAAO,qBAAqB;IAC9B;IAEA,IAAI,QAAQ,SAAS,OAAO,CAAC,EAAE,EAAE,MAAM;IACvC,IAAI,MAAM,OAAO,CAAC,EAAE;IACpB,IAAI,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE;IAChC,IAAI,SAAS,SAAS,OAAO,CAAC,EAAE,EAAE;IAClC,IAAI,SAAS,SAAS,OAAO,CAAC,EAAE,EAAE;IAElC,IAAI,KAAK,OAAO,CAAC,EAAE;IACnB,KAAK,KAAK,OAAO,WAAW,MAAM;IAElC,IAAI;IACJ,IAAI,SAAS,eAAe;IAC5B,IAAI,UAAU,MAAM;QAClB,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,OAAO,KAAK,MAAM,QAAQ,QAAQ;QAEjE,gEAAgE;QAChE,gEAAgE;QAChE,IAAI,QAAQ,OAAO;YACjB,KAAK,cAAc,CAAC;QACtB;QAEA,IAAI,WAAW,GAAG;YAChB,KAAK,OAAO,CAAC,KAAK,OAAO,KAAK;QAChC;IACF,OAAO;QACL,OAAO,IAAI,KAAK,MAAM,OAAO,KAAK,MAAM,QAAQ,QAAQ;QAExD,IAAI,QAAQ,OAAO;YACjB,KAAK,WAAW,CAAC;QACnB;IACF;IAEA,OAAO;AACT;AAEA,SAAS,QAAS,OAAO;IACvB,IAAI,UAAU,KAAK,IAAI,CAAC;IACxB,IAAI,CAAC,SAAS;QACZ;IACF;IAEA,IAAI,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE;IAChC,IAAI,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;IACvB,IAAI,MAAM;QACR,OAAO,qBAAqB;IAC9B;IAEA,IAAI,QAAQ,SAAS,OAAO,CAAC,EAAE,EAAE,MAAM;IACvC,IAAI,MAAM,OAAO,CAAC,EAAE;IACpB,0CAA0C;IAC1C,IAAI,OAAO,IAAI,KAAK,MAAM,OAAO;IAEjC,IAAI,QAAQ,OAAO;QACjB,KAAK,WAAW,CAAC;IACnB;IAEA,OAAO;AACT;AAEA,mBAAmB;AACnB,UAAU;AACV,MAAM;AACN,SAAS;AACT,SAAS,eAAgB,OAAO;IAC9B,IAAI,QAAQ,QAAQ,CAAC,QAAQ;QAC3B,OAAO;IACT;IAEA,IAAI,OAAO,UAAU,IAAI,CAAC,QAAQ,KAAK,CAAC,IAAI,CAAC,EAAE;IAC/C,IAAI,CAAC,MAAM;IACX,IAAI,OAAO,IAAI,CAAC,EAAE;IAElB,IAAI,SAAS,KAAK;QAChB,OAAO;IACT;IACA,IAAI,OAAO,SAAS,MAAM,CAAC,IAAI;IAC/B,IAAI,SAAS,SAAS,IAAI,CAAC,EAAE,EAAE,MAAM,OACnC,SAAS,IAAI,CAAC,EAAE,IAAI,GAAG,MAAM,KAC7B,SAAS,IAAI,CAAC,EAAE,IAAI,GAAG;IAEzB,OAAO,SAAS,OAAO;AACzB;AAEA,SAAS,qBAAsB,IAAI;IACjC,uEAAuE;IACvE,4DAA4D;IAC5D,OAAO,CAAC,CAAC,OAAO,CAAC;AACnB;AAEA,SAAS,QAAS,GAAG;IACnB,OAAO,OAAO,KAAK,MAAM;AAC3B","ignoreList":[0]}},
    {"offset": {"line": 5935, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5940, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/xtend%404.0.2/node_modules/xtend/mutable.js"],"sourcesContent":["module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n"],"names":[],"mappings":"AAAA,OAAO,OAAO,GAAG;AAEjB,IAAI,iBAAiB,OAAO,SAAS,CAAC,cAAc;AAEpD,SAAS,OAAO,MAAM;IAClB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACvC,IAAI,SAAS,SAAS,CAAC,EAAE;QAEzB,IAAK,IAAI,OAAO,OAAQ;YACpB,IAAI,eAAe,IAAI,CAAC,QAAQ,MAAM;gBAClC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;YAC7B;QACJ;IACJ;IAEA,OAAO;AACX","ignoreList":[0]}},
    {"offset": {"line": 5953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5958, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/postgres-interval%401.2.0/node_modules/postgres-interval/index.js"],"sourcesContent":["'use strict'\n\nvar extend = require('xtend/mutable')\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds')\n  }\n\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      var value = this[property] || 0\n\n      // Account for fractional part of seconds,\n      // remove trailing zeroes.\n      if (property === 'seconds' && this.milliseconds) {\n        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '')\n      }\n\n      return value + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n}\nvar dateProperties = ['years', 'months', 'days']\nvar timeProperties = ['hours', 'minutes', 'seconds']\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties\n    .map(buildProperty, this)\n    .join('')\n\n  var timePart = timeProperties\n    .map(buildProperty, this)\n    .join('')\n\n  return 'P' + datePart + 'T' + timePart\n\n  function buildProperty (property) {\n    var value = this[property] || 0\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '')\n    }\n\n    return value + propertiesISOEquivalent[property]\n  }\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n  .join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds']\n\nfunction parseMilliseconds (fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length)\n  return parseInt(microseconds, 10) / 1000\n}\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      // milliseconds are actually microseconds (up to 6 digits)\n      // with omitted trailing zeroes.\n      value = property === 'milliseconds'\n        ? parseMilliseconds(value)\n        : parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6082, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6087, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/postgres-bytea%401.0.0/node_modules/postgres-bytea/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG,SAAS,WAAY,KAAK;IACzC,IAAI,OAAO,IAAI,CAAC,QAAQ;QACtB,qCAAqC;QACrC,OAAO,IAAI,OAAO,MAAM,MAAM,CAAC,IAAI;IACrC;IACA,IAAI,SAAS;IACb,IAAI,IAAI;IACR,MAAO,IAAI,MAAM,MAAM,CAAE;QACvB,IAAI,KAAK,CAAC,EAAE,KAAK,MAAM;YACrB,UAAU,KAAK,CAAC,EAAE;YAClB,EAAE;QACJ,OAAO;YACL,IAAI,WAAW,IAAI,CAAC,MAAM,MAAM,CAAC,IAAI,GAAG,KAAK;gBAC3C,UAAU,OAAO,YAAY,CAAC,SAAS,MAAM,MAAM,CAAC,IAAI,GAAG,IAAI;gBAC/D,KAAK;YACP,OAAO;gBACL,IAAI,cAAc;gBAClB,MAAO,IAAI,cAAc,MAAM,MAAM,IAAI,KAAK,CAAC,IAAI,YAAY,KAAK,KAAM;oBACxE;gBACF;gBACA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,CAAC,cAAc,IAAI,EAAE,EAAG;oBACpD,UAAU;gBACZ;gBACA,KAAK,KAAK,KAAK,CAAC,cAAc,KAAK;YACrC;QACF;IACF;IACA,OAAO,IAAI,OAAO,QAAQ;AAC5B","ignoreList":[0]}},
    {"offset": {"line": 6117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6122, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-types%402.2.0/node_modules/pg-types/lib/textParsers.js"],"sourcesContent":["var array = require('postgres-array')\nvar arrayParser = require('./arrayParser');\nvar parseDate = require('postgres-date');\nvar parseInterval = require('postgres-interval');\nvar parseByteA = require('postgres-bytea');\n\nfunction allowNull (fn) {\n  return function nullAllowed (value) {\n    if (value === null) return value\n    return fn(value)\n  }\n}\n\nfunction parseBool (value) {\n  if (value === null) return value\n  return value === 'TRUE' ||\n    value === 't' ||\n    value === 'true' ||\n    value === 'y' ||\n    value === 'yes' ||\n    value === 'on' ||\n    value === '1';\n}\n\nfunction parseBoolArray (value) {\n  if (!value) return null\n  return array.parse(value, parseBool)\n}\n\nfunction parseBaseTenInt (string) {\n  return parseInt(string, 10)\n}\n\nfunction parseIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(parseBaseTenInt))\n}\n\nfunction parseBigIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim()\n  }))\n}\n\nvar parsePointArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parsePoint(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseFloatArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(value) {\n  if(!value) { return null; }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseIntervalArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseInterval(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseByteAArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(parseByteA));\n};\n\nvar parseInteger = function(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function(value) {\n  var valStr = String(value);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return value;\n};\n\nvar parseJsonArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(JSON.parse));\n};\n\nvar parsePoint = function(value) {\n  if (value[0] !== '(') { return null; }\n\n  value = value.substring( 1, value.length - 1 ).split(',');\n\n  return {\n    x: parseFloat(value[0])\n  , y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function(value) {\n  if (value[0] !== '<' && value[1] !== '(') { return null; }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n  for (var i = 2; i < value.length - 1; i++){\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ','){\n      continue;\n    }\n\n    radius += value[i];\n  }\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n\n  return result;\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(600, parsePoint); // point\n  register(651, parseStringArray); // cidr[]\n  register(718, parseCircle); // circle\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1028, parseIntegerArray); // oid[]\n  register(1016, parseBigIntegerArray); // _int8\n  register(1017, parsePointArray); // point[]\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1040, parseStringArray); // macaddr[]\n  register(1041, parseStringArray); // inet[]\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(1187, parseIntervalArray);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n  register(199, parseJsonArray); // json[]\n  register(3807, parseJsonArray); // jsonb[]\n  register(3907, parseStringArray); // numrange[]\n  register(2951, parseStringArray); // uuid[]\n  register(791, parseStringArray); // money[]\n  register(1183, parseStringArray); // time[]\n  register(1270, parseStringArray); // timetz[]\n};\n\nmodule.exports = {\n  init: init\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6321, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-int8%401.0.1/node_modules/pg-int8/index.js"],"sourcesContent":["'use strict';\n\n// selected so (BASE - 1) * 0x100000000 + 0xffffffff is a safe integer\nvar BASE = 1000000;\n\nfunction readInt8(buffer) {\n\tvar high = buffer.readInt32BE(0);\n\tvar low = buffer.readUInt32BE(4);\n\tvar sign = '';\n\n\tif (high < 0) {\n\t\thigh = ~high + (low === 0);\n\t\tlow = (~low + 1) >>> 0;\n\t\tsign = '-';\n\t}\n\n\tvar result = '';\n\tvar carry;\n\tvar t;\n\tvar digits;\n\tvar pad;\n\tvar l;\n\tvar i;\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\tt = 0x100000000 * carry + low;\n\t\tdigits = '' + t % BASE;\n\n\t\treturn sign + digits + result;\n\t}\n}\n\nmodule.exports = readInt8;\n"],"names":[],"mappings":"AAAA;AAEA,sEAAsE;AACtE,IAAI,OAAO;AAEX,SAAS,SAAS,MAAM;IACvB,IAAI,OAAO,OAAO,WAAW,CAAC;IAC9B,IAAI,MAAM,OAAO,YAAY,CAAC;IAC9B,IAAI,OAAO;IAEX,IAAI,OAAO,GAAG;QACb,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;QACzB,MAAM,AAAC,CAAC,MAAM,MAAO;QACrB,OAAO;IACR;IAEA,IAAI,SAAS;IACb,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IAEJ;QACC,QAAQ,OAAO;QACf,OAAO,OAAO,SAAS;QAEvB,IAAI,cAAc,QAAQ;QAC1B,MAAM,IAAI,SAAS;QACnB,SAAS,KAAK,CAAC,IAAI,OAAO,GAAG;QAE7B,IAAI,QAAQ,KAAK,SAAS,GAAG;YAC5B,OAAO,OAAO,SAAS;QACxB;QAEA,MAAM;QACN,IAAI,IAAI,OAAO,MAAM;QAErB,IAAK,IAAI,GAAG,IAAI,GAAG,IAAK;YACvB,OAAO;QACR;QAEA,SAAS,MAAM,SAAS;IACzB;IAEA;QACC,QAAQ,OAAO;QACf,OAAO,OAAO,SAAS;QAEvB,IAAI,cAAc,QAAQ;QAC1B,MAAM,IAAI,SAAS;QACnB,SAAS,KAAK,CAAC,IAAI,OAAO,GAAG;QAE7B,IAAI,QAAQ,KAAK,SAAS,GAAG;YAC5B,OAAO,OAAO,SAAS;QACxB;QAEA,MAAM;QACN,IAAI,IAAI,OAAO,MAAM;QAErB,IAAK,IAAI,GAAG,IAAI,GAAG,IAAK;YACvB,OAAO;QACR;QAEA,SAAS,MAAM,SAAS;IACzB;IAEA;QACC,QAAQ,OAAO;QACf,OAAO,OAAO,SAAS;QAEvB,IAAI,cAAc,QAAQ;QAC1B,MAAM,IAAI,SAAS;QACnB,SAAS,KAAK,CAAC,IAAI,OAAO,GAAG;QAE7B,IAAI,QAAQ,KAAK,SAAS,GAAG;YAC5B,OAAO,OAAO,SAAS;QACxB;QAEA,MAAM;QACN,IAAI,IAAI,OAAO,MAAM;QAErB,IAAK,IAAI,GAAG,IAAI,GAAG,IAAK;YACvB,OAAO;QACR;QAEA,SAAS,MAAM,SAAS;IACzB;IAEA;QACC,QAAQ,OAAO;QACf,IAAI,cAAc,QAAQ;QAC1B,SAAS,KAAK,IAAI;QAElB,OAAO,OAAO,SAAS;IACxB;AACD;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 6396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6401, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-types%402.2.0/node_modules/pg-types/lib/binaryParsers.js"],"sourcesContent":["var parseInt64 = require('pg-int8');\n\nvar parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(20, parseInt64);\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6609, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6614, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-types%402.2.0/node_modules/pg-types/lib/builtins.js"],"sourcesContent":["/**\n * Following query was used to generate this file:\n\n SELECT json_object_agg(UPPER(PT.typname), PT.oid::int4 ORDER BY pt.oid)\n FROM pg_type PT\n WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)\n AND typtype = 'b' -- Only basic types\n AND typelem = 0 -- Ignore aliases\n AND typisdefined -- Ignore undefined types\n */\n\nmodule.exports = {\n    BOOL: 16,\n    BYTEA: 17,\n    CHAR: 18,\n    INT8: 20,\n    INT2: 21,\n    INT4: 23,\n    REGPROC: 24,\n    TEXT: 25,\n    OID: 26,\n    TID: 27,\n    XID: 28,\n    CID: 29,\n    JSON: 114,\n    XML: 142,\n    PG_NODE_TREE: 194,\n    SMGR: 210,\n    PATH: 602,\n    POLYGON: 604,\n    CIDR: 650,\n    FLOAT4: 700,\n    FLOAT8: 701,\n    ABSTIME: 702,\n    RELTIME: 703,\n    TINTERVAL: 704,\n    CIRCLE: 718,\n    MACADDR8: 774,\n    MONEY: 790,\n    MACADDR: 829,\n    INET: 869,\n    ACLITEM: 1033,\n    BPCHAR: 1042,\n    VARCHAR: 1043,\n    DATE: 1082,\n    TIME: 1083,\n    TIMESTAMP: 1114,\n    TIMESTAMPTZ: 1184,\n    INTERVAL: 1186,\n    TIMETZ: 1266,\n    BIT: 1560,\n    VARBIT: 1562,\n    NUMERIC: 1700,\n    REFCURSOR: 1790,\n    REGPROCEDURE: 2202,\n    REGOPER: 2203,\n    REGOPERATOR: 2204,\n    REGCLASS: 2205,\n    REGTYPE: 2206,\n    UUID: 2950,\n    TXID_SNAPSHOT: 2970,\n    PG_LSN: 3220,\n    PG_NDISTINCT: 3361,\n    PG_DEPENDENCIES: 3402,\n    TSVECTOR: 3614,\n    TSQUERY: 3615,\n    GTSVECTOR: 3642,\n    REGCONFIG: 3734,\n    REGDICTIONARY: 3769,\n    JSONB: 3802,\n    REGNAMESPACE: 4089,\n    REGROLE: 4096\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;CASC,GAED,OAAO,OAAO,GAAG;IACb,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,SAAS;IACT,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,cAAc;IACd,MAAM;IACN,MAAM;IACN,SAAS;IACT,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,SAAS;IACT,WAAW;IACX,QAAQ;IACR,UAAU;IACV,OAAO;IACP,SAAS;IACT,MAAM;IACN,SAAS;IACT,QAAQ;IACR,SAAS;IACT,MAAM;IACN,MAAM;IACN,WAAW;IACX,aAAa;IACb,UAAU;IACV,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,SAAS;IACT,WAAW;IACX,cAAc;IACd,SAAS;IACT,aAAa;IACb,UAAU;IACV,SAAS;IACT,MAAM;IACN,eAAe;IACf,QAAQ;IACR,cAAc;IACd,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,WAAW;IACX,WAAW;IACX,eAAe;IACf,OAAO;IACP,cAAc;IACd,SAAS;AACb","ignoreList":[0]}},
    {"offset": {"line": 6685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6690, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-types%402.2.0/node_modules/pg-types/index.js"],"sourcesContent":["var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n"],"names":[],"mappings":"AAAA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,QAAQ,aAAa,GAAG;AACxB,QAAQ,aAAa,GAAG;AACxB,QAAQ,WAAW,GAAG;AACtB,QAAQ,QAAQ,GAAG;AAEnB,IAAI,cAAc;IAChB,MAAM,CAAC;IACP,QAAQ,CAAC;AACX;AAEA,0BAA0B;AAC1B,SAAS,QAAS,GAAG;IACnB,OAAO,OAAO;AAChB;;AAEA,kEAAkE;AAClE,oCAAoC;AACpC,4DAA4D;AAC5D,2DAA2D;AAC3D,SAAS,cAAe,GAAG,EAAE,MAAM;IACjC,SAAS,UAAU;IACnB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;QACxB,OAAO;IACT;IACA,OAAO,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI;AACrC;;AAEA,SAAS,cAAe,GAAG,EAAE,MAAM,EAAE,OAAO;IAC1C,IAAG,OAAO,UAAU,YAAY;QAC9B,UAAU;QACV,SAAS;IACX;IACA,WAAW,CAAC,OAAO,CAAC,IAAI,GAAG;AAC7B;;AAEA,YAAY,IAAI,CAAC,SAAS,GAAG,EAAE,SAAS;IACtC,YAAY,IAAI,CAAC,IAAI,GAAG;AAC1B;AAEA,cAAc,IAAI,CAAC,SAAS,GAAG,EAAE,SAAS;IACxC,YAAY,MAAM,CAAC,IAAI,GAAG;AAC5B","ignoreList":[0]}},
    {"offset": {"line": 6733, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6738, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/defaults.js"],"sourcesContent":["'use strict'\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  // name of database to connect\n  database: undefined,\n\n  // database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n\n  // database port\n  port: 5432,\n\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n\n  client_encoding: '',\n\n  ssl: false,\n\n  application_name: undefined,\n\n  fallback_application_name: undefined,\n\n  options: undefined,\n\n  parseInputDatesAsUTC: false,\n\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n\n  // Abort any statement that waits longer than the specified duration in milliseconds while attempting to acquire a lock.\n  // false=unlimited\n  lock_timeout: false,\n\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n\n  connect_timeout: 0,\n\n  keepalives: 1,\n\n  keepalives_idle: 0,\n}\n\nvar pgTypes = require('pg-types')\n// save default parsers\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text')\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')\n\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger)\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray)\n})\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG;IACf,uCAAuC;IACvC,MAAM;IAEN,uBAAuB;IACvB,MAAM,6EAAsD,QAAQ,GAAG,CAAC,IAAI;IAE5E,8BAA8B;IAC9B,UAAU;IAEV,2BAA2B;IAC3B,UAAU;IAEV,yFAAyF;IACzF,yGAAyG;IACzG,0BAA0B;IAC1B,kBAAkB;IAElB,gBAAgB;IAChB,MAAM;IAEN,iEAAiE;IACjE,yCAAyC;IACzC,MAAM;IAEN,qBAAqB;IACrB,QAAQ;IAER,uEAAuE;IAEvE,kDAAkD;IAClD,oCAAoC;IACpC,KAAK;IAEL,+DAA+D;IAC/D,8BAA8B;IAC9B,mBAAmB;IAEnB,iBAAiB;IAEjB,KAAK;IAEL,kBAAkB;IAElB,2BAA2B;IAE3B,SAAS;IAET,sBAAsB;IAEtB,gGAAgG;IAChG,kBAAkB;IAClB,mBAAmB;IAEnB,wHAAwH;IACxH,kBAAkB;IAClB,cAAc;IAEd,2HAA2H;IAC3H,kBAAkB;IAClB,qCAAqC;IAErC,+DAA+D;IAC/D,eAAe;IAEf,iBAAiB;IAEjB,YAAY;IAEZ,iBAAiB;AACnB;AAEA,IAAI;AACJ,uBAAuB;AACvB,IAAI,kBAAkB,QAAQ,aAAa,CAAC,IAAI;AAChD,IAAI,uBAAuB,QAAQ,aAAa,CAAC,MAAM;AAEvD,gEAAgE;AAChE,OAAO,OAAO,CAAC,gBAAgB,CAAC,aAAa,SAAU,GAAG;IACxD,QAAQ,aAAa,CAAC,IAAI,QAAQ,MAAM,QAAQ,aAAa,CAAC,IAAI,UAAU;IAC5E,QAAQ,aAAa,CAAC,MAAM,QAAQ,MAAM,QAAQ,aAAa,CAAC,MAAM,UAAU;AAClF","ignoreList":[0]}},
    {"offset": {"line": 6796, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6801, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/utils.js"],"sourcesContent":["'use strict'\n\nconst defaults = require('./defaults')\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  var result = '{'\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (ArrayBuffer.isView(val[i])) {\n      var item = val[i]\n      if (!(item instanceof Buffer)) {\n        var buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)\n        if (buf.length === item.byteLength) {\n          item = buf\n        } else {\n          item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength)\n        }\n      }\n      result += '\\\\\\\\x' + item.toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null\n  }\n  if (typeof val === 'object') {\n    if (val instanceof Buffer) {\n      return val\n    }\n    if (ArrayBuffer.isView(val)) {\n      var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n      if (buf.length === val.byteLength) {\n        return buf\n      }\n      return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n    }\n    if (val instanceof Date) {\n      if (defaults.parseInputDatesAsUTC) {\n        return dateToStringUTC(val)\n      } else {\n        return dateToString(val)\n      }\n    }\n    if (Array.isArray(val)) {\n      return arrayString(val)\n    }\n\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getDate()).padStart(2, '0') +\n    'T' +\n    String(date.getHours()).padStart(2, '0') +\n    ':' +\n    String(date.getMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getMilliseconds()).padStart(3, '0')\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += String(Math.floor(offset / 60)).padStart(2, '0') + ':' + String(offset % 60).padStart(2, '0')\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getUTCMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getUTCDate()).padStart(2, '0') +\n    'T' +\n    String(date.getUTCHours()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getUTCMilliseconds()).padStart(3, '0')\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nconst escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\nconst escapeLiteral = function (str) {\n  var hasBackslash = false\n  var escaped = \"'\"\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  escapeIdentifier,\n  escapeLiteral,\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6962, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6967, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/crypto/utils-webcrypto.js"],"sourcesContent":["const nodeCrypto = require('crypto')\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle\nconst textEncoder = new TextEncoder()\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length))\n}\n\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string\n    const hash = await subtleCrypto.digest('MD5', data)\n    return Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  var inner = await md5(password + user)\n  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text)\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign'])\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg))\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits'])\n  const params = { name: 'PBKDF2', hash: 'SHA-256', salt: salt, iterations: iterations }\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits'])\n}\n"],"names":[],"mappings":"AAAA,MAAM;AAEN,OAAO,OAAO,GAAG;IACf;IACA;IACA;IACA;IACA;IACA;AACF;AAEA;;;CAGC,GACD,MAAM,YAAY,WAAW,SAAS,IAAI,WAAW,MAAM;AAC3D;;;CAGC,GACD,MAAM,eAAe,UAAU,MAAM;AACrC,MAAM,cAAc,IAAI;AAExB;;;;CAIC,GACD,SAAS,YAAY,MAAM;IACzB,OAAO,UAAU,eAAe,CAAC,OAAO,KAAK,CAAC;AAChD;AAEA,eAAe,IAAI,MAAM;IACvB,IAAI;QACF,OAAO,WAAW,UAAU,CAAC,OAAO,MAAM,CAAC,QAAQ,SAAS,MAAM,CAAC;IACrE,EAAE,OAAO,GAAG;QACV,0FAA0F;QAC1F,wEAAwE;QACxE,gEAAgE;QAChE,MAAM,OAAO,OAAO,WAAW,WAAW,YAAY,MAAM,CAAC,UAAU;QACvE,MAAM,OAAO,MAAM,aAAa,MAAM,CAAC,OAAO;QAC9C,OAAO,MAAM,IAAI,CAAC,IAAI,WAAW,OAC9B,GAAG,CAAC,CAAC,IAAM,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MACtC,IAAI,CAAC;IACV;AACF;AAEA,qGAAqG;AACrG,eAAe,wBAAwB,IAAI,EAAE,QAAQ,EAAE,IAAI;IACzD,IAAI,QAAQ,MAAM,IAAI,WAAW;IACjC,IAAI,QAAQ,MAAM,IAAI,OAAO,MAAM,CAAC;QAAC,OAAO,IAAI,CAAC;QAAQ;KAAK;IAC9D,OAAO,QAAQ;AACjB;AAEA;;;CAGC,GACD,eAAe,OAAO,IAAI;IACxB,OAAO,MAAM,aAAa,MAAM,CAAC,WAAW;AAC9C;AAEA;;;;CAIC,GACD,eAAe,WAAW,SAAS,EAAE,GAAG;IACtC,MAAM,MAAM,MAAM,aAAa,SAAS,CAAC,OAAO,WAAW;QAAE,MAAM;QAAQ,MAAM;IAAU,GAAG,OAAO;QAAC;KAAO;IAC7G,OAAO,MAAM,aAAa,IAAI,CAAC,QAAQ,KAAK,YAAY,MAAM,CAAC;AACjE;AAEA;;;;;CAKC,GACD,eAAe,UAAU,QAAQ,EAAE,IAAI,EAAE,UAAU;IACjD,MAAM,MAAM,MAAM,aAAa,SAAS,CAAC,OAAO,YAAY,MAAM,CAAC,WAAW,UAAU,OAAO;QAAC;KAAa;IAC7G,MAAM,SAAS;QAAE,MAAM;QAAU,MAAM;QAAW,MAAM;QAAM,YAAY;IAAW;IACrF,OAAO,MAAM,aAAa,UAAU,CAAC,QAAQ,KAAK,KAAK,GAAG;QAAC;KAAa;AAC1E","ignoreList":[0]}},
    {"offset": {"line": 7051, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7056, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/crypto/utils-legacy.js"],"sourcesContent":["'use strict'\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\n\nconst nodeCrypto = require('crypto')\n\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest()\n}\n\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256')\n}\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n"],"names":[],"mappings":"AAAA;AACA,gFAAgF;AAChF,mDAAmD;AAEnD,MAAM;AAEN,SAAS,IAAI,MAAM;IACjB,OAAO,WAAW,UAAU,CAAC,OAAO,MAAM,CAAC,QAAQ,SAAS,MAAM,CAAC;AACrE;AAEA,qGAAqG;AACrG,SAAS,wBAAwB,IAAI,EAAE,QAAQ,EAAE,IAAI;IACnD,IAAI,QAAQ,IAAI,WAAW;IAC3B,IAAI,QAAQ,IAAI,OAAO,MAAM,CAAC;QAAC,OAAO,IAAI,CAAC;QAAQ;KAAK;IACxD,OAAO,QAAQ;AACjB;AAEA,SAAS,OAAO,IAAI;IAClB,OAAO,WAAW,UAAU,CAAC,UAAU,MAAM,CAAC,MAAM,MAAM;AAC5D;AAEA,SAAS,WAAW,GAAG,EAAE,GAAG;IAC1B,OAAO,WAAW,UAAU,CAAC,UAAU,KAAK,MAAM,CAAC,KAAK,MAAM;AAChE;AAEA,eAAe,UAAU,QAAQ,EAAE,IAAI,EAAE,UAAU;IACjD,OAAO,WAAW,UAAU,CAAC,UAAU,MAAM,YAAY,IAAI;AAC/D;AAEA,OAAO,OAAO,GAAG;IACf;IACA,aAAa,WAAW,WAAW;IACnC;IACA;IACA;IACA;AACF","ignoreList":[0]}},
    {"offset": {"line": 7089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7094, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/crypto/utils.js"],"sourcesContent":["'use strict'\n\nconst useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split('.')[0]) < 15\nif (useLegacyCrypto) {\n  // We are on an old version of Node.js that requires legacy crypto utilities.\n  module.exports = require('./utils-legacy')\n} else {\n  module.exports = require('./utils-webcrypto')\n}\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,kBAAkB,SAAS,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,CAAC,IAAI,IAAI,QAAQ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;AACrH,IAAI,iBAAiB;IACnB,6EAA6E;IAC7E,OAAO,OAAO;AAChB,OAAO;IACL,OAAO,OAAO;AAChB","ignoreList":[0]}},
    {"offset": {"line": 7102, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7107, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/crypto/sasl.js"],"sourcesContent":["'use strict'\nconst crypto = require('./utils')\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nasync function continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n  var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)\n  var clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')\n  var storedKey = await crypto.sha256(clientKey)\n  var clientSignature = await crypto.hmacSha256(storedKey, authMessage)\n  var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')\n  var serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')\n  var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = Buffer.from(serverSignatureBytes).toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7267, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7272, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/type-overrides.js"],"sourcesContent":["'use strict'\n\nvar types = require('pg-types')\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types\n  this.text = {}\n  this.binary = {}\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text':\n      return this.text\n    case 'binary':\n      return this.binary\n    default:\n      return {}\n  }\n}\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format\n    format = 'text'\n  }\n  this.getOverrides(format)[oid] = parseFn\n}\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text'\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format)\n}\n\nmodule.exports = TypeOverrides\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AAEJ,SAAS,cAAc,SAAS;IAC9B,IAAI,CAAC,MAAM,GAAG,aAAa;IAC3B,IAAI,CAAC,IAAI,GAAG,CAAC;IACb,IAAI,CAAC,MAAM,GAAG,CAAC;AACjB;AAEA,cAAc,SAAS,CAAC,YAAY,GAAG,SAAU,MAAM;IACrD,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,CAAC,IAAI;QAClB,KAAK;YACH,OAAO,IAAI,CAAC,MAAM;QACpB;YACE,OAAO,CAAC;IACZ;AACF;AAEA,cAAc,SAAS,CAAC,aAAa,GAAG,SAAU,GAAG,EAAE,MAAM,EAAE,OAAO;IACpE,IAAI,OAAO,WAAW,YAAY;QAChC,UAAU;QACV,SAAS;IACX;IACA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,GAAG;AACnC;AAEA,cAAc,SAAS,CAAC,aAAa,GAAG,SAAU,GAAG,EAAE,MAAM;IAC3D,SAAS,UAAU;IACnB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK;AAC1E;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 7301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7306, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-connection-string%402.7.0/node_modules/pg-connection-string/index.js"],"sourcesContent":["'use strict'\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    result = new URL(str, 'postgres://base')\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n    dummyHost = true\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require('fs') : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7404, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7409, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/connection-parameters.js"],"sourcesContent":["'use strict'\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.lock_timeout = val('lock_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7562, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/result.js"],"sourcesContent":["'use strict'\n\nvar types = require('pg-types')\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n    this._prebuiltEmptyResultObject = null\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = { ...this._prebuiltEmptyResultObject }\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      } else {\n        row[field] = null\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n\n    var row = {}\n\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      row[desc.name] = null\n\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n\n    this._prebuiltEmptyResultObject = { ...row }\n  }\n}\n\nmodule.exports = Result\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7661, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7666, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/query.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\n\nconst Result = require('./result')\nconst utils = require('./utils')\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super()\n\n    config = utils.normalizeQueryConfig(config, values, callback)\n\n    this.text = config.text\n    this.values = config.values\n    this.rows = config.rows\n    this.types = config.types\n    this.name = config.name\n    this.queryMode = config.queryMode\n    this.binary = config.binary\n    // use unique portal name each time\n    this.portal = config.portal || ''\n    this.callback = config.callback\n    this._rowMode = config.rowMode\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback)\n    }\n    this._result = new Result(this._rowMode, this.types)\n\n    // potential for multiple results\n    this._results = this._result\n    this._canceledDueToError = false\n  }\n\n  requiresPreparation() {\n    if (this.queryMode === 'extended') {\n      return true\n    }\n\n    // named queries must always be prepared\n    if (this.name) {\n      return true\n    }\n    // always prepare if there are max number of rows expected per\n    // portal execution\n    if (this.rows) {\n      return true\n    }\n    // don't prepare empty text queries\n    if (!this.text) {\n      return false\n    }\n    // prepare if there are values\n    if (!this.values) {\n      return false\n    }\n    return this.values.length > 0\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result]\n      }\n      this._result = new Result(this._rowMode, this._result._types)\n      this._results.push(this._result)\n    }\n  }\n\n  // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n  handleRowDescription(msg) {\n    this._checkForMultirow()\n    this._result.addFields(msg.fields)\n    this._accumulateRows = this.callback || !this.listeners('row').length\n  }\n\n  handleDataRow(msg) {\n    let row\n\n    if (this._canceledDueToError) {\n      return\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields)\n    } catch (err) {\n      this._canceledDueToError = err\n      return\n    }\n\n    this.emit('row', row, this._result)\n    if (this._accumulateRows) {\n      this._result.addRow(row)\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow()\n    this._result.addCommandComplete(msg)\n    // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the intial sync call\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError\n      this._canceledDueToError = false\n    }\n    // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n    if (this.callback) {\n      return this.callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con)\n    }\n    if (this.callback) {\n      try {\n        this.callback(null, this._results)\n      } catch (err) {\n        process.nextTick(() => {\n          throw err\n        })\n      }\n    }\n    this.emit('end', this._results)\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    }\n    const previous = connection.parsedStatements[this.name]\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n    }\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array')\n    }\n    if (this.requiresPreparation()) {\n      this.prepare(connection)\n    } else {\n      connection.query(this.text)\n    }\n    return null\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name]\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows)\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows,\n    })\n    // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n    if (!rows) {\n      connection.sync()\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush()\n    }\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  prepare(connection) {\n    // TODO refactor this poor encapsulation\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types,\n      })\n    }\n\n    // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue,\n      })\n    } catch (err) {\n      this.handleError(err, connection)\n      return\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || '',\n    })\n\n    this._getRows(connection, this.rows)\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined')\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  handleCopyData(msg, connection) {\n    // noop\n  }\n}\n\nmodule.exports = Query\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7878, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7883, "column": 0}, "map": {"version":3,"file":"messages.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/messages.ts"],"sourcesContent":["export type Mode = 'text' | 'binary'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport interface BackendMessage {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Buffer\n  ) {}\n}\n\nexport class CopyResponse {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode\n  ) {}\n}\n\nexport class RowDescriptionMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string\n  ) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name: MessageName = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Buffer\n  ) {}\n}\n\nexport class BackendKeyDataMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number\n  ) {}\n}\n\nexport class NotificationResponseMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string\n  ) {}\n}\n\nexport class ReadyForQueryMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string\n  ) {}\n}\n\nexport class CommandCompleteMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string\n  ) {}\n}\n\nexport class DataRowMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: any[]\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8044, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8049, "column": 0}, "map": {"version":3,"file":"buffer-writer.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/buffer-writer.ts"],"sourcesContent":["//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8135, "column": 0}, "map": {"version":3,"file":"serializer.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/serializer.ts"],"sourcesContent":["import { Writer } from './buffer-writer'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Buffer => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Buffer => {\n  const response = Buffer.allocUnsafe(8)\n  response.writeInt32BE(8, 0)\n  response.writeInt32BE(80877103, 4)\n  return response\n}\n\nconst password = (password: string): Buffer => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Buffer => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyArray: any[] = []\n\nconst parse = (query: ParseOpts): Buffer => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name || ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n\n  const types = query.types || emptyArray\n\n  var len = types.length\n\n  var buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i])\n  }\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: any, index: number) => any\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: any[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length)\n      paramWriter.add(mappedVal)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Buffer => {\n  // normalize config\n  const portal = config.portal || ''\n  const statement = config.statement || ''\n  const binary = config.binary || false\n  const values = config.values || emptyArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\n\nconst execute = (config?: ExecOpts): Buffer => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal || ''\n  const rows = config.rows || 0\n\n  const portalLength = Buffer.byteLength(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len)\n  buff[0] = code.execute\n  buff.writeInt32BE(len, 1)\n  buff.write(portal, 5, 'utf-8')\n  buff[portalLength + 5] = 0 // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4)\n  return buff\n}\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n  const buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32BE(16, 0)\n  buffer.writeInt16BE(1234, 4)\n  buffer.writeInt16BE(5678, 6)\n  buffer.writeInt32BE(processID, 8)\n  buffer.writeInt32BE(secretKey, 12)\n  return buffer\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n  const stringLen = Buffer.byteLength(string)\n  const len = 4 + stringLen + 1\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len)\n  buffer[0] = code\n  buffer.writeInt32BE(len, 1)\n  buffer.write(string, 5, 'utf-8')\n  buffer[len] = 0 // null terminate cString\n  return buffer\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Buffer => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n    : msg.type === 'P'\n    ? emptyDescribePortal\n    : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Buffer => {\n  const text = `${msg.type}${msg.name || ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: Buffer): Buffer => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Buffer => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8338, "column": 0}, "map": {"version":3,"file":"buffer-reader.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/buffer-reader.ts"],"sourcesContent":["const emptyBuffer = Buffer.allocUnsafe(0)\n\nexport class BufferReader {\n  private buffer: Buffer = emptyBuffer\n\n  // TODO(bmc): support non-utf8 encoding?\n  private encoding: string = 'utf-8'\n\n  constructor(private offset: number = 0) {}\n\n  public setBuffer(offset: number, buffer: Buffer): void {\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  public int16(): number {\n    const result = this.buffer.readInt16BE(this.offset)\n    this.offset += 2\n    return result\n  }\n\n  public byte(): number {\n    const result = this.buffer[this.offset]\n    this.offset++\n    return result\n  }\n\n  public int32(): number {\n    const result = this.buffer.readInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public uint32(): number {\n    const result = this.buffer.readUInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n\n  public cstring(): string {\n    const start = this.offset\n    let end = start\n    while (this.buffer[end++] !== 0) {}\n    this.offset = end\n    return this.buffer.toString(this.encoding, start, end - 1)\n  }\n\n  public bytes(length: number): Buffer {\n    const result = this.buffer.slice(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAEzC,MAAa,YAAY;IAMvB,YAAoB,SAAiB,CAAC,CAAA;QAAlB,IAAA,CAAA,MAAM,GAAN,MAAM,CAAY;QAL9B,IAAA,CAAA,MAAM,GAAW,WAAW,CAAA;QAEpC,wCAAwC;QAChC,IAAA,CAAA,QAAQ,GAAW,OAAO,CAAA;IAEO,CAAC;IAEnC,SAAS,CAAC,MAAc,EAAE,MAAc,EAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,KAAK,GAAA;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,IAAI,GAAA;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK,GAAA;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,GAAA;QACX,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACpD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,CAAC,MAAc,EAAA;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACrF,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,OAAO,GAAA;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,IAAI,GAAG,GAAG,KAAK,CAAA;QACf,MAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAE,CAAA,CAAE;QACnC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAc,EAAA;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACnE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAxDD,QAAA,YAAA,GAAA,aAwDC","ignoreList":[0]}},
    {"offset": {"line": 8394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8399, "column": 0}, "map": {"version":3,"file":"parser.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/parser.ts"],"sourcesContent":["import { TransformOptions } from 'stream'\nimport {\n  Mode,\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  AuthenticationMD5Password,\n  NoticeMessage,\n} from './messages'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: Buffer\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\ntype StreamOptions = TransformOptions & {\n  mode: Mode\n}\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  private buffer: Buffer = emptyBuffer\n  private bufferLength: number = 0\n  private bufferOffset: number = 0\n  private reader = new BufferReader()\n  private mode: Mode\n\n  constructor(opts?: StreamOptions) {\n    if (opts?.mode === 'binary') {\n      throw new Error('Binary mode not supported yet')\n    }\n    this.mode = opts?.mode || 'text'\n  }\n\n  public parse(buffer: Buffer, callback: MessageCallback) {\n    this.mergeBuffer(buffer)\n    const bufferFullLength = this.bufferOffset + this.bufferLength\n    let offset = this.bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.buffer[offset]\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.buffer.readUInt32BE(offset + CODE_LENGTH)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer)\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.buffer = emptyBuffer\n      this.bufferLength = 0\n      this.bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.bufferLength = bufferFullLength - offset\n      this.bufferOffset = offset\n    }\n  }\n\n  private mergeBuffer(buffer: Buffer): void {\n    if (this.bufferLength > 0) {\n      const newLength = this.bufferLength + buffer.byteLength\n      const newFullLength = newLength + this.bufferOffset\n      if (newFullLength > this.buffer.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: Buffer\n        if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.buffer.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = Buffer.allocUnsafe(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength)\n        this.buffer = newBuffer\n        this.bufferOffset = 0\n      }\n      // Concat the new buffer with the remaining one\n      buffer.copy(this.buffer, this.bufferOffset + this.bufferLength)\n      this.bufferLength = newLength\n    } else {\n      this.buffer = buffer\n      this.bufferOffset = 0\n      this.bufferLength = buffer.byteLength\n    }\n  }\n\n  private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError('received invalid response: ' + code.toString(16), length, 'error')\n    }\n  }\n\n  private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const status = this.reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const text = this.reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  private parseCopyData(offset: number, length: number, bytes: Buffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, chunk)\n  }\n\n  private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const isBinary = this.reader.byte() !== 0\n    const columnCount = this.reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.reader.int16()\n    }\n    return message\n  }\n\n  private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processId = this.reader.int32()\n    const channel = this.reader.cstring()\n    const payload = this.reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.parseField()\n    }\n    return message\n  }\n\n  private parseField(): Field {\n    const name = this.reader.cstring()\n    const tableID = this.reader.uint32()\n    const columnID = this.reader.int16()\n    const dataTypeID = this.reader.uint32()\n    const dataTypeSize = this.reader.int16()\n    const dataTypeModifier = this.reader.int32()\n    const mode = this.reader.int16() === 0 ? 'text' : 'binary'\n    return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode)\n  }\n\n  private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const parameterCount = this.reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.reader.int32()\n    }\n    return message\n  }\n\n  private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const fields: any[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const name = this.reader.cstring()\n    const value = this.reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processID = this.reader.int32()\n    const secretKey = this.reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const code = this.reader.int32()\n    // TODO(bmc): maybe better types here\n    const message: BackendMessage & any = {\n      name: 'authenticationOk',\n      length,\n    }\n\n    switch (code) {\n      case 0: // AuthenticationOk\n        break\n      case 3: // AuthenticationCleartextPassword\n        if (message.length === 8) {\n          message.name = 'authenticationCleartextPassword'\n        }\n        break\n      case 5: // AuthenticationMD5Password\n        if (message.length === 12) {\n          message.name = 'authenticationMD5Password'\n          const salt = this.reader.bytes(4)\n          return new AuthenticationMD5Password(length, salt)\n        }\n        break\n      case 10: // AuthenticationSASL\n        message.name = 'authenticationSASL'\n        message.mechanisms = []\n        let mechanism: string\n        do {\n          mechanism = this.reader.cstring()\n\n          if (mechanism) {\n            message.mechanisms.push(mechanism)\n          }\n        } while (mechanism)\n        break\n      case 11: // AuthenticationSASLContinue\n        message.name = 'authenticationSASLContinue'\n        message.data = this.reader.string(length - 8)\n        break\n      case 12: // AuthenticationSASLFinal\n        message.name = 'authenticationSASLFinal'\n        message.data = this.reader.string(length - 8)\n        break\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n    return message\n  }\n\n  private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.reader.cstring()\n      fieldType = this.reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8700, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8705, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-protocol%401.7.1/node_modules/pg-protocol/src/index.ts"],"sourcesContent":["import { DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n"],"names":[],"mappings":";;;;;AAAA,MAAA,mCAA0C;AAUtB,OAAA,cAAA,CAAA,SAAA,iBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAVX,WAAA,aAAa;IAAA;AAAA,GAUW;AATjC,MAAA,uCAAwC;AAS/B,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OATA,aAAA,SAAS;IAAA;AAAA,GASA;AARlB,MAAA,+BAAkD;AAElD,SAAgB,KAAK,CAAC,MAA6B,EAAE,QAAyB;IAC5E,MAAM,MAAM,GAAG,IAAI,SAAA,MAAM,EAAE,CAAA;IAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,CAAG,CAAD,KAAO,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,CAAG,CAAD,KAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAG,CAAD,MAAQ,EAAE,CAAC,CAAC,CAAA;AACpE,CAAC;AAJD,QAAA,KAAA,GAAA,MAIC","ignoreList":[0]}},
    {"offset": {"line": 8731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8737, "column": 0}, "map": {"version":3,"file":"empty.js","sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-cloudflare%401.1.1/node_modules/pg-cloudflare/src/empty.ts"],"sourcesContent":["// This is an empty module that is served up when outside of a workerd environment\n// See the `exports` field in package.json\nexport default {}\n"],"names":[],"mappings":"AAAA,kFAAkF;AAClF,0CAA0C;;;;uCAC3B,CAAA,CAAE,CAAA","ignoreList":[0]}},
    {"offset": {"line": 8744, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8749, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/stream.js"],"sourcesContent":["const { getStream, getSecureStream } = getStreamFuncs()\n\nmodule.exports = {\n  /**\n   * Get a socket stream compatible with the current runtime environment.\n   * @returns {Duplex}\n   */\n  getStream,\n  /**\n   * Get a TLS secured socket, compatible with the current environment,\n   * using the socket and other settings given in `options`.\n   * @returns {Duplex}\n   */\n  getSecureStream,\n}\n\n/**\n * The stream functions that work in Node.js\n */\nfunction getNodejsStreamFuncs() {\n  function getStream(ssl) {\n    const net = require('net')\n    return new net.Socket()\n  }\n\n  function getSecureStream(options) {\n    var tls = require('tls')\n    return tls.connect(options)\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * The stream functions that work in Cloudflare Workers\n */\nfunction getCloudflareStreamFuncs() {\n  function getStream(ssl) {\n    const { CloudflareSocket } = require('pg-cloudflare')\n    return new CloudflareSocket(ssl)\n  }\n\n  function getSecureStream(options) {\n    options.socket.startTls(options)\n    return options.socket\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * Are we running in a Cloudflare Worker?\n *\n * @returns true if the code is currently running inside a Cloudflare Worker.\n */\nfunction isCloudflareRuntime() {\n  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers\n  // which means that `navigator.userAgent` will be defined.\n  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {\n    return navigator.userAgent === 'Cloudflare-Workers'\n  }\n  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach\n  if (typeof Response === 'function') {\n    const resp = new Response(null, { cf: { thing: true } })\n    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getStreamFuncs() {\n  if (isCloudflareRuntime()) {\n    return getCloudflareStreamFuncs()\n  }\n  return getNodejsStreamFuncs()\n}\n"],"names":[],"mappings":"AAAA,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,GAAG;AAEvC,OAAO,OAAO,GAAG;IACf;;;GAGC,GACD;IACA;;;;GAIC,GACD;AACF;AAEA;;CAEC,GACD,SAAS;IACP,SAAS,UAAU,GAAG;QACpB,MAAM;QACN,OAAO,IAAI,IAAI,MAAM;IACvB;IAEA,SAAS,gBAAgB,OAAO;QAC9B,IAAI;QACJ,OAAO,IAAI,OAAO,CAAC;IACrB;IACA,OAAO;QACL;QACA;IACF;AACF;AAEA;;CAEC,GACD,SAAS;IACP,SAAS,UAAU,GAAG;QACpB,MAAM,EAAE,gBAAgB,EAAE;QAC1B,OAAO,IAAI,iBAAiB;IAC9B;IAEA,SAAS,gBAAgB,OAAO;QAC9B,QAAQ,MAAM,CAAC,QAAQ,CAAC;QACxB,OAAO,QAAQ,MAAM;IACvB;IACA,OAAO;QACL;QACA;IACF;AACF;AAEA;;;;CAIC,GACD,SAAS;IACP,0FAA0F;IAC1F,0DAA0D;IAC1D,IAAI,OAAO,cAAc,YAAY,cAAc,QAAQ,OAAO,UAAU,SAAS,KAAK,UAAU;QAClG,OAAO,UAAU,SAAS,KAAK;IACjC;IACA,8FAA8F;IAC9F,IAAI,OAAO,aAAa,YAAY;QAClC,MAAM,OAAO,IAAI,SAAS,MAAM;YAAE,IAAI;gBAAE,OAAO;YAAK;QAAE;QACtD,IAAI,OAAO,KAAK,EAAE,KAAK,YAAY,KAAK,EAAE,KAAK,QAAQ,KAAK,EAAE,CAAC,KAAK,EAAE;YACpE,OAAO;QACT;IACF;IACA,OAAO;AACT;AAEA,SAAS;IACP,IAAI,uBAAuB;QACzB,OAAO;IACT;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 8822, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8827, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/connection.js"],"sourcesContent":["'use strict'\n\nvar EventEmitter = require('events').EventEmitter\n\nconst { parse, serialize } = require('pg-protocol')\nconst { getStream, getSecureStream } = require('./stream')\n\nconst flushBuffer = serialize.flush()\nconst syncBuffer = serialize.sync()\nconst endBuffer = serialize.end()\n\n// TODO(bmc) support binary mode at some point\nclass Connection extends EventEmitter {\n  constructor(config) {\n    super()\n    config = config || {}\n\n    this.stream = config.stream || getStream(config.ssl)\n    if (typeof this.stream === 'function') {\n      this.stream = this.stream(config)\n    }\n\n    this._keepAlive = config.keepAlive\n    this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n    this.lastBuffer = false\n    this.parsedStatements = {}\n    this.ssl = config.ssl || false\n    this._ending = false\n    this._emitMessage = false\n    var self = this\n    this.on('newListener', function (eventName) {\n      if (eventName === 'message') {\n        self._emitMessage = true\n      }\n    })\n  }\n\n  connect(port, host) {\n    var self = this\n\n    this._connecting = true\n    this.stream.setNoDelay(true)\n    this.stream.connect(port, host)\n\n    this.stream.once('connect', function () {\n      if (self._keepAlive) {\n        self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n      }\n      self.emit('connect')\n    })\n\n    const reportStreamError = function (error) {\n      // errors about disconnections should be ignored during disconnect\n      if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n        return\n      }\n      self.emit('error', error)\n    }\n    this.stream.on('error', reportStreamError)\n\n    this.stream.on('close', function () {\n      self.emit('end')\n    })\n\n    if (!this.ssl) {\n      return this.attachListeners(this.stream)\n    }\n\n    this.stream.once('data', function (buffer) {\n      var responseCode = buffer.toString('utf8')\n      switch (responseCode) {\n        case 'S': // Server supports SSL connections, continue with a secure connection\n          break\n        case 'N': // Server does not support SSL connections\n          self.stream.end()\n          return self.emit('error', new Error('The server does not support SSL connections'))\n        default:\n          // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n          self.stream.end()\n          return self.emit('error', new Error('There was an error establishing an SSL connection'))\n      }\n      const options = {\n        socket: self.stream,\n      }\n\n      if (self.ssl !== true) {\n        Object.assign(options, self.ssl)\n\n        if ('key' in self.ssl) {\n          options.key = self.ssl.key\n        }\n      }\n\n      var net = require('net')\n      if (net.isIP && net.isIP(host) === 0) {\n        options.servername = host\n      }\n      try {\n        self.stream = getSecureStream(options)\n      } catch (err) {\n        return self.emit('error', err)\n      }\n      self.attachListeners(self.stream)\n      self.stream.on('error', reportStreamError)\n\n      self.emit('sslconnect')\n    })\n  }\n\n  attachListeners(stream) {\n    parse(stream, (msg) => {\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n      if (this._emitMessage) {\n        this.emit('message', msg)\n      }\n      this.emit(eventName, msg)\n    })\n  }\n\n  requestSsl() {\n    this.stream.write(serialize.requestSsl())\n  }\n\n  startup(config) {\n    this.stream.write(serialize.startup(config))\n  }\n\n  cancel(processID, secretKey) {\n    this._send(serialize.cancel(processID, secretKey))\n  }\n\n  password(password) {\n    this._send(serialize.password(password))\n  }\n\n  sendSASLInitialResponseMessage(mechanism, initialResponse) {\n    this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse))\n  }\n\n  sendSCRAMClientFinalMessage(additionalData) {\n    this._send(serialize.sendSCRAMClientFinalMessage(additionalData))\n  }\n\n  _send(buffer) {\n    if (!this.stream.writable) {\n      return false\n    }\n    return this.stream.write(buffer)\n  }\n\n  query(text) {\n    this._send(serialize.query(text))\n  }\n\n  // send parse message\n  parse(query) {\n    this._send(serialize.parse(query))\n  }\n\n  // send bind message\n  bind(config) {\n    this._send(serialize.bind(config))\n  }\n\n  // send execute message\n  execute(config) {\n    this._send(serialize.execute(config))\n  }\n\n  flush() {\n    if (this.stream.writable) {\n      this.stream.write(flushBuffer)\n    }\n  }\n\n  sync() {\n    this._ending = true\n    this._send(syncBuffer)\n  }\n\n  ref() {\n    this.stream.ref()\n  }\n\n  unref() {\n    this.stream.unref()\n  }\n\n  end() {\n    // 0x58 = 'X'\n    this._ending = true\n    if (!this._connecting || !this.stream.writable) {\n      this.stream.end()\n      return\n    }\n    return this.stream.write(endBuffer, () => {\n      this.stream.end()\n    })\n  }\n\n  close(msg) {\n    this._send(serialize.close(msg))\n  }\n\n  describe(msg) {\n    this._send(serialize.describe(msg))\n  }\n\n  sendCopyFromChunk(chunk) {\n    this._send(serialize.copyData(chunk))\n  }\n\n  endCopyFrom() {\n    this._send(serialize.copyDone())\n  }\n\n  sendCopyFail(msg) {\n    this._send(serialize.copyFail(msg))\n  }\n}\n\nmodule.exports = Connection\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9009, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9014, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/split2%404.2.0/node_modules/split2/index.js"],"sourcesContent":["/*\nCopyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n'use strict'\n\nconst { Transform } = require('stream')\nconst { StringDecoder } = require('string_decoder')\nconst kLast = Symbol('last')\nconst kDecoder = Symbol('decoder')\n\nfunction transform (chunk, enc, cb) {\n  let list\n  if (this.overflow) { // Line buffer is full. Skip to start of next line.\n    const buf = this[kDecoder].write(chunk)\n    list = buf.split(this.matcher)\n\n    if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.\n\n    // Line ending found. Discard trailing fragment of previous line and reset overflow state.\n    list.shift()\n    this.overflow = false\n  } else {\n    this[kLast] += this[kDecoder].write(chunk)\n    list = this[kLast].split(this.matcher)\n  }\n\n  this[kLast] = list.pop()\n\n  for (let i = 0; i < list.length; i++) {\n    try {\n      push(this, this.mapper(list[i]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  this.overflow = this[kLast].length > this.maxLength\n  if (this.overflow && !this.skipOverflow) {\n    cb(new Error('maximum buffer reached'))\n    return\n  }\n\n  cb()\n}\n\nfunction flush (cb) {\n  // forward any gibberish left in there\n  this[kLast] += this[kDecoder].end()\n\n  if (this[kLast]) {\n    try {\n      push(this, this.mapper(this[kLast]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  cb()\n}\n\nfunction push (self, val) {\n  if (val !== undefined) {\n    self.push(val)\n  }\n}\n\nfunction noop (incoming) {\n  return incoming\n}\n\nfunction split (matcher, mapper, options) {\n  // Set defaults for any arguments not supplied.\n  matcher = matcher || /\\r?\\n/\n  mapper = mapper || noop\n  options = options || {}\n\n  // Test arguments explicitly.\n  switch (arguments.length) {\n    case 1:\n      // If mapper is only argument.\n      if (typeof matcher === 'function') {\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If options is only argument.\n      } else if (typeof matcher === 'object' && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {\n        options = matcher\n        matcher = /\\r?\\n/\n      }\n      break\n\n    case 2:\n      // If mapper and options are arguments.\n      if (typeof matcher === 'function') {\n        options = mapper\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If matcher and options are arguments.\n      } else if (typeof mapper === 'object') {\n        options = mapper\n        mapper = noop\n      }\n  }\n\n  options = Object.assign({}, options)\n  options.autoDestroy = true\n  options.transform = transform\n  options.flush = flush\n  options.readableObjectMode = true\n\n  const stream = new Transform(options)\n\n  stream[kLast] = ''\n  stream[kDecoder] = new StringDecoder('utf8')\n  stream.matcher = matcher\n  stream.mapper = mapper\n  stream.maxLength = options.maxLength\n  stream.skipOverflow = options.skipOverflow || false\n  stream.overflow = false\n  stream._destroy = function (err, cb) {\n    // Weird Node v12 bug that we need to work around\n    this._writableState.errorEmitted = false\n    cb(err)\n  }\n\n  return stream\n}\n\nmodule.exports = split\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9138, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pgpass%401.0.5/node_modules/pgpass/lib/helper.js"],"sourcesContent":["'use strict';\n\nvar path = require('path')\n  , Stream = require('stream').Stream\n  , split = require('split2')\n  , util = require('util')\n  , defaultPort = 5432\n  , isWin = (process.platform === 'win32')\n  , warnStream = process.stderr\n;\n\n\nvar S_IRWXG = 56     //    00070(8)\n  , S_IRWXO = 7      //    00007(8)\n  , S_IFMT  = 61440  // 00170000(8)\n  , S_IFREG = 32768  //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return ((mode & S_IFMT) == S_IFREG);\n}\n\nvar fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[ nrOfFields -1 ];\n\n\nfunction warn() {\n    var isWritable = (\n        warnStream instanceof Stream &&\n          true === warnStream.writable\n    );\n\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write( util.format.apply(util, args) );\n    }\n}\n\n\nObject.defineProperty(module.exports, 'isWin', {\n    get : function() {\n        return isWin;\n    } ,\n    set : function(val) {\n        isWin = val;\n    }\n});\n\n\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\n\nmodule.exports.getFileName = function(rawEnv){\n    var env = rawEnv || process.env;\n    var file = env.PGPASSFILE || (\n        isWin ?\n          path.join( env.APPDATA || './' , 'postgresql', 'pgpass.conf' ) :\n          path.join( env.HOME || './', '.pgpass' )\n    );\n    return file;\n};\n\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n        return false;\n    }\n\n    if (isWin) {\n        return true;\n    }\n\n    fname = fname || '<unkn>';\n\n    if (! isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */\n        warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n\n    return true;\n};\n\n\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){\n        if (idx == 1) {\n            // the port\n            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {\n                return prev && true;\n            }\n        }\n        return prev && (\n            entry[field] === '*' ||\n              entry[field] === connInfo[field]\n        );\n    }, true);\n};\n\n\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(split());\n\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n\n    var onEnd = function() {\n        stream.destroy();\n        cb(pass);\n    };\n\n    var onErr = function(err) {\n        stream.destroy();\n        warn('WARNING: error on reading file: %s', err);\n        cb(undefined);\n    };\n\n    stream.on('error', onErr);\n    lineStream\n        .on('data', onLine)\n        .on('end', onEnd)\n        .on('error', onErr)\n    ;\n\n};\n\n\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n\n    var curChar = '';\n    var prevChar = '';\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n\n        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n            field = field.replace(/\\\\([:\\\\])/g, '$1');\n        }\n\n        obj[ fieldNames[idx] ] = field;\n    };\n\n    for (var i = 0 ; i < line.length-1 ; i += 1) {\n        curChar = line.charAt(i+1);\n        prevChar = line.charAt(i);\n\n        isLastField = (fieldIdx == nrOfFields-1);\n\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n\n        if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n            addToObj(fieldIdx, startIdx, i+1);\n\n            startIdx = i+2;\n            fieldIdx += 1;\n        }\n    }\n\n    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;\n\n    return obj;\n};\n\n\nvar isValidEntry = module.exports.isValidEntry = function(entry){\n    var rules = {\n        // host\n        0 : function(x){\n            return x.length > 0;\n        } ,\n        // port\n        1 : function(x){\n            if (x === '*') {\n                return true;\n            }\n            x = Number(x);\n            return (\n                isFinite(x) &&\n                  x > 0 &&\n                  x < 9007199254740992 &&\n                  Math.floor(x) === x\n            );\n        } ,\n        // database\n        2 : function(x){\n            return x.length > 0;\n        } ,\n        // username\n        3 : function(x){\n            return x.length > 0;\n        } ,\n        // password\n        4 : function(x){\n            return x.length > 0;\n        }\n    };\n\n    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {\n        var rule = rules[idx];\n        var value = entry[ fieldNames[idx] ] || '';\n\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n"],"names":[],"mappings":"AAAA;AAEA,IAAI,yEACA,SAAS,qEAAkB,MAAM,EACjC,gIACA,yEACA,cAAc,MACd,QAAS,QAAQ,QAAQ,KAAK,SAC9B,aAAa,QAAQ,MAAM;AAI/B,IAAI,UAAU,GAAO,cAAc;EAC/B,UAAU,EAAO,cAAc;EAC/B,SAAU,MAAO,cAAc;EAC/B,UAAU,MAAO,cAAc;;AAEnC,SAAS,UAAU,IAAI;IACnB,OAAQ,CAAC,OAAO,MAAM,KAAK;AAC/B;AAEA,IAAI,aAAa;IAAE;IAAQ;IAAQ;IAAY;IAAQ;CAAY;AACnE,IAAI,aAAa,WAAW,MAAM;AAClC,IAAI,UAAU,UAAU,CAAE,aAAY,EAAG;AAGzC,SAAS;IACL,IAAI,aACA,sBAAsB,UACpB,SAAS,WAAW,QAAQ;IAGlC,IAAI,YAAY;QACZ,IAAI,OAAO,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,MAAM,CAAC;QACxD,WAAW,KAAK,CAAE,KAAK,MAAM,CAAC,KAAK,CAAC,MAAM;IAC9C;AACJ;AAGA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,SAAS;IAC3C,KAAM;QACF,OAAO;IACX;IACA,KAAM,SAAS,GAAG;QACd,QAAQ;IACZ;AACJ;AAGA,OAAO,OAAO,CAAC,MAAM,GAAG,SAAS,MAAM;IACnC,IAAI,MAAM;IACV,aAAa;IACb,OAAO;AACX;AAEA,OAAO,OAAO,CAAC,WAAW,GAAG,SAAS,MAAM;IACxC,IAAI,MAAM,UAAU,QAAQ,GAAG;IAC/B,IAAI,OAAO,IAAI,UAAU,IAAI,CACzB,QACE,KAAK,IAAI,CAAE,IAAI,OAAO,IAAI,MAAO,cAAc,iBAC/C,KAAK,IAAI,CAAE,IAAI,IAAI,IAAI,MAAM,UACnC;IACA,OAAO;AACX;AAEA,OAAO,OAAO,CAAC,SAAS,GAAG,SAAS,KAAK,EAAE,KAAK;IAC5C,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,eAAe;QACjE,OAAO;IACX;IAEA,IAAI,OAAO;QACP,OAAO;IACX;IAEA,QAAQ,SAAS;IAEjB,IAAI,CAAE,UAAU,MAAM,IAAI,GAAG;QACzB,KAAK,mDAAmD;QACxD,OAAO;IACX;IAEA,IAAI,MAAM,IAAI,GAAG,CAAC,UAAU,OAAO,GAAG;QAClC,+DAA+D,GAC/D,KAAK,oGAAoG;QACzG,OAAO;IACX;IAEA,OAAO;AACX;AAGA,IAAI,UAAU,OAAO,OAAO,CAAC,KAAK,GAAG,SAAS,QAAQ,EAAE,KAAK;IACzD,OAAO,WAAW,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,SAAS,IAAI,EAAE,KAAK,EAAE,GAAG;QAC3D,IAAI,OAAO,GAAG;YACV,WAAW;YACX,IAAK,OAAQ,QAAQ,CAAC,MAAM,IAAI,iBAAkB,OAAQ,KAAK,CAAC,MAAM,GAAK;gBACvE,OAAO,QAAQ;YACnB;QACJ;QACA,OAAO,QAAQ,CACX,KAAK,CAAC,MAAM,KAAK,OACf,KAAK,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,AACtC;IACJ,GAAG;AACP;AAGA,OAAO,OAAO,CAAC,WAAW,GAAG,SAAS,QAAQ,EAAE,MAAM,EAAE,EAAE;IACtD,IAAI;IACJ,IAAI,aAAa,OAAO,IAAI,CAAC;IAE7B,SAAS,OAAO,IAAI;QAChB,IAAI,QAAQ,UAAU;QACtB,IAAI,SAAS,aAAa,UAAU,QAAQ,UAAU,QAAQ;YAC1D,OAAO,KAAK,CAAC,QAAQ;YACrB,WAAW,GAAG,IAAI,wCAAwC;QAC9D;IACJ;IAEA,IAAI,QAAQ;QACR,OAAO,OAAO;QACd,GAAG;IACP;IAEA,IAAI,QAAQ,SAAS,GAAG;QACpB,OAAO,OAAO;QACd,KAAK,sCAAsC;QAC3C,GAAG;IACP;IAEA,OAAO,EAAE,CAAC,SAAS;IACnB,WACK,EAAE,CAAC,QAAQ,QACX,EAAE,CAAC,OAAO,OACV,EAAE,CAAC,SAAS;AAGrB;AAGA,IAAI,YAAY,OAAO,OAAO,CAAC,SAAS,GAAG,SAAS,IAAI;IACpD,IAAI,KAAK,MAAM,GAAG,MAAM,KAAK,KAAK,CAAC,UAAU;QACzC,OAAO;IACX;IAEA,IAAI,UAAU;IACd,IAAI,WAAW;IACf,IAAI,WAAW;IACf,IAAI,WAAW;IACf,IAAI,SAAS;IACb,IAAI,MAAM,CAAC;IACX,IAAI,cAAc;IAClB,IAAI,WAAW,SAAS,GAAG,EAAE,EAAE,EAAE,EAAE;QAC/B,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI;QAE/B,IAAI,CAAE,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,uBAAuB;YACjE,QAAQ,MAAM,OAAO,CAAC,cAAc;QACxC;QAEA,GAAG,CAAE,UAAU,CAAC,IAAI,CAAE,GAAG;IAC7B;IAEA,IAAK,IAAI,IAAI,GAAI,IAAI,KAAK,MAAM,GAAC,GAAI,KAAK,EAAG;QACzC,UAAU,KAAK,MAAM,CAAC,IAAE;QACxB,WAAW,KAAK,MAAM,CAAC;QAEvB,cAAe,YAAY,aAAW;QAEtC,IAAI,aAAa;YACb,SAAS,UAAU;YACnB;QACJ;QAEA,IAAI,KAAK,KAAK,WAAW,OAAO,aAAa,MAAM;YAC/C,SAAS,UAAU,UAAU,IAAE;YAE/B,WAAW,IAAE;YACb,YAAY;QAChB;IACJ;IAEA,MAAM,AAAE,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,aAAe,MAAM;IAEzD,OAAO;AACX;AAGA,IAAI,eAAe,OAAO,OAAO,CAAC,YAAY,GAAG,SAAS,KAAK;IAC3D,IAAI,QAAQ;QACR,OAAO;QACP,GAAI,SAAS,CAAC;YACV,OAAO,EAAE,MAAM,GAAG;QACtB;QACA,OAAO;QACP,GAAI,SAAS,CAAC;YACV,IAAI,MAAM,KAAK;gBACX,OAAO;YACX;YACA,IAAI,OAAO;YACX,OACI,SAAS,MACP,IAAI,KACJ,IAAI,oBACJ,KAAK,KAAK,CAAC,OAAO;QAE5B;QACA,WAAW;QACX,GAAI,SAAS,CAAC;YACV,OAAO,EAAE,MAAM,GAAG;QACtB;QACA,WAAW;QACX,GAAI,SAAS,CAAC;YACV,OAAO,EAAE,MAAM,GAAG;QACtB;QACA,WAAW;QACX,GAAI,SAAS,CAAC;YACV,OAAO,EAAE,MAAM,GAAG;QACtB;IACJ;IAEA,IAAK,IAAI,MAAM,GAAI,MAAM,WAAW,MAAM,EAAG,OAAO,EAAG;QACnD,IAAI,OAAO,KAAK,CAAC,IAAI;QACrB,IAAI,QAAQ,KAAK,CAAE,UAAU,CAAC,IAAI,CAAE,IAAI;QAExC,IAAI,MAAM,KAAK;QACf,IAAI,CAAC,KAAK;YACN,OAAO;QACX;IACJ;IAEA,OAAO;AACX","ignoreList":[0]}},
    {"offset": {"line": 9305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9310, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pgpass%401.0.5/node_modules/pgpass/lib/index.js"],"sourcesContent":["'use strict';\n\nvar path = require('path')\n  , fs = require('fs')\n  , helper = require('./helper.js')\n;\n\n\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    \n    fs.stat(file, function(err, stat){\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n\n        var st = fs.createReadStream(file);\n\n        helper.getPassword(connInfo, st, cb);\n    });\n};\n\nmodule.exports.warnTo = helper.warnTo;\n"],"names":[],"mappings":"AAAA;AAEA,IAAI,yEACA,mEACA;AAIJ,OAAO,OAAO,GAAG,SAAS,QAAQ,EAAE,EAAE;IAClC,IAAI,OAAO,OAAO,WAAW;IAE7B,GAAG,IAAI,CAAC,MAAM,SAAS,GAAG,EAAE,IAAI;QAC5B,IAAI,OAAO,CAAC,OAAO,SAAS,CAAC,MAAM,OAAO;YACtC,OAAO,GAAG;QACd;QAEA,IAAI,KAAK,GAAG,gBAAgB,CAAC;QAE7B,OAAO,WAAW,CAAC,UAAU,IAAI;IACrC;AACJ;AAEA,OAAO,OAAO,CAAC,MAAM,GAAG,OAAO,MAAM","ignoreList":[0]}},
    {"offset": {"line": 9323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9328, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/client.js"],"sourcesContent":["'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar utils = require('./utils')\nvar sasl = require('./crypto/sasl')\nvar TypeOverrides = require('./type-overrides')\n\nvar ConnectionParameters = require('./connection-parameters')\nvar Query = require('./query')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nconst crypto = require('./crypto/utils')\n\nclass Client extends EventEmitter {\n  constructor(config) {\n    super()\n\n    this.connectionParameters = new ConnectionParameters(config)\n    this.user = this.connectionParameters.user\n    this.database = this.connectionParameters.database\n    this.port = this.connectionParameters.port\n    this.host = this.connectionParameters.host\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: this.connectionParameters.password,\n    })\n\n    this.replication = this.connectionParameters.replication\n\n    var c = config || {}\n\n    this._Promise = c.Promise || global.Promise\n    this._types = new TypeOverrides(c.types)\n    this._ending = false\n    this._ended = false\n    this._connecting = false\n    this._connected = false\n    this._connectionError = false\n    this._queryable = true\n\n    this.connection =\n      c.connection ||\n      new Connection({\n        stream: c.stream,\n        ssl: this.connectionParameters.ssl,\n        keepAlive: c.keepAlive || false,\n        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n        encoding: this.connectionParameters.client_encoding || 'utf8',\n      })\n    this.queryQueue = []\n    this.binary = c.binary || defaults.binary\n    this.processID = null\n    this.secretKey = null\n    this.ssl = this.connectionParameters.ssl || false\n    // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n  }\n\n  _errorAllQueries(err) {\n    const enqueueError = (query) => {\n      process.nextTick(() => {\n        query.handleError(err, this.connection)\n      })\n    }\n\n    if (this.activeQuery) {\n      enqueueError(this.activeQuery)\n      this.activeQuery = null\n    }\n\n    this.queryQueue.forEach(enqueueError)\n    this.queryQueue.length = 0\n  }\n\n  _connect(callback) {\n    var self = this\n    var con = this.connection\n    this._connectionCallback = callback\n\n    if (this._connecting || this._connected) {\n      const err = new Error('Client has already been connected. You cannot reuse a client.')\n      process.nextTick(() => {\n        callback(err)\n      })\n      return\n    }\n    this._connecting = true\n\n    if (this._connectionTimeoutMillis > 0) {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        con._ending = true\n        con.stream.destroy(new Error('timeout expired'))\n      }, this._connectionTimeoutMillis)\n    }\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send startup message\n    con.on('connect', function () {\n      if (self.ssl) {\n        con.requestSsl()\n      } else {\n        con.startup(self.getStartupConf())\n      }\n    })\n\n    con.on('sslconnect', function () {\n      con.startup(self.getStartupConf())\n    })\n\n    this._attachListeners(con)\n\n    con.once('end', () => {\n      const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n      clearTimeout(this.connectionTimeoutHandle)\n      this._errorAllQueries(error)\n      this._ended = true\n\n      if (!this._ending) {\n        // if the connection is ended without us calling .end()\n        // on this client then we have an unexpected disconnection\n        // treat this as an error unless we've already emitted an error\n        // during connection.\n        if (this._connecting && !this._connectionError) {\n          if (this._connectionCallback) {\n            this._connectionCallback(error)\n          } else {\n            this._handleErrorEvent(error)\n          }\n        } else if (!this._connectionError) {\n          this._handleErrorEvent(error)\n        }\n      }\n\n      process.nextTick(() => {\n        this.emit('end')\n      })\n    })\n  }\n\n  connect(callback) {\n    if (callback) {\n      this._connect(callback)\n      return\n    }\n\n    return new this._Promise((resolve, reject) => {\n      this._connect((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  _attachListeners(con) {\n    // password request handling\n    con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this))\n    // password request handling\n    con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this))\n    // password request handling (SASL)\n    con.on('authenticationSASL', this._handleAuthSASL.bind(this))\n    con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this))\n    con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this))\n    con.on('backendKeyData', this._handleBackendKeyData.bind(this))\n    con.on('error', this._handleErrorEvent.bind(this))\n    con.on('errorMessage', this._handleErrorMessage.bind(this))\n    con.on('readyForQuery', this._handleReadyForQuery.bind(this))\n    con.on('notice', this._handleNotice.bind(this))\n    con.on('rowDescription', this._handleRowDescription.bind(this))\n    con.on('dataRow', this._handleDataRow.bind(this))\n    con.on('portalSuspended', this._handlePortalSuspended.bind(this))\n    con.on('emptyQuery', this._handleEmptyQuery.bind(this))\n    con.on('commandComplete', this._handleCommandComplete.bind(this))\n    con.on('parseComplete', this._handleParseComplete.bind(this))\n    con.on('copyInResponse', this._handleCopyInResponse.bind(this))\n    con.on('copyData', this._handleCopyData.bind(this))\n    con.on('notification', this._handleNotification.bind(this))\n  }\n\n  // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n  // it can be supplied by the user if required - this is a breaking change!\n  _checkPgPass(cb) {\n    const con = this.connection\n    if (typeof this.password === 'function') {\n      this._Promise\n        .resolve()\n        .then(() => this.password())\n        .then((pass) => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'))\n              return\n            }\n            this.connectionParameters.password = this.password = pass\n          } else {\n            this.connectionParameters.password = this.password = null\n          }\n          cb()\n        })\n        .catch((err) => {\n          con.emit('error', err)\n        })\n    } else if (this.password !== null) {\n      cb()\n    } else {\n      try {\n        const pgPass = require('pgpass')\n        pgPass(this.connectionParameters, (pass) => {\n          if (undefined !== pass) {\n            this.connectionParameters.password = this.password = pass\n          }\n          cb()\n        })\n      } catch (e) {\n        this.emit('error', e)\n      }\n    }\n  }\n\n  _handleAuthCleartextPassword(msg) {\n    this._checkPgPass(() => {\n      this.connection.password(this.password)\n    })\n  }\n\n  _handleAuthMD5Password(msg) {\n    this._checkPgPass(async () => {\n      try {\n        const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt)\n        this.connection.password(hashedPassword)\n      } catch (e) {\n        this.emit('error', e)\n      }\n    })\n  }\n\n  _handleAuthSASL(msg) {\n    this._checkPgPass(() => {\n      try {\n        this.saslSession = sasl.startSession(msg.mechanisms)\n        this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)\n      } catch (err) {\n        this.connection.emit('error', err)\n      }\n    })\n  }\n\n  async _handleAuthSASLContinue(msg) {\n    try {\n      await sasl.continueSession(this.saslSession, this.password, msg.data)\n      this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleAuthSASLFinal(msg) {\n    try {\n      sasl.finalizeSession(this.saslSession, msg.data)\n      this.saslSession = null\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleBackendKeyData(msg) {\n    this.processID = msg.processID\n    this.secretKey = msg.secretKey\n  }\n\n  _handleReadyForQuery(msg) {\n    if (this._connecting) {\n      this._connecting = false\n      this._connected = true\n      clearTimeout(this.connectionTimeoutHandle)\n\n      // process possible callback argument to Client#connect\n      if (this._connectionCallback) {\n        this._connectionCallback(null, this)\n        // remove callback for proper error handling\n        // after the connect event\n        this._connectionCallback = null\n      }\n      this.emit('connect')\n    }\n    const { activeQuery } = this\n    this.activeQuery = null\n    this.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(this.connection)\n    }\n    this._pulseQueryQueue()\n  }\n\n  // if we receieve an error event or error message\n  // during the connection process we handle it here\n  _handleErrorWhileConnecting(err) {\n    if (this._connectionError) {\n      // TODO(bmc): this is swallowing errors - we shouldn't do this\n      return\n    }\n    this._connectionError = true\n    clearTimeout(this.connectionTimeoutHandle)\n    if (this._connectionCallback) {\n      return this._connectionCallback(err)\n    }\n    this.emit('error', err)\n  }\n\n  // if we're connected and we receive an error event from the connection\n  // this means the socket is dead - do a hard abort of all queries and emit\n  // the socket error on the client as well\n  _handleErrorEvent(err) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(err)\n    }\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  // handle error messages from the postgres backend\n  _handleErrorMessage(msg) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(msg)\n    }\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      this._handleErrorEvent(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, this.connection)\n  }\n\n  _handleRowDescription(msg) {\n    // delegate rowDescription to active query\n    this.activeQuery.handleRowDescription(msg)\n  }\n\n  _handleDataRow(msg) {\n    // delegate dataRow to active query\n    this.activeQuery.handleDataRow(msg)\n  }\n\n  _handlePortalSuspended(msg) {\n    // delegate portalSuspended to active query\n    this.activeQuery.handlePortalSuspended(this.connection)\n  }\n\n  _handleEmptyQuery(msg) {\n    // delegate emptyQuery to active query\n    this.activeQuery.handleEmptyQuery(this.connection)\n  }\n\n  _handleCommandComplete(msg) {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected commandComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // delegate commandComplete to active query\n    this.activeQuery.handleCommandComplete(msg, this.connection)\n  }\n\n  _handleParseComplete() {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected parseComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // if a prepared statement has a name and properly parses\n    // we track that its already been executed so we don't parse\n    // it again on the same client\n    if (this.activeQuery.name) {\n      this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text\n    }\n  }\n\n  _handleCopyInResponse(msg) {\n    this.activeQuery.handleCopyInResponse(this.connection)\n  }\n\n  _handleCopyData(msg) {\n    this.activeQuery.handleCopyData(msg, this.connection)\n  }\n\n  _handleNotification(msg) {\n    this.emit('notification', msg)\n  }\n\n  _handleNotice(msg) {\n    this.emit('notice', msg)\n  }\n\n  getStartupConf() {\n    var params = this.connectionParameters\n\n    var data = {\n      user: params.user,\n      database: params.database,\n    }\n\n    var appName = params.application_name || params.fallback_application_name\n    if (appName) {\n      data.application_name = appName\n    }\n    if (params.replication) {\n      data.replication = '' + params.replication\n    }\n    if (params.statement_timeout) {\n      data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n    }\n    if (params.lock_timeout) {\n      data.lock_timeout = String(parseInt(params.lock_timeout, 10))\n    }\n    if (params.idle_in_transaction_session_timeout) {\n      data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n    }\n    if (params.options) {\n      data.options = params.options\n    }\n\n    return data\n  }\n\n  cancel(client, query) {\n    if (client.activeQuery === query) {\n      var con = this.connection\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port)\n      } else {\n        con.connect(this.port, this.host)\n      }\n\n      // once connection is established send cancel message\n      con.on('connect', function () {\n        con.cancel(client.processID, client.secretKey)\n      })\n    } else if (client.queryQueue.indexOf(query) !== -1) {\n      client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n    }\n  }\n\n  setTypeParser(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn)\n  }\n\n  getTypeParser(oid, format) {\n    return this._types.getTypeParser(oid, format)\n  }\n\n  // escapeIdentifier and escapeLiteral moved to utility functions & exported\n  // on PG\n  // re-exported here for backwards compatibility\n  escapeIdentifier(str) {\n    return utils.escapeIdentifier(str)\n  }\n\n  escapeLiteral(str) {\n    return utils.escapeLiteral(str)\n  }\n\n  _pulseQueryQueue() {\n    if (this.readyForQuery === true) {\n      this.activeQuery = this.queryQueue.shift()\n      if (this.activeQuery) {\n        this.readyForQuery = false\n        this.hasExecuted = true\n\n        const queryError = this.activeQuery.submit(this.connection)\n        if (queryError) {\n          process.nextTick(() => {\n            this.activeQuery.handleError(queryError, this.connection)\n            this.readyForQuery = true\n            this._pulseQueryQueue()\n          })\n        }\n      } else if (this.hasExecuted) {\n        this.activeQuery = null\n        this.emit('drain')\n      }\n    }\n  }\n\n  query(config, values, callback) {\n    // can take in strings, config object or query object\n    var query\n    var result\n    var readTimeout\n    var readTimeoutTimer\n    var queryCallback\n\n    if (config === null || config === undefined) {\n      throw new TypeError('Client was passed a null or undefined query')\n    } else if (typeof config.submit === 'function') {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      result = query = config\n      if (typeof values === 'function') {\n        query.callback = query.callback || values\n      }\n    } else {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      query = new Query(config, values, callback)\n      if (!query.callback) {\n        result = new this._Promise((resolve, reject) => {\n          query.callback = (err, res) => (err ? reject(err) : resolve(res))\n        }).catch((err) => {\n          // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n          // application that created the query\n          Error.captureStackTrace(err)\n          throw err\n        })\n      }\n    }\n\n    if (readTimeout) {\n      queryCallback = query.callback\n\n      readTimeoutTimer = setTimeout(() => {\n        var error = new Error('Query read timeout')\n\n        process.nextTick(() => {\n          query.handleError(error, this.connection)\n        })\n\n        queryCallback(error)\n\n        // we already returned an error,\n        // just do nothing if query completes\n        query.callback = () => {}\n\n        // Remove from queue\n        var index = this.queryQueue.indexOf(query)\n        if (index > -1) {\n          this.queryQueue.splice(index, 1)\n        }\n\n        this._pulseQueryQueue()\n      }, readTimeout)\n\n      query.callback = (err, res) => {\n        clearTimeout(readTimeoutTimer)\n        queryCallback(err, res)\n      }\n    }\n\n    if (this.binary && !query.binary) {\n      query.binary = true\n    }\n\n    if (query._result && !query._result._types) {\n      query._result._types = this._types\n    }\n\n    if (!this._queryable) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    if (this._ending) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    this.queryQueue.push(query)\n    this._pulseQueryQueue()\n    return result\n  }\n\n  ref() {\n    this.connection.ref()\n  }\n\n  unref() {\n    this.connection.unref()\n  }\n\n  end(cb) {\n    this._ending = true\n\n    // if we have never connected, then end is a noop, callback immediately\n    if (!this.connection._connecting || this._ended) {\n      if (cb) {\n        cb()\n      } else {\n        return this._Promise.resolve()\n      }\n    }\n\n    if (this.activeQuery || !this._queryable) {\n      // if we have an active query we need to force a disconnect\n      // on the socket - otherwise a hung query could block end forever\n      this.connection.stream.destroy()\n    } else {\n      this.connection.end()\n    }\n\n    if (cb) {\n      this.connection.once('end', cb)\n    } else {\n      return new this._Promise((resolve) => {\n        this.connection.once('end', resolve)\n      })\n    }\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9875, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9880, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg-pool%403.7.1_pg%408.13.3/node_modules/pg-pool/index.js"],"sourcesContent":["'use strict'\nconst EventEmitter = require('events').EventEmitter\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  }).catch((err) => {\n    // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n    // application that created the query\n    Error.captureStackTrace(err)\n    throw err\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || require('pg').Client\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._expired = new WeakSet()\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      client.ref && client.ref()\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    client.end()\n    this.emit('remove', client)\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err = new Error('Connection terminated due to connection timeout', { cause: err })\n        }\n\n        // this client won’t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          const maxLifetimeTimeout = setTimeout(() => {\n            this.log('ending client due to expired lifetime')\n            this._expired.add(client)\n            const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client)\n            if (idleIndex !== -1) {\n              this._acquireClient(\n                client,\n                new PendingItem((err, client, clientRelease) => clientRelease()),\n                idleListener,\n                false\n              )\n            }\n          }, this.options.maxLifetimeSeconds * 1000)\n\n          maxLifetimeTimeout.unref()\n          client.once('end', () => clearTimeout(maxLifetimeTimeout))\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    this.emit('release', err, client)\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    const isExpired = this._expired.has(client)\n    if (isExpired) {\n      this.log('remove expired client')\n      this._expired.delete(client)\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client)\n      }, this.options.idleTimeoutMillis)\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref()\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref()\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      try {\n        client.query(text, values, (err, res) => {\n          this.log('query dispatched')\n          client.removeListener('error', onError)\n          if (clientReleased) {\n            return\n          }\n          clientReleased = true\n          client.release(err)\n          if (err) {\n            return cb(err)\n          }\n          return cb(undefined, res)\n        })\n      } catch (err) {\n        client.release(err)\n        return cb(err)\n      }\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0)\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10287, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/native/query.js"],"sourcesContent":["'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('../utils')\n\nvar NativeQuery = (module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.queryMode = config.queryMode\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on(\n    'newListener',\n    function (event) {\n      if (event === 'row') this._emitRowEvents = true\n    }.bind(this)\n  )\n})\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  sqlState: 'code',\n  statementPosition: 'position',\n  messagePrimary: 'message',\n  context: 'where',\n  schemaName: 'schema',\n  tableName: 'table',\n  columnName: 'column',\n  dataTypeName: 'dataType',\n  constraintName: 'constraint',\n  sourceFile: 'file',\n  sourceLine: 'line',\n  sourceFunction: 'routine',\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(\n    function (resolve, reject) {\n      this._once('end', resolve)\n      this._once('error', reject)\n    }.bind(this)\n  )\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach((row) => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied %s (%s)', this.name, this.name.length)\n      console.error('This can cause conflicts and silent errors executing queries')\n      /* eslint-enable no-console */\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n        return after(err)\n      }\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = self.text\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else if (this.queryMode === 'extended') {\n    client.native.query(this.text, [], after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10435, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/native/client.js"],"sourcesContent":["'use strict'\n\n// eslint-disable-next-line\nvar Native\ntry {\n  // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import\n  Native = require('pg-native')\n} catch (e) {\n  throw e\n}\nvar TypeOverrides = require('../type-overrides')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar NativeQuery = require('./query')\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (self.connectionParameters.nativeConnectionString) conString = self.connectionParameters.nativeConnectionString\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      }).catch((err) => {\n        Error.captureStackTrace(err)\n        throw err\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10698, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10703, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/native/index.js"],"sourcesContent":["'use strict'\nmodule.exports = require('./client')\n"],"names":[],"mappings":"AAAA;AACA,OAAO,OAAO","ignoreList":[0]}},
    {"offset": {"line": 10705, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10710, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/pg%408.13.3/node_modules/pg/lib/index.js"],"sourcesContent":["'use strict'\n\nvar Client = require('./client')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nvar Pool = require('pg-pool')\nconst { DatabaseError } = require('pg-protocol')\nconst { escapeIdentifier, escapeLiteral } = require('./utils')\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client)\n    }\n  }\n}\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n  this.DatabaseError = DatabaseError\n  this.escapeIdentifier = escapeIdentifier\n  this.escapeLiteral = escapeLiteral\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      var native = null\n      try {\n        native = new PG(require('./native'))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native,\n      })\n\n      return native\n    },\n  })\n}\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,MAAM,EAAE,aAAa,EAAE;AACvB,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE;AAEzC,MAAM,cAAc,CAAC;IACnB,OAAO,MAAM,kBAAkB;QAC7B,YAAY,OAAO,CAAE;YACnB,KAAK,CAAC,SAAS;QACjB;IACF;AACF;AAEA,IAAI,KAAK,SAAU,iBAAiB;IAClC,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK;IAC9B,IAAI,CAAC,IAAI,GAAG,YAAY,IAAI,CAAC,MAAM;IACnC,IAAI,CAAC,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC,UAAU,GAAG;IAClB,IAAI,CAAC,KAAK;IACV,IAAI,CAAC,aAAa,GAAG;IACrB,IAAI,CAAC,gBAAgB,GAAG;IACxB,IAAI,CAAC,aAAa,GAAG;AACvB;AAEA,IAAI,OAAO,QAAQ,GAAG,CAAC,oBAAoB,KAAK,aAAa;IAC3D,OAAO,OAAO,GAAG,IAAI;AACvB,OAAO;IACL,OAAO,OAAO,GAAG,IAAI,GAAG;IAExB,wEAAwE;IACxE,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,UAAU;QAC9C,cAAc;QACd,YAAY;QACZ;YACE,IAAI,SAAS;YACb,IAAI;gBACF,SAAS,IAAI;YACf,EAAE,OAAO,KAAK;gBACZ,IAAI,IAAI,IAAI,KAAK,oBAAoB;oBACnC,MAAM;gBACR;YACF;YAEA,uEAAuE;YACvE,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,UAAU;gBAC9C,OAAO;YACT;YAEA,OAAO;QACT;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 10761, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10767, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/errors.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic override readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB;;AAEpB,MAAM,qBAAqB,MAAM;IACvC,OAAA,yNAAiB,aAAU,CAAA,GAAY,eAAA;IAEvC,YAAY,EAAE,OAAA,EAAS,KAAA,CAAM,CAAA,CAA0C;QACtE,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,KAAA,GAAQ;IACd;AACD;AAEO,MAAM,iCAAiC,aAAa;IAC1D,OAAA,yNAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,aAAc;QACb,KAAA,CAAM;YAAE,SAAS;QAAW,CAAC;IAC9B;AACD","ignoreList":[0]}},
    {"offset": {"line": 10791, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10797, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/sql/expressions/conditions.ts"],"sourcesContent":["import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10967, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10973, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/sql/expressions/select.ts"],"sourcesContent":["import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n"],"names":[],"mappings":";;;;AAEA,SAAS,WAAW;;AAoBb,SAAS,IAAI,MAAA,EAAqC;IACxD,mOAAO,MAAA,CAAA,EAAM,MAAM,CAAA,IAAA,CAAA;AACpB;AAkBO,SAAS,KAAK,MAAA,EAAqC;IACzD,mOAAO,MAAA,CAAA,EAAM,MAAM,CAAA,KAAA,CAAA;AACpB","ignoreList":[0]}},
    {"offset": {"line": 10987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10993, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/relations.ts"],"sourcesContent":["import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t\t}\n\t\t\t| undefined;\n\t\twith?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t\t| true\n\t\t\t\t\t| DBQueryConfig<\n\t\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t\t>\n\t\t\t\t\t>\n\t\t\t\t\t| undefined;\n\t\t\t}\n\t\t\t| undefined;\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>)\n\t\t\t| undefined;\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>)\n\t\t\t\t\t| undefined;\n\t\t\t\tlimit?: number | Placeholder | undefined;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder | undefined;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n"],"names":["relations"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11250, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/query-promise.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAEpB,MAAe,aAAsC;IAC3D,OAAA,yNAAiB,aAAU,CAAA,GAAY,eAAA;IAEvC,CAAC,OAAO,WAAW,CAAA,GAAI,eAAA;IAEvB,MACC,UAAA,EACuB;QACvB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAAyD;QAChE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;IAEA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,IAAA,CAAK,OAAA,CAAQ,EAAE,IAAA,CAAK,aAAa,UAAU;IACnD;AAGD","ignoreList":[0]}},
    {"offset": {"line": 11276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11282, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/query.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { KnownKeysOnly, NeonAuthToken } from '~/utils.ts';\nimport type { PgDialect } from '../dialect.ts';\nimport type { PgPreparedQuery, PgSession, PreparedQueryConfig } from '../session.ts';\nimport type { PgTable } from '../table.ts';\n\nexport class RelationalQueryBuilder<TSchema extends TablesRelationalConfig, TFields extends TableRelationalConfig> {\n\tstatic readonly [entityKind]: string = 'PgRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TSchema,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t'many',\n\t\t);\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t'first',\n\t\t);\n\t}\n}\n\nexport class PgRelationalQuery<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tprivate mode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\t\treturn this.session.prepareQuery<PreparedQueryConfig & { execute: TResult }>(\n\t\t\t\tbuiltQuery,\n\t\t\t\tundefined,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t\t);\n\t\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t\t}\n\t\t\t\t\treturn rows as TResult;\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate _getQuery() {\n\t\treturn this.dialect.buildRelationalQueryWithoutPK({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this._getQuery().sql as SQL;\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this._getQuery();\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute(): Promise<TResult> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(undefined, this.authToken);\n\t\t});\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11384, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11390, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/casing.ts"],"sourcesContent":["import type { Column } from '~/column.ts';\nimport { entityKind } from './entity.ts';\nimport { Table } from './table.ts';\nimport type { Casing } from './utils.ts';\n\nexport function toSnakeCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.map((word) => word.toLowerCase()).join('_');\n}\n\nexport function toCamelCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.reduce((acc, word, i) => {\n\t\tconst formattedWord = i === 0 ? word.toLowerCase() : `${word[0]!.toUpperCase()}${word.slice(1)}`;\n\t\treturn acc + formattedWord;\n\t}, '');\n}\n\nfunction noopCase(input: string) {\n\treturn input;\n}\n\nexport class CasingCache {\n\tstatic readonly [entityKind]: string = 'CasingCache';\n\n\t/** @internal */\n\tcache: Record<string, string> = {};\n\tprivate cachedTables: Record<string, true> = {};\n\tprivate convert: (input: string) => string;\n\n\tconstructor(casing?: Casing) {\n\t\tthis.convert = casing === 'snake_case'\n\t\t\t? toSnakeCase\n\t\t\t: casing === 'camelCase'\n\t\t\t? toCamelCase\n\t\t\t: noopCase;\n\t}\n\n\tgetColumnCasing(column: Column): string {\n\t\tif (!column.keyAsName) return column.name;\n\n\t\tconst schema = column.table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = column.table[Table.Symbol.OriginalName];\n\t\tconst key = `${schema}.${tableName}.${column.name}`;\n\n\t\tif (!this.cache[key]) {\n\t\t\tthis.cacheTable(column.table);\n\t\t}\n\t\treturn this.cache[key]!;\n\t}\n\n\tprivate cacheTable(table: Table) {\n\t\tconst schema = table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = table[Table.Symbol.OriginalName];\n\t\tconst tableKey = `${schema}.${tableName}`;\n\n\t\tif (!this.cachedTables[tableKey]) {\n\t\t\tfor (const column of Object.values(table[Table.Symbol.Columns])) {\n\t\t\t\tconst columnKey = `${tableKey}.${column.name}`;\n\t\t\t\tthis.cache[columnKey] = this.convert(column.name);\n\t\t\t}\n\t\t\tthis.cachedTables[tableKey] = true;\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.cache = {};\n\t\tthis.cachedTables = {};\n\t}\n}\n"],"names":[],"mappings":";;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;;;AAGf,SAAS,YAAY,KAAA,EAAe;IAC1C,MAAM,QAAQ,MACZ,OAAA,CAAQ,cAAc,EAAE,EACxB,KAAA,CAAM,yCAAyC,KAAK,CAAC,CAAA;IAEvD,OAAO,MAAM,GAAA,CAAI,CAAC,OAAS,KAAK,WAAA,CAAY,CAAC,EAAE,IAAA,CAAK,GAAG;AACxD;AAEO,SAAS,YAAY,KAAA,EAAe;IAC1C,MAAM,QAAQ,MACZ,OAAA,CAAQ,cAAc,EAAE,EACxB,KAAA,CAAM,yCAAyC,KAAK,CAAC,CAAA;IAEvD,OAAO,MAAM,MAAA,CAAO,CAAC,KAAK,MAAM,MAAM;QACrC,MAAM,gBAAgB,MAAM,IAAI,KAAK,WAAA,CAAY,IAAI,GAAG,IAAA,CAAK,CAAC,CAAA,CAAG,WAAA,CAAY,CAAC,GAAG,KAAK,KAAA,CAAM,CAAC,CAAC,EAAA;QAC9F,OAAO,MAAM;IACd,GAAG,EAAE;AACN;AAEA,SAAS,SAAS,KAAA,EAAe;IAChC,OAAO;AACR;AAEO,MAAM,YAAY;IACxB,OAAA,yNAAiB,aAAU,CAAA,GAAY,cAAA;IAAA,cAAA,GAGvC,QAAgC,CAAC,EAAA;IACzB,eAAqC,CAAC,EAAA;IACtC,QAAA;IAER,YAAY,MAAA,CAAiB;QAC5B,IAAA,CAAK,OAAA,GAAU,WAAW,eACvB,cACA,WAAW,cACX,cACA;IACJ;IAEA,gBAAgB,MAAA,EAAwB;QACvC,IAAI,CAAC,OAAO,SAAA,EAAW,OAAO,OAAO,IAAA;QAErC,MAAM,SAAS,OAAO,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,MAAM,CAAA,IAAK;QACpD,MAAM,YAAY,OAAO,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,YAAY,CAAA;QACxD,MAAM,MAAM,GAAG,MAAM,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,EAAI,OAAO,IAAI,EAAA;QAEjD,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,GAAG,CAAA,EAAG;YACrB,IAAA,CAAK,UAAA,CAAW,OAAO,KAAK;QAC7B;QACA,OAAO,IAAA,CAAK,KAAA,CAAM,GAAG,CAAA;IACtB;IAEQ,WAAW,KAAA,EAAc;QAChC,MAAM,SAAS,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,MAAM,CAAA,IAAK;QAC7C,MAAM,YAAY,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,YAAY,CAAA;QACjD,MAAM,WAAW,GAAG,MAAM,CAAA,CAAA,EAAI,SAAS,EAAA;QAEvC,IAAI,CAAC,IAAA,CAAK,YAAA,CAAa,QAAQ,CAAA,EAAG;YACjC,KAAA,MAAW,UAAU,OAAO,MAAA,CAAO,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAC,EAAG;gBAChE,MAAM,YAAY,GAAG,QAAQ,CAAA,CAAA,EAAI,OAAO,IAAI,EAAA;gBAC5C,IAAA,CAAK,KAAA,CAAM,SAAS,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,OAAO,IAAI;YACjD;YACA,IAAA,CAAK,YAAA,CAAa,QAAQ,CAAA,GAAI;QAC/B;IACD;IAEA,aAAa;QACZ,IAAA,CAAK,KAAA,GAAQ,CAAC;QACd,IAAA,CAAK,YAAA,GAAe,CAAC;IACtB;AACD","ignoreList":[0]}},
    {"offset": {"line": 11450, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11456, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/view-base.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { type ColumnsSelection, View } from '~/sql/sql.ts';\n\nexport abstract class PgViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelectedFields> {\n\tstatic override readonly [entityKind]: string = 'PgViewBase';\n\n\tdeclare readonly _: View<TName, TExisting, TSelectedFields>['_'] & {\n\t\treadonly viewBrand: 'PgViewBase';\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAgC,YAAY;;;AAErC,MAAe,+OAIZ,OAAA,CAAwC;IACjD,OAAA,yNAA0B,aAAU,CAAA,GAAY,aAAA;AAKjD","ignoreList":[0]}},
    {"offset": {"line": 11468, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11474, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/alias.ts"],"sourcesContent":["import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table | View>(\n\ttable: T,\n\ttableAlias: string,\n): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false)) as any;\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11587, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11593, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/dialect.ts"],"sourcesContent":["import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\tPgColumn,\n\tPgDate,\n\tPgDateString,\n\tPgJson,\n\tPgJsonb,\n\tPgNumeric,\n\tPgTime,\n\tPgTimestamp,\n\tPgTimestampString,\n\tPgUUID,\n} from '~/pg-core/columns/index.ts';\nimport type {\n\tAnyPgSelectQueryBuilder,\n\tPgDeleteConfig,\n\tPgInsertConfig,\n\tPgSelectJoinConfig,\n\tPgUpdateConfig,\n} from '~/pg-core/query-builders/index.ts';\nimport type { PgSelectConfig, SelectedFieldsOrdered } from '~/pg-core/query-builders/select.types.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { and, eq, View } from '~/sql/index.ts';\nimport {\n\ttype DriverValueEncoder,\n\ttype Name,\n\tParam,\n\ttype QueryTypingsValue,\n\ttype QueryWithTypings,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n} from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { PgSession } from './session.ts';\nimport { PgViewBase } from './view-base.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport interface PgDialectConfig {\n\tcasing?: Casing;\n}\n\nexport class PgDialect {\n\tstatic readonly [entityKind]: string = 'PgDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: PgDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tasync migrate(migrations: MigrationMeta[], session: PgSession, config: string | MigrationConfig): Promise<void> {\n\t\tconst migrationsTable = typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\t\tconst migrationsSchema = typeof config === 'string' ? 'drizzle' : config.migrationsSchema ?? 'drizzle';\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n\t\tawait session.execute(sql`CREATE SCHEMA IF NOT EXISTS ${sql.identifier(migrationsSchema)}`);\n\t\tawait session.execute(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.all<{ id: number; hash: string; created_at: string }>(\n\t\t\tsql`select id, hash, created_at from ${sql.identifier(migrationsSchema)}.${\n\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t} order by created_at desc limit 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0];\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor await (const migration of migrations) {\n\t\t\t\tif (\n\t\t\t\t\t!lastDbMigration\n\t\t\t\t\t|| Number(lastDbMigration.created_at) < migration.folderMillis\n\t\t\t\t) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.execute(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.execute(\n\t\t\t\t\t\tsql`insert into ${sql.identifier(migrationsSchema)}.${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(num: number): string {\n\t\treturn `$${num + 1}`;\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList }: PgDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: PgTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, from, joins }: PgUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst tableName = table[PgTable.Symbol.Name];\n\t\tconst tableSchema = table[PgTable.Symbol.Schema];\n\t\tconst origTableName = table[PgTable.Symbol.OriginalName];\n\t\tconst alias = tableName === origTableName ? undefined : tableName;\n\t\tconst tableSql = sql`${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\tsql.identifier(origTableName)\n\t\t}${alias && sql` ${sql.identifier(alias)}`}`;\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: !from })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}update ${tableSql} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, PgColumn)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: PgSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\tif (index === 0) {\n\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t}\n\t\t\tconst table = joinMeta.table;\n\t\t\tconst lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n\n\t\t\tif (is(table, PgTable)) {\n\t\t\t\tconst tableName = table[PgTable.Symbol.Name];\n\t\t\t\tconst tableSchema = table[PgTable.Symbol.Schema];\n\t\t\t\tconst origTableName = table[PgTable.Symbol.OriginalName];\n\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\ttableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined\n\t\t\t\t\t}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t);\n\t\t\t} else if (is(table, View)) {\n\t\t\t\tconst viewName = table[ViewBaseConfig].name;\n\t\t\t\tconst viewSchema = table[ViewBaseConfig].schema;\n\t\t\t\tconst origViewName = table[ViewBaseConfig].originalName;\n\t\t\t\tconst alias = viewName === origViewName ? undefined : joinMeta.alias;\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\tviewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined\n\t\t\t\t\t}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (index < joins.length - 1) {\n\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | PgViewBase | PgTable | undefined,\n\t): SQL | Subquery | PgViewBase | PgTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\tlet fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n\t\t\tif (table[Table.Symbol.Schema]) {\n\t\t\t\tfullName = sql`${sql.identifier(table[Table.Symbol.Schema]!)}.${fullName}`;\n\t\t\t}\n\t\t\treturn sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tlockingClause,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: PgSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<PgColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, PgViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tlet distinctSql: SQL | undefined;\n\t\tif (distinct) {\n\t\t\tdistinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, sql`, `)})`;\n\t\t}\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\torderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n\t\t}\n\n\t\tlet groupBySql;\n\t\tif (groupBy && groupBy.length > 0) {\n\t\t\tgroupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst lockingClauseSql = sql.empty();\n\t\tif (lockingClause) {\n\t\t\tconst clauseSql = sql` for ${sql.raw(lockingClause.strength)}`;\n\t\t\tif (lockingClause.config.of) {\n\t\t\t\tclauseSql.append(\n\t\t\t\t\tsql` of ${\n\t\t\t\t\t\tsql.join(\n\t\t\t\t\t\t\tArray.isArray(lockingClause.config.of) ? lockingClause.config.of : [lockingClause.config.of],\n\t\t\t\t\t\t\tsql`, `,\n\t\t\t\t\t\t)\n\t\t\t\t\t}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (lockingClause.config.noWait) {\n\t\t\t\tclauseSql.append(sql` no wait`);\n\t\t\t} else if (lockingClause.config.skipLocked) {\n\t\t\t\tclauseSql.append(sql` skip locked`);\n\t\t\t}\n\t\t\tlockingClauseSql.append(clauseSql);\n\t\t}\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClauseSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: PgSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: PgSelectConfig['setOperators'][number] }): SQL {\n\t\tconst leftChunk = sql`(${leftSelect.getSQL()}) `;\n\t\tconst rightChunk = sql`(${rightSelect.getSQL()})`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, PgColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, PgColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select, overridingSystemValue_ }: PgInsertConfig,\n\t): SQL {\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, PgColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, PgColumn][] = Object.entries(columns).filter(([_, col]) => !col.shouldDisableInsert());\n\n\t\tconst insertOrder = colEntries.map(\n\t\t\t([, column]) => sql.identifier(this.casing.getColumnCasing(column)),\n\t\t);\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnyPgSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\tif (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tconst defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tconst newValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t\tvalueList.push(newValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalueList.push(sql`default`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\tconst overridingSql = overridingSystemValue_ === true ? sql`overriding system value ` : undefined;\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${overridingSql}${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tbuildRefreshMaterializedViewQuery(\n\t\t{ view, concurrently, withNoData }: { view: PgMaterializedView; concurrently?: boolean; withNoData?: boolean },\n\t): SQL {\n\t\tconst concurrentlySql = concurrently ? sql` concurrently` : undefined;\n\t\tconst withNoDataSql = withNoData ? sql` with no data` : undefined;\n\n\t\treturn sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n\t}\n\n\tprepareTyping(encoder: DriverValueEncoder<unknown, unknown>): QueryTypingsValue {\n\t\tif (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n\t\t\treturn 'json';\n\t\t} else if (is(encoder, PgNumeric)) {\n\t\t\treturn 'decimal';\n\t\t} else if (is(encoder, PgTime)) {\n\t\t\treturn 'time';\n\t\t} else if (is(encoder, PgTimestamp) || is(encoder, PgTimestampString)) {\n\t\t\treturn 'timestamp';\n\t\t} else if (is(encoder, PgDate) || is(encoder, PgDateString)) {\n\t\t\treturn 'date';\n\t\t} else if (is(encoder, PgUUID)) {\n\t\t\treturn 'uuid';\n\t\t} else {\n\t\t\treturn 'none';\n\t\t}\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tprepareTyping: this.prepareTyping,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\t// buildRelationalQueryWithPK({\n\t// \tfullSchema,\n\t// \tschema,\n\t// \ttableNamesMap,\n\t// \ttable,\n\t// \ttableConfig,\n\t// \tqueryConfig: config,\n\t// \ttableAlias,\n\t// \tisRoot = false,\n\t// \tjoinOn,\n\t// }: {\n\t// \tfullSchema: Record<string, unknown>;\n\t// \tschema: TablesRelationalConfig;\n\t// \ttableNamesMap: Record<string, string>;\n\t// \ttable: PgTable;\n\t// \ttableConfig: TableRelationalConfig;\n\t// \tqueryConfig: true | DBQueryConfig<'many', true>;\n\t// \ttableAlias: string;\n\t// \tisRoot?: boolean;\n\t// \tjoinOn?: SQL;\n\t// }): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t// \t// For { \"<relation>\": true }, return a table with selection of all columns\n\t// \tif (config === true) {\n\t// \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t// \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n\t// \t\t\t[key, value],\n\t// \t\t) => ({\n\t// \t\t\tdbKey: value.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: value as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection,\n\t// \t\t};\n\t// \t}\n\n\t// \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t// \t// let selectionForBuild = selection;\n\n\t// \tconst aliasedColumns = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedRelations = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n\n\t// \tlet where, hasUserDefinedWhere;\n\t// \tif (config.where) {\n\t// \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n\t// \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t// \t\thasUserDefinedWhere = !!where;\n\t// \t}\n\t// \twhere = and(joinOn, where);\n\n\t// \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n\t// \tlet joins: Join[] = [];\n\t// \tlet selectedColumns: string[] = [];\n\n\t// \t// Figure out which columns to select\n\t// \tif (config.columns) {\n\t// \t\tlet isIncludeMode = false;\n\n\t// \t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t// \t\t\tif (value === undefined) {\n\t// \t\t\t\tcontinue;\n\t// \t\t\t}\n\n\t// \t\t\tif (field in tableConfig.columns) {\n\t// \t\t\t\tif (!isIncludeMode && value === true) {\n\t// \t\t\t\t\tisIncludeMode = true;\n\t// \t\t\t\t}\n\t// \t\t\t\tselectedColumns.push(field);\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tif (selectedColumns.length > 0) {\n\t// \t\t\tselectedColumns = isIncludeMode\n\t// \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t// \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// Select all columns if selection is not specified\n\t// \t\tselectedColumns = Object.keys(tableConfig.columns);\n\t// \t}\n\n\t// \t// for (const field of selectedColumns) {\n\t// \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n\t// \t// \tfieldsSelection.push({ tsKey: field, value: column });\n\t// \t// }\n\n\t// \tlet initiallySelectedRelations: {\n\t// \t\ttsKey: string;\n\t// \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t// \t\trelation: Relation;\n\t// \t}[] = [];\n\n\t// \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\n\t// \t// Figure out which relations to select\n\t// \tif (config.with) {\n\t// \t\tinitiallySelectedRelations = Object.entries(config.with)\n\t// \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t// \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t// \t}\n\n\t// \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n\t// \t\tis(r.relation, Many)\n\t// \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n\t// \t);\n\t// \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n\t// \tconst isInnermostQuery = manyRelations.length < 2;\n\n\t// \tconst selectedExtras: {\n\t// \t\ttsKey: string;\n\t// \t\tvalue: SQL.Aliased;\n\t// \t}[] = [];\n\n\t// \t// Figure out which extras to select\n\t// \tif (isInnermostQuery && config.extras) {\n\t// \t\tconst extras = typeof config.extras === 'function'\n\t// \t\t\t? config.extras(aliasedFields, { sql })\n\t// \t\t\t: config.extras;\n\t// \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t// \t\t\tselectedExtras.push({\n\t// \t\t\t\ttsKey,\n\t// \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\n\t// \t// Transform `fieldsSelection` into `selection`\n\t// \t// `fieldsSelection` shouldn't be used after this point\n\t// \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n\t// \t// \tselection.push({\n\t// \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t// \t// \t\ttsKey,\n\t// \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t// \t// \t\trelationTableTsKey: undefined,\n\t// \t// \t\tisJson: false,\n\t// \t// \t\tisExtra,\n\t// \t// \t\tselection: [],\n\t// \t// \t});\n\t// \t// }\n\n\t// \tlet orderByOrig = typeof config.orderBy === 'function'\n\t// \t\t? config.orderBy(aliasedFields, orderByOperators)\n\t// \t\t: config.orderBy ?? [];\n\t// \tif (!Array.isArray(orderByOrig)) {\n\t// \t\torderByOrig = [orderByOrig];\n\t// \t}\n\t// \tconst orderBy = orderByOrig.map((orderByValue) => {\n\t// \t\tif (is(orderByValue, Column)) {\n\t// \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t// \t\t}\n\t// \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t// \t});\n\n\t// \tconst limit = isInnermostQuery ? config.limit : undefined;\n\t// \tconst offset = isInnermostQuery ? config.offset : undefined;\n\n\t// \t// For non-root queries without additional config except columns, return a table with selection\n\t// \tif (\n\t// \t\t!isRoot\n\t// \t\t&& initiallySelectedRelations.length === 0\n\t// \t\t&& selectedExtras.length === 0\n\t// \t\t&& !where\n\t// \t\t&& orderBy.length === 0\n\t// \t\t&& limit === undefined\n\t// \t\t&& offset === undefined\n\t// \t) {\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection: selectedColumns.map((key) => ({\n\t// \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\t\ttsKey: key,\n\t// \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\t\trelationTableTsKey: undefined,\n\t// \t\t\t\tisJson: false,\n\t// \t\t\t\tselection: [],\n\t// \t\t\t})),\n\t// \t\t};\n\t// \t}\n\n\t// \tconst selectedRelationsWithoutPK:\n\n\t// \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of initiallySelectedRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length > 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t\tnestedQueryRelation: relation,\n\t// \t\t});\n\t// \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t// \t\tjoins.push({\n\t// \t\t\ton: sql`true`,\n\t// \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: true,\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n\t// \t\tis(r.relation, One)\n\t// \t);\n\n\t// \t// Process all One relations with PKs, because they can all be joined on the same level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of oneRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length === 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\t// \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: is(builtRelation.sql, SQL)\n\t// \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: is(builtRelation.sql, SQL),\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tlet distinct: PgSelectConfig['distinct'];\n\t// \tlet tableFrom: PgTable | Subquery = table;\n\n\t// \t// Process first Many relation - each one requires a nested subquery\n\t// \tconst manyRelation = manyRelations[0];\n\t// \tif (manyRelation) {\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\trelation,\n\t// \t\t} = manyRelation;\n\n\t// \t\tdistinct = {\n\t// \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n\t// \t\t};\n\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\n\t// \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\n\t// \t\tconst builtRelationSelectionField = sql`case when ${\n\t// \t\t\tsql.identifier(relationTableAlias)\n\t// \t\t} is null then '[]' else json_agg(json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: isLateralJoin\n\t// \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: isLateralJoin,\n\t// \t\t});\n\n\t// \t\t// Build the \"from\" subquery with the remaining Many relations\n\t// \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable,\n\t// \t\t\ttableConfig,\n\t// \t\t\tqueryConfig: {\n\t// \t\t\t\t...config,\n\t// \t\t\t\twhere: undefined,\n\t// \t\t\t\torderBy: undefined,\n\t// \t\t\t\tlimit: undefined,\n\t// \t\t\t\toffset: undefined,\n\t// \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n\t// \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n\t// \t\t\t\t\t\tresult[tsKey] = configValue;\n\t// \t\t\t\t\t\treturn result;\n\t// \t\t\t\t\t},\n\t// \t\t\t\t\t{},\n\t// \t\t\t\t),\n\t// \t\t\t},\n\t// \t\t\ttableAlias,\n\t// \t\t});\n\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield: builtRelationSelectionField,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelationJoin.selection,\n\t// \t\t});\n\n\t// \t\t// selection = builtTableFrom.selection.map((item) =>\n\t// \t\t// \tis(item.field, SQL.Aliased)\n\t// \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t// \t\t: item\n\t// \t\t// );\n\t// \t\t// selectionForBuild = [{\n\t// \t\t// \tdbKey: '*',\n\t// \t\t// \ttsKey: '*',\n\t// \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n\t// \t\t// \tselection: [],\n\t// \t\t// \tisJson: false,\n\t// \t\t// \trelationTableTsKey: undefined,\n\t// \t\t// }];\n\t// \t\t// const newSelectionItem: (typeof selection)[number] = {\n\t// \t\t// \tdbKey: selectedRelationTsKey,\n\t// \t\t// \ttsKey: selectedRelationTsKey,\n\t// \t\t// \tfield,\n\t// \t\t// \trelationTableTsKey: relationTableTsName,\n\t// \t\t// \tisJson: true,\n\t// \t\t// \tselection: builtRelationJoin.selection,\n\t// \t\t// };\n\t// \t\t// selection.push(newSelectionItem);\n\t// \t\t// selectionForBuild.push(newSelectionItem);\n\n\t// \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n\t// \t\t\t? builtTableFrom.sql\n\t// \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n\t// \t}\n\n\t// \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n\t// \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n\t// \t}\n\n\t// \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n\n\t// \tfunction prepareSelectedColumns() {\n\t// \t\treturn selectedColumns.map((key) => ({\n\t// \t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tfunction prepareSelectedExtras() {\n\t// \t\treturn selectedExtras.map((item) => ({\n\t// \t\t\tdbKey: item.value.fieldAlias,\n\t// \t\t\ttsKey: item.tsKey,\n\t// \t\t\tfield: item.value,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tif (isRoot) {\n\t// \t\tselection = [\n\t// \t\t\t...prepareSelectedColumns(),\n\t// \t\t\t...prepareSelectedExtras(),\n\t// \t\t];\n\t// \t}\n\n\t// \tif (hasUserDefinedWhere || orderBy.length > 0) {\n\t// \t\ttableFrom = new Subquery(\n\t// \t\t\tthis.buildSelectQuery({\n\t// \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\t\t\tfields: {},\n\t// \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\t\t\tpath: [],\n\t// \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t\t\t})),\n\t// \t\t\t\tjoins,\n\t// \t\t\t\tdistinct,\n\t// \t\t\t}),\n\t// \t\t\t{},\n\t// \t\t\ttableAlias,\n\t// \t\t);\n\t// \t\tselectionForBuild = selection.map((item) =>\n\t// \t\t\tis(item.field, SQL.Aliased)\n\t// \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t\t\t: item\n\t// \t\t);\n\t// \t\tjoins = [];\n\t// \t\tdistinct = undefined;\n\t// \t}\n\n\t// \tconst result = this.buildSelectQuery({\n\t// \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\tfields: {},\n\t// \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\tpath: [],\n\t// \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t})),\n\t// \t\twhere,\n\t// \t\tlimit,\n\t// \t\toffset,\n\t// \t\tjoins,\n\t// \t\torderBy,\n\t// \t\tdistinct,\n\t// \t});\n\n\t// \treturn {\n\t// \t\ttableTsKey: tableConfig.tsName,\n\t// \t\tsql: result,\n\t// \t\tselection,\n\t// \t};\n\t// }\n\n\tbuildRelationalQueryWithoutPK({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: PgTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t\tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: NonNullable<PgSelectConfig['orderBy']> = [], where;\n\t\tconst joins: PgSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as PgColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map((\n\t\t\t\t\t[key, value],\n\t\t\t\t) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as PgColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t\t\t\tjoins.push({\n\t\t\t\t\ton: sql`true`,\n\t\t\t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t\t\t\t\talias: relationTableAlias,\n\t\t\t\t\tjoinType: 'left',\n\t\t\t\t\tlateral: true,\n\t\t\t\t});\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({ message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")` });\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_build_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field, tsKey, isJson }) =>\n\t\t\t\t\t\tisJson\n\t\t\t\t\t\t\t? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier('data')}`\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_agg(${field}${\n\t\t\t\t\torderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined\n\t\t\t\t}), '[]'::json)`;\n\t\t\t\t// orderBy = [];\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [{\n\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t}],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = [];\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n"],"names":["table","select","sql","joinOn","field"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12699, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12705, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/selection-proxy.ts"],"sourcesContent":["import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n"],"names":[],"mappings":";;;AAEA,SAAS,YAAY,UAAU;AAG/B,SAAS,sBAAsB;AAD/B,SAAS,gBAAgB;AADzB,SAAS,KAAK,YAAY;AAF1B,SAAS,cAAc;AADvB,SAAS,yBAAyB,8BAA8B;;;;;;;AAOzD,MAAM,sBAEb;IACC,OAAA,yNAAiB,aAAU,CAAA,GAAY,wBAAA;IAE/B,OAAA;IA8BR,YAAY,MAAA,CAA4C;QACvD,IAAA,CAAK,MAAA,GAAS;YAAE,GAAG,MAAA;QAAO;IAC3B;IAEA,IAAI,QAAA,EAAa,IAAA,EAA4B;QAC5C,IAAI,SAAS,KAAK;YACjB,OAAO;gBACN,GAAG,QAAA,CAAS,GAA4B,CAAA;gBACxC,gBAAgB,IAAI,MAClB,SAAsB,CAAA,CAAE,cAAA,EACzB,IAAA;YAEF;QACD;QAEA,IAAI,yOAAS,iBAAA,EAAgB;YAC5B,OAAO;gBACN,GAAG,QAAA,gOAAS,kBAAuC,CAAA;gBACnD,gBAAgB,IAAI,MAClB,QAAA,iOAAkB,iBAAc,CAAA,CAAE,cAAA,EACnC,IAAA;YAEF;QACD;QAEA,IAAI,OAAO,SAAS,UAAU;YAC7B,OAAO,QAAA,CAAS,IAA6B,CAAA;QAC9C;QAEA,MAAM,cAAU,6NAAA,EAAG,oOAAU,WAAQ,IAClC,SAAS,CAAA,CAAE,cAAA,+NACX,KAAA,EAAG,qOAAU,QAAI,IACjB,QAAA,iOAAS,iBAAc,CAAA,CAAE,cAAA,GACzB;QACH,MAAM,QAAiB,OAAA,CAAQ,IAA4B,CAAA;QAE3D,gOAAI,KAAA,EAAG,mOAAO,MAAA,CAAI,OAAO,GAAG;YAE3B,IAAI,IAAA,CAAK,MAAA,CAAO,kBAAA,KAAuB,SAAS,CAAC,MAAM,gBAAA,EAAkB;gBACxE,OAAO,MAAM,GAAA;YACd;YAEA,MAAM,WAAW,MAAM,KAAA,CAAM;YAC7B,SAAS,gBAAA,GAAmB;YAC5B,OAAO;QACR;QAEA,gOAAI,KAAA,EAAG,mOAAO,MAAG,GAAG;YACnB,IAAI,IAAA,CAAK,MAAA,CAAO,WAAA,KAAgB,OAAO;gBACtC,OAAO;YACR;YAEA,MAAM,IAAI,MACT,CAAA,wBAAA,EAA2B,IAAI,CAAA,uJAAA,CAAA;QAEjC;QAEA,IAAI,iOAAA,EAAG,+NAAO,SAAM,GAAG;YACtB,IAAI,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO;gBACtB,OAAO,IAAI,MACV,OACA,2NAAI,0BAAA,CACH,IAAI,MACH,MAAM,KAAA,EACN,2NAAI,yBAAA,CAAuB,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO,IAAA,CAAK,MAAA,CAAO,mBAAA,IAAuB,KAAK;YAI1F;YACA,OAAO;QACR;QAEA,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;YAChD,OAAO;QACR;QAEA,OAAO,IAAI,MAAM,OAAO,IAAI,sBAAsB,IAAA,CAAK,MAAM,CAAC;IAC/D;AACD","ignoreList":[0]}},
    {"offset": {"line": 12774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12780, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAGpB,MAAe,kBAAuE;IAC5F,OAAA,yNAAiB,aAAU,CAAA,GAAY,oBAAA;IAAA,cAAA,GAQvC,oBAAgC;QAC/B,OAAO,IAAA,CAAK,CAAA,CAAE,cAAA;IACf;AAGD","ignoreList":[0]}},
    {"offset": {"line": 12793, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12799, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/select.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { PgColumn } from '~/pg-core/columns/index.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { PgSession, PreparedQueryConfig } from '~/pg-core/session.ts';\nimport type { SubqueryWithSelection } from '~/pg-core/subquery.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport { PgViewBase } from '~/pg-core/view-base.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport {\n\tapplyMixins,\n\ttype DrizzleTypeError,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\ttype NeonAuthToken,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { orderSelectedFields } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tAnyPgSelect,\n\tCreatePgSelectFromBuilderMode,\n\tGetPgSetOperators,\n\tLockConfig,\n\tLockStrength,\n\tPgCreateSetOperatorFn,\n\tPgSelectConfig,\n\tPgSelectDynamic,\n\tPgSelectHKT,\n\tPgSelectHKTBase,\n\tPgSelectJoinFn,\n\tPgSelectPrepare,\n\tPgSelectWithout,\n\tPgSetOperatorExcludedMethods,\n\tPgSetOperatorWithResult,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tTableLikeHasEmptySelection,\n} from './select.types.ts';\n\nexport class PgSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'PgSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: PgSession | undefined;\n\tprivate dialect: PgDialect;\n\tprivate withList: Subquery[] = [];\n\tprivate distinct: boolean | {\n\t\ton: (PgColumn | SQLWrapper)[];\n\t} | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t};\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tif (config.withList) {\n\t\t\tthis.withList = config.withList;\n\t\t}\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Specify the table, subquery, or other target that you're\n\t * building a select query against.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM | Postgres from documentation}\n\t */\n\tfrom<TFrom extends PgTable | Subquery | PgViewBase | SQL>(\n\t\tsource: TableLikeHasEmptySelection<TFrom> extends true ? DrizzleTypeError<\n\t\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t\t>\n\t\t\t: TFrom,\n\t): CreatePgSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\t\tconst src = source as TFrom;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(src, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(src._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, src[key as unknown as keyof typeof src] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(src, PgViewBase)) {\n\t\t\tfields = src[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(src, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<PgTable>(src);\n\t\t}\n\n\t\treturn (new PgSelectBase({\n\t\t\ttable: src,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}).setToken(this.authToken)) as any;\n\t}\n}\n\nexport abstract class PgSelectQueryBuilderBase<\n\tTHKT extends PgSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'PgSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\tprotected config: PgSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: PgSession | undefined;\n\tprotected dialect: PgDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: PgSelectConfig['table'];\n\t\t\tfields: PgSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList: Subquery[];\n\t\t\tdistinct: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t} | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): PgSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn ((\n\t\t\ttable: PgTable | Subquery | PgViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends PgSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetPgSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getPgSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/pg-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `intersect all` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products and quantities that are ordered by both regular and VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .intersectAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { intersectAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersectAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\tintersectAll = this.createSetOperator('intersect', true);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/pg-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/**\n\t * Adds `except all` set operator to the query.\n\t *\n\t * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products that are ordered by regular customers but not by VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .exceptAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { exceptAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await exceptAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\texceptAll = this.createSetOperator('except', true);\n\n\t/** @internal */\n\taddSetOperators(setOperators: PgSelectConfig['setOperators']): PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (PgColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (PgColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): PgSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): PgSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `for` clause to the query.\n\t *\n\t * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.\n\t *\n\t * See docs: {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE}\n\t *\n\t * @param strength the lock strength.\n\t * @param config the lock configuration.\n\t */\n\tfor(strength: LockStrength, config: LockConfig = {}): PgSelectWithout<this, TDynamic, 'for'> {\n\t\tthis.config.lockingClause = { strength, config };\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\nexport interface PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tPgSelectQueryBuilderBase<\n\t\tPgSelectHKT,\n\t\tTTableName,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>,\n\tSQLWrapper\n{}\n\nexport class PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends PgSelectQueryBuilderBase<\n\tPgSelectHKT,\n\tTTableName,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'pg'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'PgSelect';\n\n\t/** @internal */\n\t_prepare(name?: string): PgSelectPrepare<this> {\n\t\tconst { session, config, dialect, joinsNotNullableMap, authToken } = this;\n\t\tif (!session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst fieldsList = orderSelectedFields<PgColumn>(config.fields);\n\t\t\tconst query = session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & { execute: TResult }\n\t\t\t>(dialect.sqlToQuery(this.getSQL()), fieldsList, name, true);\n\t\t\tquery.joinsNotNullableMap = joinsNotNullableMap;\n\n\t\t\treturn query.setToken(authToken);\n\t\t});\n\t}\n\n\t/**\n\t * Create a prepared statement for this query. This allows\n\t * the database to remember this query for the given session\n\t * and call it by name, rather than specifying the full query.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-prepare.html | Postgres prepare documentation}\n\t */\n\tprepare(name: string): PgSelectPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n}\n\napplyMixins(PgSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): PgCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnyPgSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnyPgSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getPgSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\tintersectAll,\n\texcept,\n\texceptAll,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/pg-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/pg-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/pg-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `intersect all` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n *\n * @example\n *\n * ```ts\n * // Select all products and quantities that are ordered by both regular and VIP customers\n * import { intersectAll } from 'drizzle-orm/pg-core'\n *\n * await intersectAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered\n * })\n * .from(regularCustomerOrders)\n * .intersectAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const intersectAll = createSetOperator('intersect', true);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/pg-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n\n/**\n * Adds `except all` set operator to the query.\n *\n * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n *\n * @example\n *\n * ```ts\n * // Select all products that are ordered by regular customers but not by VIP customers\n * import { exceptAll } from 'drizzle-orm/pg-core'\n *\n * await exceptAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n * })\n * .from(regularCustomerOrders)\n * .exceptAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const exceptAll = createSetOperator('except', true);\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13558, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13564, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { PgDialectConfig } from '~/pg-core/dialect.ts';\nimport { PgDialect } from '~/pg-core/dialect.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { PgColumn } from '../columns/index.ts';\nimport type { WithBuilder } from '../subquery.ts';\nimport { PgSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'PgQueryBuilder';\n\n\tprivate dialect: PgDialect | undefined;\n\tprivate dialectConfig: PgDialectConfig | undefined;\n\n\tconstructor(dialect?: PgDialect | PgDialectConfig) {\n\t\tthis.dialect = is(dialect, PgDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, PgDialect) ? undefined : dialect;\n\t}\n\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst queryBuilder = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(queryBuilder);\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t) as any;\n\t\t};\n\t\treturn { as };\n\t};\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn };\n\t}\n\n\tselect(): PgSelectBuilder<undefined, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t});\n\t}\n\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: TSelection,\n\t): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new PgDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY,UAAU;AAE/B,SAAS,iBAAiB;AAI1B,SAAS,oBAAoB;AAF7B,SAAS,6BAA6B;AAKtC,SAAS,uBAAuB;;;;;;AAGzB,MAAM,aAAa;IACzB,OAAA,yNAAiB,aAAU,CAAA,GAAY,iBAAA;IAE/B,QAAA;IACA,cAAA;IAER,YAAY,OAAA,CAAuC;QAClD,IAAA,CAAK,OAAA,OAAU,6NAAA,EAAG,gPAAS,YAAS,IAAI,UAAU,KAAA;QAClD,IAAA,CAAK,aAAA,+NAAgB,KAAA,EAAG,+OAAS,aAAS,IAAI,KAAA,IAAY;IAC3D;IAEA,QAAqB,CAAC,OAAe,cAAiC;QACrE,MAAM,eAAe,IAAA;QACrB,MAAM,KAAK,CACV,OAII;YACJ,IAAI,OAAO,OAAO,YAAY;gBAC7B,KAAK,GAAG,YAAY;YACrB;YAEA,OAAO,IAAI,MACV,8NAAI,eAAA,CACH,GAAG,MAAA,CAAO,GACV,aAAA,CAAc,uBAAuB,KAAK,GAAG,iBAAA,CAAkB,KAAK,CAAC,IAAI,CAAC,CAAA,GAC1E,OACA,OAED,wOAAI,wBAAA,CAAsB;gBAAE;gBAAO,oBAAoB;gBAAS,aAAa;YAAQ,CAAC;QAExF;QACA,OAAO;YAAE;QAAG;IACb,EAAA;IAEA,KAAA,GAAQ,OAAA,EAAyB;QAChC,MAAM,OAAO,IAAA;QAIb,SAAS,OACR,MAAA,EACgD;YAChD,OAAO,+PAAI,kBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAIA,SAAS,eACR,MAAA,EACgD;YAChD,OAAO,8PAAI,mBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAOA,SAAS,iBACR,EAAA,EACA,MAAA,EACgD;YAChD,OAAO,+PAAI,kBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;oBAAE;gBAAG;YAChB,CAAC;QACF;QAEA,OAAO;YAAE;YAAQ;YAAgB;QAAiB;IACnD;IAIA,OAA0C,MAAA,EAAoE;QAC7G,OAAO,8PAAI,mBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;QAC1B,CAAC;IACF;IAIA,eAAkD,MAAA,EAA8D;QAC/G,OAAO,+PAAI,kBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;QACX,CAAC;IACF;IAOA,iBACC,EAAA,EACA,MAAA,EAC0C;QAC1C,OAAO,+PAAI,kBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;gBAAE;YAAG;QAChB,CAAC;IACF;IAAA,iDAAA;IAGQ,aAAa;QACpB,IAAI,CAAC,IAAA,CAAK,OAAA,EAAS;YAClB,IAAA,CAAK,OAAA,GAAU,2OAAI,YAAA,CAAU,IAAA,CAAK,aAAa;QAChD;QAEA,OAAO,IAAA,CAAK,OAAA;IACb;AACD","ignoreList":[0]}},
    {"offset": {"line": 13670, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13676, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/count.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { NeonAuthToken } from '~/utils.ts';\nimport type { PgSession } from '../session.ts';\nimport type { PgTable } from '../table.ts';\n\nexport class PgCountBuilder<\n\tTSession extends PgSession<any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\tprivate token?: NeonAuthToken;\n\n\tstatic override readonly [entityKind] = 'PgCountBuilder';\n\t[Symbol.toStringTag] = 'PgCountBuilder';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: PgTable | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: PgTable | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) as count from ${source}${sql.raw(' where ').if(filters)}${filters};`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: PgTable | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(PgCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.mapWith(Number);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = PgCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\t/** @intrnal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.token = token;\n\t\treturn this;\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql, this.token))\n\t\t\t.then(\n\t\t\t\tonfulfilled,\n\t\t\t\tonrejected,\n\t\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => any) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,KAAK,WAA4B;;;AAKnC,MAAM,mPAEH,MAAA,CAAmD;IAuB5D,YACU,MAAA,CAKR;QACD,KAAA,CAAM,eAAe,kBAAA,CAAmB,OAAO,MAAA,EAAQ,OAAO,OAAO,EAAE,WAAW;QANzE,IAAA,CAAA,MAAA,GAAA;QAQT,IAAA,CAAK,OAAA,CAAQ,MAAM;QAEnB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QAEtB,IAAA,CAAK,GAAA,GAAM,eAAe,UAAA,CACzB,OAAO,MAAA,EACP,OAAO,OAAA;IAET;IAvCQ,IAAA;IACA,MAAA;IAER,OAAA,yNAA0B,aAAU,CAAA,GAAI,iBAAA;IACxC,CAAC,OAAO,WAAW,CAAA,GAAI,iBAAA;IAEf,QAAA;IAER,OAAe,mBACd,MAAA,EACA,OAAA,EACc;QACd,mOAAO,MAAA,CAAA,sBAAA,EAAoC,MAAM,CAAA,8NAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IAC7F;IAEA,OAAe,WACd,MAAA,EACA,OAAA,EACc;QACd,mOAAO,MAAA,CAAA,8BAAA,EAA4C,MAAM,CAAA,8NAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IACrG;IAAA,aAAA,GAsBA,SAAS,KAAA,EAAuB;QAC/B,IAAA,CAAK,KAAA,GAAQ;QACb,OAAO,IAAA;IACR;IAEA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,QAAQ,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,GAAA,EAAK,IAAA,CAAK,KAAK,CAAC,EAC7D,IAAA,CACA,aACA;IAEH;IAEA,MACC,UAAA,EACkB;QAClB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAA8D;QACrE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;AACD","ignoreList":[0]}},
    {"offset": {"line": 13724, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13730, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/update.ts"],"sourcesContent":["import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tAppendToNullabilityMap,\n\tAppendToResult,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type Query, SQL, type SQLWrapper } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, Table } from '~/table.ts';\nimport {\n\ttype Assume,\n\tDrizzleTypeError,\n\tEqual,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\ttype NeonAuthToken,\n\torderSelectedFields,\n\tSimplify,\n\ttype UpdateSet,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport type { PgViewBase } from '../view-base.ts';\nimport type {\n\tPgSelectJoinConfig,\n\tSelectedFields,\n\tSelectedFieldsOrdered,\n\tTableLikeHasEmptySelection,\n} from './select.types.ts';\n\nexport interface PgUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: PgTable;\n\tfrom?: PgTable | Subquery | PgViewBase | SQL;\n\tjoins: PgSelectJoinConfig[];\n\treturningFields?: SelectedFields;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgUpdateSetSource<TTable extends PgTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key]>\n\t\t\t| SQL\n\t\t\t| PgColumn\n\t\t\t| undefined;\n\t}\n\t& {};\n\nexport class PgUpdateBuilder<TTable extends PgTable, TQueryResult extends PgQueryResultHKT> {\n\tstatic readonly [entityKind]: string = 'PgUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tprivate authToken?: NeonAuthToken;\n\tsetToken(token: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\tset(\n\t\tvalues: PgUpdateSetSource<TTable>,\n\t): PgUpdateWithout<PgUpdateBase<TTable, TQueryResult>, false, 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'> {\n\t\treturn new PgUpdateBase<TTable, TQueryResult>(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t).setToken(this.authToken);\n\t}\n}\n\nexport type PgUpdateWithout<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tT['_']['selectedFields'],\n\t\tT['_']['returning'],\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type PgUpdateWithJoins<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tTFrom,\n\t\tT['_']['selectedFields'],\n\t\tT['_']['returning'],\n\t\tAppendToNullabilityMap<T['_']['nullabilityMap'], GetSelectTableName<TFrom>, 'inner'>,\n\t\t[...T['_']['joins'], {\n\t\t\tname: GetSelectTableName<TFrom>;\n\t\t\tjoinType: 'inner';\n\t\t\ttable: TFrom;\n\t\t}],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type PgUpdateJoinFn<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTJoinType extends JoinType,\n> = <\n\tTJoinedTable extends PgTable | Subquery | PgViewBase | SQL,\n>(\n\ttable: TableLikeHasEmptySelection<TJoinedTable> extends true ? DrizzleTypeError<\n\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t>\n\t\t: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends PgTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | PgViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => PgUpdateJoin<T, TDynamic, TJoinType, TJoinedTable>;\n\nexport type PgUpdateJoin<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTJoinType extends JoinType,\n\tTJoinedTable extends PgTable | Subquery | PgViewBase | SQL,\n> = TDynamic extends true ? T : PgUpdateBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['from'],\n\tT['_']['selectedFields'],\n\tT['_']['returning'],\n\tAppendToNullabilityMap<T['_']['nullabilityMap'], GetSelectTableName<TJoinedTable>, TJoinType>,\n\t[...T['_']['joins'], {\n\t\tname: GetSelectTableName<TJoinedTable>;\n\t\tjoinType: TJoinType;\n\t\ttable: TJoinedTable;\n\t}],\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\ntype Join = {\n\tname: string | undefined;\n\tjoinType: JoinType;\n\ttable: PgTable | Subquery | PgViewBase | SQL;\n};\n\ntype AccumulateToResult<\n\tT extends AnyPgUpdate,\n\tTSelectMode extends SelectMode,\n\tTJoins extends Join[],\n\tTSelectedFields extends ColumnsSelection,\n> = TJoins extends [infer TJoin extends Join, ...infer TRest extends Join[]] ? AccumulateToResult<\n\t\tT,\n\t\tTSelectMode extends 'partial' ? TSelectMode : 'multiple',\n\t\tTRest,\n\t\tAppendToResult<\n\t\t\tT['_']['table']['_']['name'],\n\t\t\tTSelectedFields,\n\t\t\tTJoin['name'],\n\t\t\tTJoin['table'] extends Table ? TJoin['table']['_']['columns']\n\t\t\t\t: TJoin['table'] extends Subquery ? Assume<TJoin['table']['_']['selectedFields'], SelectedFields>\n\t\t\t\t: never,\n\t\t\tTSelectMode extends 'partial' ? TSelectMode : 'multiple'\n\t\t>\n\t>\n\t: TSelectedFields;\n\nexport type PgUpdateReturningAll<T extends AnyPgUpdate, TDynamic extends boolean> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tEqual<T['_']['joins'], []> extends true ? T['_']['table']['_']['columns'] : Simplify<\n\t\t\t& Record<T['_']['table']['_']['name'], T['_']['table']['_']['columns']>\n\t\t\t& {\n\t\t\t\t[K in keyof T['_']['joins'] as T['_']['joins'][K]['table']['_']['name']]:\n\t\t\t\t\tT['_']['joins'][K]['table']['_']['columns'];\n\t\t\t}\n\t\t>,\n\t\tSelectResult<\n\t\t\tAccumulateToResult<\n\t\t\t\tT,\n\t\t\t\t'single',\n\t\t\t\tT['_']['joins'],\n\t\t\t\tGetSelectTableSelection<T['_']['table']>\n\t\t\t>,\n\t\t\t'partial',\n\t\t\tT['_']['nullabilityMap']\n\t\t>,\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdateReturning<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tTSelectedFields,\n\t\tSelectResult<\n\t\t\tAccumulateToResult<\n\t\t\t\tT,\n\t\t\t\t'partial',\n\t\t\t\tT['_']['joins'],\n\t\t\t\tTSelectedFields\n\t\t\t>,\n\t\t\t'partial',\n\t\t\tT['_']['nullabilityMap']\n\t\t>,\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdatePrepare<T extends AnyPgUpdate> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgUpdateDynamic<T extends AnyPgUpdate> = PgUpdate<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['from'],\n\tT['_']['returning'],\n\tT['_']['nullabilityMap']\n>;\n\nexport type PgUpdate<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\tTJoins extends Join[] = [],\n> = PgUpdateBase<TTable, TQueryResult, TFrom, TSelectedFields, TReturning, TNullabilityMap, TJoins, true, never>;\n\nexport type AnyPgUpdate = PgUpdateBase<any, any, any, any, any, any, any, any, any>;\n\nexport interface PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\tTJoins extends Join[] = [],\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly joins: TJoins;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly from: TFrom;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTJoins extends Join[] = [],\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgUpdate';\n\n\tprivate config: PgUpdateConfig;\n\tprivate tableName: string | undefined;\n\tprivate joinsNotNullableMap: Record<string, boolean>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tfrom<TFrom extends PgTable | Subquery | PgViewBase | SQL>(\n\t\tsource: TableLikeHasEmptySelection<TFrom> extends true ? DrizzleTypeError<\n\t\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t\t>\n\t\t\t: TFrom,\n\t): PgUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tconst src = source as TFrom;\n\t\tconst tableName = getTableLikeName(src);\n\t\tif (typeof tableName === 'string') {\n\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t}\n\t\tthis.config.from = src;\n\t\treturn this as any;\n\t}\n\n\tprivate getTableLikeFields(table: PgTable | Subquery | PgViewBase): Record<string, unknown> {\n\t\tif (is(table, PgTable)) {\n\t\t\treturn table[Table.Symbol.Columns];\n\t\t} else if (is(table, Subquery)) {\n\t\t\treturn table._.selectedFields;\n\t\t}\n\t\treturn table[ViewBaseConfig].selectedFields;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): PgUpdateJoinFn<this, TDynamic, TJoinType> {\n\t\treturn ((\n\t\t\ttable: PgTable | Subquery | PgViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from && !is(this.config.from, SQL)\n\t\t\t\t\t? this.getTableLikeFields(this.config.from)\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): PgUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields?: SelectedFields,\n\t): PgUpdateWithout<AnyPgUpdate, TDynamic, 'returning'> {\n\t\tif (!fields) {\n\t\t\tfields = Object.assign({}, this.config.table[Table.Symbol.Columns]);\n\n\t\t\tif (this.config.from) {\n\t\t\t\tconst tableName = getTableLikeName(this.config.from);\n\n\t\t\t\tif (typeof tableName === 'string' && this.config.from && !is(this.config.from, SQL)) {\n\t\t\t\t\tconst fromFields = this.getTableLikeFields(this.config.from);\n\t\t\t\t\tfields[tableName] = fromFields as any;\n\t\t\t\t}\n\n\t\t\t\tfor (const join of this.config.joins) {\n\t\t\t\t\tconst tableName = getTableLikeName(join.table);\n\n\t\t\t\t\tif (typeof tableName === 'string' && !is(join.table, SQL)) {\n\t\t\t\t\t\tconst fromFields = this.getTableLikeFields(join.table);\n\t\t\t\t\t\tfields[tableName] = fromFields as any;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgUpdatePrepare<this> {\n\t\tconst query = this.session.prepareQuery<\n\t\t\tPreparedQueryConfig & { execute: TReturning[] }\n\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query;\n\t}\n\n\tprepare(name: string): PgUpdatePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":["tableName"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13961, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13967, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/insert.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { IndexColumn } from '~/pg-core/indexes.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable, TableConfig } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport type { InferInsertModel } from '~/table.ts';\nimport { Columns, getTableName, Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { haveSameKeys, mapUpdateSet, type NeonAuthToken, orderSelectedFields } from '~/utils.ts';\nimport type { AnyPgColumn, PgColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { PgUpdateSetSource } from './update.ts';\n\nexport interface PgInsertConfig<TTable extends PgTable = PgTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | PgInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturningFields?: SelectedFieldsFlat;\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n\toverridingSystemValue_?: boolean;\n}\n\nexport type PgInsertValue<TTable extends PgTable<TableConfig>, OverrideT extends boolean = false> =\n\t& {\n\t\t[Key in keyof InferInsertModel<TTable, { dbColumnNames: false; override: OverrideT }>]:\n\t\t\t| InferInsertModel<TTable, { dbColumnNames: false; override: OverrideT }>[Key]\n\t\t\t| SQL\n\t\t\t| Placeholder;\n\t}\n\t& {};\n\nexport type PgInsertSelectQueryBuilder<TTable extends PgTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnyPgColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class PgInsertBuilder<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tOverrideT extends boolean = false,\n> {\n\tstatic readonly [entityKind]: string = 'PgInsertBuilder';\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t\tprivate overridingSystemValue_?: boolean,\n\t) {}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverridingSystemValue(): Omit<PgInsertBuilder<TTable, TQueryResult, true>, 'overridingSystemValue'> {\n\t\tthis.overridingSystemValue_ = true;\n\t\treturn this as any;\n\t}\n\n\tvalues(value: PgInsertValue<TTable, OverrideT>): PgInsertBase<TTable, TQueryResult>;\n\tvalues(values: PgInsertValue<TTable, OverrideT>[]): PgInsertBase<TTable, TQueryResult>;\n\tvalues(\n\t\tvalues: PgInsertValue<TTable, OverrideT> | PgInsertValue<TTable, OverrideT>[],\n\t): PgInsertBase<TTable, TQueryResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\treturn new PgInsertBase(\n\t\t\tthis.table,\n\t\t\tmappedValues,\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t\tfalse,\n\t\t\tthis.overridingSystemValue_,\n\t\t).setToken(this.authToken) as any;\n\t}\n\n\tselect(selectQuery: (qb: QueryBuilder) => PgInsertSelectQueryBuilder<TTable>): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: SQL): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: PgInsertSelectQueryBuilder<TTable>): PgInsertBase<TTable, TQueryResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| PgInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => PgInsertSelectQueryBuilder<TTable> | SQL),\n\t): PgInsertBase<TTable, TQueryResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new PgInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type PgInsertWithout<T extends AnyPgInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tPgInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['queryResult'],\n\t\t\t\tT['_']['selectedFields'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type PgInsertReturning<\n\tT extends AnyPgInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tTSelectedFields,\n\tSelectResultFields<TSelectedFields>,\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport type PgInsertReturningAll<T extends AnyPgInsert, TDynamic extends boolean> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['table']['_']['columns'],\n\tT['_']['table']['$inferSelect'],\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport interface PgInsertOnConflictDoUpdateConfig<T extends AnyPgInsert> {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: PgUpdateSetSource<T['_']['table']>;\n}\n\nexport type PgInsertPrepare<T extends AnyPgInsert> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgInsertDynamic<T extends AnyPgInsert> = PgInsert<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgInsert = PgInsertBase<any, any, any, any, any, any>;\n\nexport type PgInsert<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = ColumnsSelection | undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgInsertBase<TTable, TQueryResult, TSelectedFields, TReturning, true, never>;\n\nexport interface PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tTypedQueryBuilder<\n\t\t\tTSelectedFields,\n\t\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t\t>,\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgInsert';\n\n\tprivate config: PgInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: PgInsertConfig['values'],\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t\toverridingSystemValue_?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select, overridingSystemValue_ };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): PgInsertWithout<PgInsertReturningAll<this, TDynamic>, TDynamic, 'returning'>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgInsertWithout<PgInsertReturning<this, TDynamic, TSelectedFields>, TDynamic, 'returning'>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgInsertWithout<AnyPgInsert, TDynamic, 'returning'> {\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(\n\t\tconfig: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {},\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tlet targetColumn = '';\n\t\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t\t? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(',')\n\t\t\t\t: this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\t\tthis.config.onConflict = sql`(${sql.raw(targetColumn)})${whereSql} do nothing`;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     targetWhere: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(\n\t\tconfig: PgInsertOnConflictDoUpdateConfig<this>,\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tlet targetColumn = '';\n\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(',')\n\t\t\t: this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n\t\tthis.config.onConflict = sql`(${\n\t\t\tsql.raw(targetColumn)\n\t\t})${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgInsertPrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgInsertPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14168, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/delete.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { getTableName, Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { type NeonAuthToken, orderSelectedFields } from '~/utils.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type PgDeleteWithout<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tPgDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['queryResult'],\n\t\t\tT['_']['selectedFields'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type PgDelete<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgDeleteBase<TTable, TQueryResult, TSelectedFields, TReturning, true, never>;\n\nexport interface PgDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: PgTable;\n\treturningFields?: SelectedFieldsFlat;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgDeleteReturningAll<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['table']['_']['columns'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeleteReturning<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tTSelectedFields,\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeletePrepare<T extends AnyPgDeleteBase> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgDeleteDynamic<T extends AnyPgDeleteBase> = PgDelete<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['selectedFields'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgDeleteBase = PgDeleteBase<any, any, any, any, any, any>;\n\nexport interface PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tTypedQueryBuilder<\n\t\t\tTSelectedFields,\n\t\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t\t>,\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgDelete';\n\n\tprivate config: PgDeleteConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * await db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * await db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgDeletePrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgDeletePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAiB3B,SAAS,cAAc,aAAa;AAEpC,SAA6B,2BAA2B;AADxD,SAAS,cAAc;AAJvB,SAAS,6BAA6B;AAFtC,SAAS,oBAAoB;;;;;;;AAwHtB,MAAM,uPAQH,eAAA,CAQV;IAKC,YACC,KAAA,EACQ,OAAA,EACA,OAAA,EACR,QAAA,CACC;QACD,KAAA,CAAM;QAJE,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;QAIR,IAAA,CAAK,MAAA,GAAS;YAAE;YAAO;QAAS;IACjC;IAZA,OAAA,yNAA0B,aAAU,CAAA,GAAY,WAAA;IAExC,OAAA;IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,GAyCR,MAAM,KAAA,EAAkE;QACvE,IAAA,CAAK,MAAA,CAAO,KAAA,GAAQ;QACpB,OAAO,IAAA;IACR;IA0BA,UACC,SAA6B,IAAA,CAAK,MAAA,CAAO,KAAA,wNAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,EAC1B;QACzC,IAAA,CAAK,MAAA,CAAO,eAAA,GAAkB;QAC9B,IAAA,CAAK,MAAA,CAAO,SAAA,8NAAY,sBAAA,EAA8B,MAAM;QAC5D,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,SAAc;QACb,OAAO,IAAA,CAAK,OAAA,CAAQ,gBAAA,CAAiB,IAAA,CAAK,MAAM;IACjD;IAEA,QAAe;QACd,MAAM,EAAE,SAAS,QAAA,EAAU,GAAG,KAAK,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC;QAC5E,OAAO;IACR;IAAA,cAAA,GAGA,SAAS,IAAA,EAAsC;QAC9C,gOAAO,SAAA,CAAO,eAAA,CAAgB,wBAAwB,MAAM;YAC3D,OAAO,IAAA,CAAK,OAAA,CAAQ,YAAA,CAIlB,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,GAAG,IAAA,CAAK,MAAA,CAAO,SAAA,EAAW,MAAM,IAAI;QAC5E,CAAC;IACF;IAEA,QAAQ,IAAA,EAAqC;QAC5C,OAAO,IAAA,CAAK,QAAA,CAAS,IAAI;IAC1B;IAEQ,UAAA;IAAA,cAAA,GAER,SAAS,KAAA,EAAuB;QAC/B,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAES,UAAkD,CAAC,sBAAsB;QACjF,OAAO,kOAAA,CAAO,eAAA,CAAgB,qBAAqB,MAAM;YACxD,OAAO,IAAA,CAAK,QAAA,CAAS,EAAE,OAAA,CAAQ,mBAAmB,IAAA,CAAK,SAAS;QACjE,CAAC;IACF,EAAA;IAAA,cAAA,GAGA,oBAAiD;QAChD,OACC,IAAA,CAAK,MAAA,CAAO,eAAA,GACT,IAAI,MACL,IAAA,CAAK,MAAA,CAAO,eAAA,EACZ,wOAAI,wBAAA,CAAsB;YACzB,kOAAO,eAAA,EAAa,IAAA,CAAK,MAAA,CAAO,KAAK;YACrC,oBAAoB;YACpB,aAAa;QACd,CAAC,KAEA,KAAA;IAEL;IAEA,WAAkC;QACjC,OAAO,IAAA;IACR;AACD","ignoreList":[0]}},
    {"offset": {"line": 14270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14276, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/refresh-materialized-view.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgMaterializedView } from '~/pg-core/view.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { NeonAuthToken } from '~/utils';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends\n\t\tQueryPromise<PgQueryResultKind<TQueryResult, never>>,\n\t\tRunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>,\n\t\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: PgQueryResultKind<TQueryResult, never>;\n\t};\n}\n\nexport class PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends QueryPromise<PgQueryResultKind<TQueryResult, never>>\n\timplements RunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgRefreshMaterializedView';\n\n\tprivate config: {\n\t\tview: PgMaterializedView;\n\t\tconcurrently?: boolean;\n\t\twithNoData?: boolean;\n\t};\n\n\tconstructor(\n\t\tview: PgMaterializedView,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { view };\n\t}\n\n\tconcurrently(): this {\n\t\tif (this.config.withNoData !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.concurrently = true;\n\t\treturn this;\n\t}\n\n\twithNoData(): this {\n\t\tif (this.config.concurrently !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.withNoData = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRefreshMaterializedViewQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAa3B,SAAS,cAAc;AAHvB,SAAS,oBAAoB;;;;AAmBtB,MAAM,oQACJ,eAAA,CAET;IASC,YACC,IAAA,EACQ,OAAA,EACA,OAAA,CACP;QACD,KAAA,CAAM;QAHE,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;QAGR,IAAA,CAAK,MAAA,GAAS;YAAE;QAAK;IACtB;IAfA,OAAA,yNAA0B,aAAU,CAAA,GAAY,4BAAA;IAExC,OAAA;IAeR,eAAqB;QACpB,IAAI,IAAA,CAAK,MAAA,CAAO,UAAA,KAAe,KAAA,GAAW;YACzC,MAAM,IAAI,MAAM,iDAAiD;QAClE;QACA,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,OAAO,IAAA;IACR;IAEA,aAAmB;QAClB,IAAI,IAAA,CAAK,MAAA,CAAO,YAAA,KAAiB,KAAA,GAAW;YAC3C,MAAM,IAAI,MAAM,iDAAiD;QAClE;QACA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,SAAc;QACb,OAAO,IAAA,CAAK,OAAA,CAAQ,iCAAA,CAAkC,IAAA,CAAK,MAAM;IAClE;IAEA,QAAe;QACd,MAAM,EAAE,SAAS,QAAA,EAAU,GAAG,KAAK,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC;QAC5E,OAAO;IACR;IAAA,cAAA,GAGA,SAAS,IAAA,EAIP;QACD,gOAAO,SAAA,CAAO,eAAA,CAAgB,wBAAwB,MAAM;YAC3D,OAAO,IAAA,CAAK,OAAA,CAAQ,YAAA,CAAa,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,GAAG,KAAA,GAAW,MAAM,IAAI;QAC/F,CAAC;IACF;IAEA,QAAQ,IAAA,EAIN;QACD,OAAO,IAAA,CAAK,QAAA,CAAS,IAAI;IAC1B;IAEQ,UAAA;IAAA,cAAA,GAER,SAAS,KAAA,EAAsB;QAC9B,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAEA,UAAkD,CAAC,sBAAsB;QACxE,gOAAO,SAAA,CAAO,eAAA,CAAgB,qBAAqB,MAAM;YACxD,OAAO,IAAA,CAAK,QAAA,CAAS,EAAE,OAAA,CAAQ,mBAAmB,IAAA,CAAK,SAAS;QACjE,CAAC;IACF,EAAA;AACD","ignoreList":[0]}},
    {"offset": {"line": 14338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14344, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/query-builders/raw.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\n\nexport interface PgRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'pg'>, SQLWrapper {}\n\nexport class PgRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'PgRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\tprivate sql: SQL,\n\t\tprivate query: Query,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\tgetSQL() {\n\t\treturn this.sql;\n\t}\n\n\tgetQuery() {\n\t\treturn this.query;\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode() {\n\t\treturn false;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;;;AAOtB,MAAM,gPAAuB,eAAA,CAEpC;IAQC,YACQ,OAAA,EACC,GAAA,EACA,KAAA,EACA,cAAA,CACP;QACD,KAAA,CAAM;QALC,IAAA,CAAA,OAAA,GAAA;QACC,IAAA,CAAA,GAAA,GAAA;QACA,IAAA,CAAA,KAAA,GAAA;QACA,IAAA,CAAA,cAAA,GAAA;IAGT;IAdA,OAAA,yNAA0B,aAAU,CAAA,GAAY,QAAA;IAAA,cAAA,GAiBhD,SAAS;QACR,OAAO,IAAA,CAAK,GAAA;IACb;IAEA,WAAW;QACV,OAAO,IAAA,CAAK,KAAA;IACb;IAEA,UAAU,MAAA,EAAiB,WAAA,EAAuB;QACjD,OAAO,cAAc,IAAA,CAAK,cAAA,CAAe,MAAM,IAAI;IACpD;IAEA,WAA0B;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,wBAAwB;QACvB,OAAO;IACR;AACD","ignoreList":[0]}},
    {"offset": {"line": 14378, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14384, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/db.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport {\n\tPgDeleteBase,\n\tPgInsertBuilder,\n\tPgSelectBuilder,\n\tPgUpdateBuilder,\n\tQueryBuilder,\n} from '~/pg-core/query-builders/index.ts';\nimport type {\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPgTransaction,\n\tPgTransactionConfig,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError, NeonAuthToken } from '~/utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport { PgCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { PgRaw } from './query-builders/raw.ts';\nimport { PgRefreshMaterializedView } from './query-builders/refresh-materialized-view.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithBuilder } from './subquery.ts';\nimport type { PgViewBase } from './view-base.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport class PgDatabase<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'PgDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t\treadonly session: PgSession<TQueryResult, TFullSchema, TSchema>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: PgDialect,\n\t\t/** @internal */\n\t\treadonly session: PgSession<any, any, any>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t\tsession,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t\tsession,\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\t(this.query as PgDatabase<TQueryResult, Record<string, any>>['query'])[tableName] = new RelationalQueryBuilder(\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as PgTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst self = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t);\n\t\t};\n\t\treturn { as };\n\t};\n\n\t$count(\n\t\tsource: PgTable | PgViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new PgCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): PgSelectBuilder<undefined>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction select<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct on` expression to the select query.\n\t\t *\n\t\t * Calling this method will specify how the unique rows are determined.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param on The expression defining uniqueness.\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select the first row for each unique brand from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand])\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t *\n\t\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand, cars.color);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgInsertBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\t\treturn new PgDeleteBase(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): PgSelectBuilder<undefined>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselect<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct on` expression to the select query.\n\t *\n\t * Calling this method will specify how the unique rows are determined.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param on The expression defining uniqueness.\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select the first row for each unique brand from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand])\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t *\n\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand, cars.color);\n\t * ```\n\t */\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: TSelection,\n\t): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\treturn new PgUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\treturn new PgInsertBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\treturn new PgDeleteBase(table, this.session, this.dialect);\n\t}\n\n\trefreshMaterializedView<TView extends PgMaterializedView>(view: TView): PgRefreshMaterializedView<TQueryResult> {\n\t\treturn new PgRefreshMaterializedView(view, this.session, this.dialect);\n\t}\n\n\tprotected authToken?: NeonAuthToken;\n\n\texecute<TRow extends Record<string, unknown> = Record<string, unknown>>(\n\t\tquery: SQLWrapper | string,\n\t): PgRaw<PgQueryResultKind<TQueryResult, TRow>> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tconst builtQuery = this.dialect.sqlToQuery(sequel);\n\t\tconst prepared = this.session.prepareQuery<\n\t\t\tPreparedQueryConfig & { execute: PgQueryResultKind<TQueryResult, TRow> }\n\t\t>(\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\treturn new PgRaw(\n\t\t\t() => prepared.execute(undefined, this.authToken),\n\t\t\tsequel,\n\t\t\tbuiltQuery,\n\t\t\t(result) => prepared.mapResult(result, true),\n\t\t);\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type PgWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tHKT extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends PgDatabase<\n\t\tHKT,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): PgWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst selectDistinctOn: Q['selectDistinctOn'] = (...args: [any]) => getReplica(replicas).selectDistinctOn(...args);\n\tconst $count: Q['$count'] = (...args: [any]) => getReplica(replicas).$count(...args);\n\tconst _with: Q['with'] = (...args: any) => getReplica(replicas).with(...args);\n\tconst $with: Q['$with'] = (arg: any) => getReplica(replicas).$with(arg) as any;\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst execute: Q['execute'] = (...args: [any]) => primary.execute(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\tconst refreshMaterializedView: Q['refreshMaterializedView'] = (...args: [any]) =>\n\t\tprimary.refreshMaterializedView(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\texecute,\n\t\ttransaction,\n\t\trefreshMaterializedView,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\tselectDistinctOn,\n\t\t$count,\n\t\t$with,\n\t\twith: _with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14715, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/pg-core/session.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { type Query, type SQL, sql } from '~/sql/index.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { NeonAuthToken } from '~/utils.ts';\nimport { PgDatabase } from './db.ts';\nimport type { PgDialect } from './dialect.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\texecute: unknown;\n\tall: unknown;\n\tvalues: unknown;\n}\n\nexport abstract class PgPreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tconstructor(protected query: Query) {}\n\n\tprotected authToken?: NeonAuthToken;\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tmapResult(response: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn response;\n\t}\n\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\tstatic readonly [entityKind]: string = 'PgPreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tabstract execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;\n\t/** @internal */\n\tabstract execute(placeholderValues?: Record<string, unknown>, token?: NeonAuthToken): Promise<T['execute']>;\n\t/** @internal */\n\tabstract execute(placeholderValues?: Record<string, unknown>, token?: NeonAuthToken): Promise<T['execute']>;\n\n\t/** @internal */\n\tabstract all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface PgTransactionConfig {\n\tisolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n\taccessMode?: 'read only' | 'read write';\n\tdeferrable?: boolean;\n}\n\nexport abstract class PgSession<\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> {\n\tstatic readonly [entityKind]: string = 'PgSession';\n\n\tconstructor(protected dialect: PgDialect) {}\n\n\tabstract prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => T['execute'],\n\t): PgPreparedQuery<T>;\n\n\texecute<T>(query: SQL): Promise<T>;\n\t/** @internal */\n\texecute<T>(query: SQL, token?: NeonAuthToken): Promise<T>;\n\t/** @internal */\n\texecute<T>(query: SQL, token?: NeonAuthToken): Promise<T> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\tconst prepared = tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\t\treturn this.prepareQuery<PreparedQueryConfig & { execute: T }>(\n\t\t\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn prepared.setToken(token).execute(undefined, token);\n\t\t});\n\t}\n\n\tall<T = unknown>(query: SQL): Promise<T[]> {\n\t\treturn this.prepareQuery<PreparedQueryConfig & { all: T[] }>(\n\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t).all();\n\t}\n\n\tasync count(sql: SQL): Promise<number>;\n\t/** @internal */\n\tasync count(sql: SQL, token?: NeonAuthToken): Promise<number>;\n\t/** @internal */\n\tasync count(sql: SQL, token?: NeonAuthToken): Promise<number> {\n\t\tconst res = await this.execute<[{ count: string }]>(sql, token);\n\n\t\treturn Number(\n\t\t\tres[0]['count'],\n\t\t);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T>;\n}\n\nexport abstract class PgTransaction<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> extends PgDatabase<TQueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'PgTransaction';\n\n\tconstructor(\n\t\tdialect: PgDialect,\n\t\tsession: PgSession<any, any, any>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n\n\t/** @internal */\n\tgetTransactionConfigSQL(config: PgTransactionConfig): SQL {\n\t\tconst chunks: string[] = [];\n\t\tif (config.isolationLevel) {\n\t\t\tchunks.push(`isolation level ${config.isolationLevel}`);\n\t\t}\n\t\tif (config.accessMode) {\n\t\t\tchunks.push(config.accessMode);\n\t\t}\n\t\tif (typeof config.deferrable === 'boolean') {\n\t\t\tchunks.push(config.deferrable ? 'deferrable' : 'not deferrable');\n\t\t}\n\t\treturn sql.raw(chunks.join(' '));\n\t}\n\n\tsetTransaction(config: PgTransactionConfig): Promise<void> {\n\t\treturn this.session.execute(sql`set transaction ${this.getTransactionConfigSQL(config)}`);\n\t}\n\n\tabstract override transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t): Promise<T>;\n}\n\nexport interface PgQueryResultHKT {\n\treadonly $brand: 'PgQueryResultHKT';\n\treadonly row: unknown;\n\treadonly type: unknown;\n}\n\nexport type PgQueryResultKind<TKind extends PgQueryResultHKT, TRow> = (TKind & {\n\treadonly row: TRow;\n})['type'];\n"],"names":["sql"],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAK3B,SAAS,cAAc;AAJvB,SAAS,gCAAgC;AAGzC,SAA+B,WAAW;AAG1C,SAAS,kBAAkB;;;;;;AAUpB,MAAe,gBAAwE;IAC7F,YAAsB,KAAA,CAAc;QAAd,IAAA,CAAA,KAAA,GAAA;IAAe;IAE3B,UAAA;IAEV,WAAkB;QACjB,OAAO,IAAA,CAAK,KAAA;IACb;IAEA,UAAU,QAAA,EAAmB,YAAA,EAAiC;QAC7D,OAAO;IACR;IAAA,cAAA,GAGA,SAAS,KAAA,EAAuB;QAC/B,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAEA,OAAA,yNAAiB,aAAU,CAAA,GAAY,kBAAA;IAAA,cAAA,GAGvC,oBAAA;AAaD;AAQO,MAAe,UAIpB;IAGD,YAAsB,OAAA,CAAoB;QAApB,IAAA,CAAA,OAAA,GAAA;IAAqB;IAF3C,OAAA,yNAAiB,aAAU,CAAA,GAAY,YAAA;IAAA,cAAA,GAgBvC,QAAW,KAAA,EAAY,KAAA,EAAmC;QACzD,gOAAO,SAAA,CAAO,eAAA,CAAgB,qBAAqB,MAAM;YACxD,MAAM,oOAAW,SAAA,CAAO,eAAA,CAAgB,wBAAwB,MAAM;gBACrE,OAAO,IAAA,CAAK,YAAA,CACX,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,KAAK,GAC7B,KAAA,GACA,KAAA,GACA;YAEF,CAAC;YAED,OAAO,SAAS,QAAA,CAAS,KAAK,EAAE,OAAA,CAAQ,KAAA,GAAW,KAAK;QACzD,CAAC;IACF;IAEA,IAAiB,KAAA,EAA0B;QAC1C,OAAO,IAAA,CAAK,YAAA,CACX,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,KAAK,GAC7B,KAAA,GACA,KAAA,GACA,OACC,GAAA,CAAI;IACP;IAAA,cAAA,GAMA,MAAM,MAAMA,IAAAA,EAAU,KAAA,EAAwC;QAC7D,MAAM,MAAM,MAAM,IAAA,CAAK,OAAA,CAA6BA,MAAK,KAAK;QAE9D,OAAO,OACN,GAAA,CAAI,CAAC,CAAA,CAAE,OAAO,CAAA;IAEhB;AAMD;AAEO,MAAe,wPAIZ,aAAA,CAA+C;IAGxD,YACC,OAAA,EACA,OAAA,EACU,MAAA,EAKS,cAAc,CAAA,CAChC;QACD,KAAA,CAAM,SAAS,SAAS,MAAM;QAPpB,IAAA,CAAA,MAAA,GAAA;QAKS,IAAA,CAAA,WAAA,GAAA;IAGpB;IAbA,OAAA,yNAA0B,aAAU,CAAA,GAAY,gBAAA;IAehD,WAAkB;QACjB,MAAM,4NAAI,2BAAA,CAAyB;IACpC;IAAA,cAAA,GAGA,wBAAwB,MAAA,EAAkC;QACzD,MAAM,SAAmB,CAAC,CAAA;QAC1B,IAAI,OAAO,cAAA,EAAgB;YAC1B,OAAO,IAAA,CAAK,CAAA,gBAAA,EAAmB,OAAO,cAAc,EAAE;QACvD;QACA,IAAI,OAAO,UAAA,EAAY;YACtB,OAAO,IAAA,CAAK,OAAO,UAAU;QAC9B;QACA,IAAI,OAAO,OAAO,UAAA,KAAe,WAAW;YAC3C,OAAO,IAAA,CAAK,OAAO,UAAA,GAAa,eAAe,gBAAgB;QAChE;QACA,mOAAO,MAAA,CAAI,GAAA,CAAI,OAAO,IAAA,CAAK,GAAG,CAAC;IAChC;IAEA,eAAe,MAAA,EAA4C;QAC1D,OAAO,IAAA,CAAK,OAAA,CAAQ,OAAA,6NAAQ,MAAA,CAAA,gBAAA,EAAsB,IAAA,CAAK,uBAAA,CAAwB,MAAM,CAAC,CAAA,CAAE;IACzF;AAKD","ignoreList":[0]}},
    {"offset": {"line": 14798, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14804, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/logger.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;;AAUpB,MAAM,iBAAsC;IAClD,OAAA,yNAAiB,aAAU,CAAA,GAAY,mBAAA;IAEvC,MAAM,OAAA,EAAiB;QACtB,QAAQ,GAAA,CAAI,OAAO;IACpB;AACD;AAEO,MAAM,cAAgC;IAC5C,OAAA,yNAAiB,aAAU,CAAA,GAAY,gBAAA;IAE9B,OAAA;IAET,YAAY,MAAA,CAAgC;QAC3C,IAAA,CAAK,MAAA,GAAS,QAAQ,UAAU,IAAI,iBAAiB;IACtD;IAEA,SAAS,KAAA,EAAe,MAAA,EAAyB;QAChD,MAAM,oBAAoB,OAAO,GAAA,CAAI,CAAC,MAAM;YAC3C,IAAI;gBACH,OAAO,KAAK,SAAA,CAAU,CAAC;YACxB,EAAA,OAAQ;gBACP,OAAO,OAAO,CAAC;YAChB;QACD,CAAC;QACD,MAAM,YAAY,kBAAkB,MAAA,GAAS,CAAA,aAAA,EAAgB,kBAAkB,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,CAAA,GAAM;QAC/F,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,OAAA,EAAU,KAAK,GAAG,SAAS,EAAE;IAChD;AACD;AAEO,MAAM,WAA6B;IACzC,OAAA,yNAAiB,aAAU,CAAA,GAAY,aAAA;IAEvC,WAAiB,CAEjB;AACD","ignoreList":[0]}},
    {"offset": {"line": 14841, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14847, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/node-postgres/session.ts"],"sourcesContent":["import type { Client, PoolClient, QueryArrayConfig, QueryConfig, QueryResult, QueryResultRow } from 'pg';\nimport pg from 'pg';\nimport { entityKind } from '~/entity.ts';\nimport { type Logger, NoopLogger } from '~/logger.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport { PgTransaction } from '~/pg-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/pg-core/query-builders/select.types.ts';\nimport type { PgQueryResultHKT, PgTransactionConfig, PreparedQueryConfig } from '~/pg-core/session.ts';\nimport { PgPreparedQuery, PgSession } from '~/pg-core/session.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { fillPlaceholders, type Query, type SQL, sql } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport { type Assume, mapResultRow } from '~/utils.ts';\n\nconst { Pool, types } = pg;\n\nexport type NodePgClient = pg.Pool | PoolClient | Client;\n\nexport class NodePgPreparedQuery<T extends PreparedQueryConfig> extends PgPreparedQuery<T> {\n\tstatic override readonly [entityKind]: string = 'NodePgPreparedQuery';\n\n\tprivate rawQueryConfig: QueryConfig;\n\tprivate queryConfig: QueryArrayConfig;\n\n\tconstructor(\n\t\tprivate client: NodePgClient,\n\t\tqueryString: string,\n\t\tprivate params: unknown[],\n\t\tprivate logger: Logger,\n\t\tprivate fields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tprivate customResultMapper?: (rows: unknown[][]) => T['execute'],\n\t) {\n\t\tsuper({ sql: queryString, params });\n\t\tthis.rawQueryConfig = {\n\t\t\tname,\n\t\t\ttext: queryString,\n\t\t\ttypes: {\n\t\t\t\t// @ts-ignore\n\t\t\t\tgetTypeParser: (typeId, format) => {\n\t\t\t\t\tif (typeId === types.builtins.TIMESTAMPTZ) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.TIMESTAMP) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.DATE) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.INTERVAL) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn types.getTypeParser(typeId, format);\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tthis.queryConfig = {\n\t\t\tname,\n\t\t\ttext: queryString,\n\t\t\trowMode: 'array',\n\t\t\ttypes: {\n\t\t\t\t// @ts-ignore\n\t\t\t\tgetTypeParser: (typeId, format) => {\n\t\t\t\t\tif (typeId === types.builtins.TIMESTAMPTZ) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.TIMESTAMP) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.DATE) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeId === types.builtins.INTERVAL) {\n\t\t\t\t\t\treturn (val) => val;\n\t\t\t\t\t}\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn types.getTypeParser(typeId, format);\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\tasync execute(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['execute']> {\n\t\treturn tracer.startActiveSpan('drizzle.execute', async () => {\n\t\t\tconst params = fillPlaceholders(this.params, placeholderValues);\n\n\t\t\tthis.logger.logQuery(this.rawQueryConfig.text, params);\n\n\t\t\tconst { fields, rawQueryConfig: rawQuery, client, queryConfig: query, joinsNotNullableMap, customResultMapper } =\n\t\t\t\tthis;\n\t\t\tif (!fields && !customResultMapper) {\n\t\t\t\treturn tracer.startActiveSpan('drizzle.driver.execute', async (span) => {\n\t\t\t\t\tspan?.setAttributes({\n\t\t\t\t\t\t'drizzle.query.name': rawQuery.name,\n\t\t\t\t\t\t'drizzle.query.text': rawQuery.text,\n\t\t\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t\t\t});\n\t\t\t\t\treturn client.query(rawQuery, params);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst result = await tracer.startActiveSpan('drizzle.driver.execute', (span) => {\n\t\t\t\tspan?.setAttributes({\n\t\t\t\t\t'drizzle.query.name': query.name,\n\t\t\t\t\t'drizzle.query.text': query.text,\n\t\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t\t});\n\t\t\t\treturn client.query(query, params);\n\t\t\t});\n\n\t\t\treturn tracer.startActiveSpan('drizzle.mapResponse', () => {\n\t\t\t\treturn customResultMapper\n\t\t\t\t\t? customResultMapper(result.rows)\n\t\t\t\t\t: result.rows.map((row) => mapResultRow<T['execute']>(fields!, row, joinsNotNullableMap));\n\t\t\t});\n\t\t});\n\t}\n\n\tall(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['all']> {\n\t\treturn tracer.startActiveSpan('drizzle.execute', () => {\n\t\t\tconst params = fillPlaceholders(this.params, placeholderValues);\n\t\t\tthis.logger.logQuery(this.rawQueryConfig.text, params);\n\t\t\treturn tracer.startActiveSpan('drizzle.driver.execute', (span) => {\n\t\t\t\tspan?.setAttributes({\n\t\t\t\t\t'drizzle.query.name': this.rawQueryConfig.name,\n\t\t\t\t\t'drizzle.query.text': this.rawQueryConfig.text,\n\t\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t\t});\n\t\t\t\treturn this.client.query(this.rawQueryConfig, params).then((result) => result.rows);\n\t\t\t});\n\t\t});\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n\nexport interface NodePgSessionOptions {\n\tlogger?: Logger;\n}\n\nexport class NodePgSession<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends PgSession<NodePgQueryResultHKT, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'NodePgSession';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: NodePgClient,\n\t\tdialect: PgDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: NodePgSessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => T['execute'],\n\t): PgPreparedQuery<T> {\n\t\treturn new NodePgPreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery.sql,\n\t\t\tquery.params,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\tname,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (tx: NodePgTransaction<TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig | undefined,\n\t): Promise<T> {\n\t\tconst session = this.client instanceof Pool // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t? new NodePgSession(await this.client.connect(), this.dialect, this.schema, this.options)\n\t\t\t: this;\n\t\tconst tx = new NodePgTransaction<TFullSchema, TSchema>(this.dialect, session, this.schema);\n\t\tawait tx.execute(sql`begin${config ? sql` ${tx.getTransactionConfigSQL(config)}` : undefined}`);\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait tx.execute(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tawait tx.execute(sql`rollback`);\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tif (this.client instanceof Pool) { // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t(session.client as PoolClient).release();\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async count(sql: SQL): Promise<number> {\n\t\tconst res = await this.execute<{ rows: [{ count: string }] }>(sql);\n\t\treturn Number(\n\t\t\tres['rows'][0]['count'],\n\t\t);\n\t}\n}\n\nexport class NodePgTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends PgTransaction<NodePgQueryResultHKT, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'NodePgTransaction';\n\n\toverride async transaction<T>(transaction: (tx: NodePgTransaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex + 1}`;\n\t\tconst tx = new NodePgTransaction<TFullSchema, TSchema>(\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tthis.schema,\n\t\t\tthis.nestedIndex + 1,\n\t\t);\n\t\tawait tx.execute(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait tx.execute(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait tx.execute(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport interface NodePgQueryResultHKT extends PgQueryResultHKT {\n\ttype: QueryResult<Assume<this['row'], QueryResultRow>>;\n}\n"],"names":["sql"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 15028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15034, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/drizzle-orm%400.39.3_pg%408.13.3/node_modules/src/node-postgres/driver.ts"],"sourcesContent":["import pg, { type Pool, type PoolConfig } from 'pg';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport { PgDatabase } from '~/pg-core/db.ts';\nimport { PgDialect } from '~/pg-core/dialect.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { type DrizzleConfig, isConfig } from '~/utils.ts';\nimport type { NodePgClient, NodePgQueryResultHKT } from './session.ts';\nimport { NodePgSession } from './session.ts';\n\nexport interface PgDriverOptions {\n\tlogger?: Logger;\n}\n\nexport class NodePgDriver {\n\tstatic readonly [entityKind]: string = 'NodePgDriver';\n\n\tconstructor(\n\t\tprivate client: NodePgClient,\n\t\tprivate dialect: PgDialect,\n\t\tprivate options: PgDriverOptions = {},\n\t) {\n\t}\n\n\tcreateSession(\n\t\tschema: RelationalSchemaConfig<TablesRelationalConfig> | undefined,\n\t): NodePgSession<Record<string, unknown>, TablesRelationalConfig> {\n\t\treturn new NodePgSession(this.client, this.dialect, schema, { logger: this.options.logger });\n\t}\n}\n\nexport class NodePgDatabase<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends PgDatabase<NodePgQueryResultHKT, TSchema> {\n\tstatic override readonly [entityKind]: string = 'NodePgDatabase';\n}\n\nfunction construct<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends NodePgClient = NodePgClient,\n>(\n\tclient: TClient,\n\tconfig: DrizzleConfig<TSchema> = {},\n): NodePgDatabase<TSchema> & {\n\t$client: TClient;\n} {\n\tconst dialect = new PgDialect({ casing: config.casing });\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst driver = new NodePgDriver(client, dialect, { logger });\n\tconst session = driver.createSession(schema);\n\tconst db = new NodePgDatabase(dialect, session, schema as any) as NodePgDatabase<TSchema>;\n\t(<any> db).$client = client;\n\n\treturn db as any;\n}\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends NodePgClient = Pool,\n>(\n\t...params:\n\t\t| [\n\t\t\tTClient | string,\n\t\t]\n\t\t| [\n\t\t\tTClient | string,\n\t\t\tDrizzleConfig<TSchema>,\n\t\t]\n\t\t| [\n\t\t\t(\n\t\t\t\t& DrizzleConfig<TSchema>\n\t\t\t\t& ({\n\t\t\t\t\tconnection: string | PoolConfig;\n\t\t\t\t} | {\n\t\t\t\t\tclient: TClient;\n\t\t\t\t})\n\t\t\t),\n\t\t]\n): NodePgDatabase<TSchema> & {\n\t$client: TClient;\n} {\n\tif (typeof params[0] === 'string') {\n\t\tconst instance = new pg.Pool({\n\t\t\tconnectionString: params[0],\n\t\t});\n\n\t\treturn construct(instance, params[1] as DrizzleConfig<TSchema> | undefined) as any;\n\t}\n\n\tif (isConfig(params[0])) {\n\t\tconst { connection, client, ...drizzleConfig } = params[0] as (\n\t\t\t& ({ connection?: PoolConfig | string; client?: TClient })\n\t\t\t& DrizzleConfig<TSchema>\n\t\t);\n\n\t\tif (client) return construct(client, drizzleConfig);\n\n\t\tconst instance = typeof connection === 'string'\n\t\t\t? new pg.Pool({\n\t\t\t\tconnectionString: connection,\n\t\t\t})\n\t\t\t: new pg.Pool(connection!);\n\n\t\treturn construct(instance, drizzleConfig) as any;\n\t}\n\n\treturn construct(params[0] as TClient, params[1] as DrizzleConfig<TSchema> | undefined) as any;\n}\n\nexport namespace drizzle {\n\texport function mock<TSchema extends Record<string, unknown> = Record<string, never>>(\n\t\tconfig?: DrizzleConfig<TSchema>,\n\t): NodePgDatabase<TSchema> & {\n\t\t$client: '$client is not available on drizzle.mock()';\n\t} {\n\t\treturn construct({} as any, config) as any;\n\t}\n}\n"],"names":["drizzle"],"mappings":";;;;;AAAA,OAAO,QAAwC;AAC/C,SAAS,kBAAkB;AAa3B,SAAS,qBAAqB;AAV9B,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAF1B,SAAS,qBAAqB;AAG9B;AAMA,SAA6B,gBAAgB;;;;;;;;;AAQtC,MAAM,aAAa;IAGzB,YACS,MAAA,EACA,OAAA,EACA,UAA2B,CAAC,CAAA,CACnC;QAHO,IAAA,CAAA,MAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;IAET;IAPA,OAAA,yNAAiB,aAAU,CAAA,GAAY,eAAA;IASvC,cACC,MAAA,EACiE;QACjE,OAAO,iPAAI,gBAAA,CAAc,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,OAAA,EAAS,QAAQ;YAAE,QAAQ,IAAA,CAAK,OAAA,CAAQ,MAAA;QAAO,CAAC;IAC5F;AACD;AAEO,MAAM,yPAEH,aAAA,CAA0C;IACnD,OAAA,yNAA0B,aAAU,CAAA,GAAY,iBAAA;AACjD;AAEA,SAAS,UAIR,MAAA,EACA,SAAiC,CAAC,CAAA,EAGjC;IACD,MAAM,UAAU,IAAI,mPAAA,CAAU;QAAE,QAAQ,OAAO,MAAA;IAAO,CAAC;IACvD,IAAI;IACJ,IAAI,OAAO,MAAA,KAAW,MAAM;QAC3B,SAAS,IAAI,wOAAA,CAAc;IAC5B,OAAA,IAAW,OAAO,MAAA,KAAW,OAAO;QACnC,SAAS,OAAO,MAAA;IACjB;IAEA,IAAI;IACJ,IAAI,OAAO,MAAA,EAAQ;QAClB,MAAM,gBAAe,8PAAA,EACpB,OAAO,MAAA,6NACP,8BAAA;QAED,SAAS;YACR,YAAY,OAAO,MAAA;YACnB,QAAQ,aAAa,MAAA;YACrB,eAAe,aAAa,aAAA;QAC7B;IACD;IAEA,MAAM,SAAS,IAAI,aAAa,QAAQ,SAAS;QAAE;IAAO,CAAC;IAC3D,MAAM,UAAU,OAAO,aAAA,CAAc,MAAM;IAC3C,MAAM,KAAK,IAAI,eAAe,SAAS,SAAS,MAAa;IACtD,GAAI,OAAA,GAAU;IAErB,OAAO;AACR;AAEO,SAAS,QAAA,GAIZ,MAAA,EAoBF;IACD,IAAI,OAAO,MAAA,CAAO,CAAC,CAAA,KAAM,UAAU;QAClC,MAAM,WAAW,uLAAI,UAAA,CAAG,IAAA,CAAK;YAC5B,kBAAkB,MAAA,CAAO,CAAC,CAAA;QAC3B,CAAC;QAED,OAAO,UAAU,UAAU,MAAA,CAAO,CAAC,CAAuC;IAC3E;IAEA,+NAAI,WAAA,EAAS,MAAA,CAAO,CAAC,CAAC,GAAG;QACxB,MAAM,EAAE,UAAA,EAAY,MAAA,EAAQ,GAAG,cAAc,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA;QAKzD,IAAI,QAAQ,OAAO,UAAU,QAAQ,aAAa;QAElD,MAAM,WAAW,OAAO,eAAe,WACpC,uLAAI,UAAA,CAAG,IAAA,CAAK;YACb,kBAAkB;QACnB,CAAC,IACC,IAAI,6LAAA,CAAG,IAAA,CAAK,UAAW;QAE1B,OAAO,UAAU,UAAU,aAAa;IACzC;IAEA,OAAO,UAAU,MAAA,CAAO,CAAC,CAAA,EAAc,MAAA,CAAO,CAAC,CAAuC;AACvF;AAAA,CAEO,CAAUA,aAAV;IACC,SAAS,KACf,MAAA,EAGC;QACD,OAAO,UAAU,CAAC,GAAU,MAAM;IACnC;IANOA,SAAS,IAAA,GAAA;AAAA,CAAA,EADA,WAAA,CAAA,UAAA,CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 15123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15129, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAkBA,SAASE,IAAI,EAAEC,KAAK,GAAE;AAHtB,cAAc;AAdd,SAASH,kBAAkB,QAAQ,2DAA2D;AAAqC,EAAC;AAYpI,yEAAyE;AAazE,8BAA8B;IAI5BO,SAASC;;;;;;;;IACTC,WAAWC,0DAAAA;AACb,EAAC,QAAA;AAED,MAAA,OAAA;IAAc;IAAA,iCAAoC;QAElD,YAAA;YAAA;YAAA,qCAA4D;gBAC5D,OAAO,KAAA;oBAAMC,cAAc,IAAIX;oBAAAA,iBAAmB;4BAChDY,QAAAA;4BAAAA,GAAY;4BAAA;iCACVC,MAAMZ,UAAUa,QAAQ;sCACxBC,IAAAA,CAAM,CAAA;gCAAA,QAAA;oCAAA,IAAA;oCAAA;iCAAA;;+BACNC,UAAU;;yBACV,2CAA2C;8BAC3CC,IAAAA,CAAAA;oBAAAA;iBAAAA,CAAY;;iBACZC,UAAU;sBACVC,IAAAA,CAAAA,GAAU;gBAAA,CAAE,SAAA;oBAAA,IAAA;oBAAA;iBAAA;;WACd;;KACAC,UAAU;cACRC,OAAAA;YAAAA,IAAYnB;YAAAA;SAAAA;UACd,WAAA;YAAA,IAAA;YAAA;SAAA;QACF,CAAE,eAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 15227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}