{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/packages/db/schema.ts"],"sourcesContent":["import { date, integer, pgEnum, pgTable, primaryKey, text, time } from \"drizzle-orm/pg-core\";\n\n// dates & events\nexport const eventTypeEnum = pgEnum(\"event_type\", [\"event\", \"vortrag\", \"podcast\", \"tv\"])\n\nexport const eventsTable = pgTable(\"events\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    titleDe: text().notNull(),\n    titleEn: text().notNull(),\n    contentDe: text().notNull(),\n    contentEn: text().notNull(),\n    location: text().notNull(),\n    date: date().notNull(),\n    time: time().notNull(),\n    type: eventTypeEnum().notNull(),\n    imagePath: text().notNull(),\n    externalLink: text().notNull(),\n});\n\n\n// founder & team\nexport const peopleTable = pgTable(\"people\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    name: text().notNull(),\n    roleDe: text().notNull(),\n    roleEn: text().notNull(),\n    quoteDe: text().notNull(),\n    quoteEn: text().notNull(),\n    aboutDe: text().notNull(),\n    aboutEn: text().notNull(),\n    imagePath: text()\n});\n\n\n// references and cases\nexport const customergroupsTable = pgTable(\"customers_groups\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    nameDe: text().notNull(),\n    nameEn: text().notNull(),\n    imagesFolder: text().notNull(),\n});\n\nexport const referencesTable = pgTable(\"references\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    name: text().notNull(),\n    content: text().notNull(),\n    position: text().notNull(),\n    imagePath: text().notNull()\n})\n\nexport const casesTable = pgTable(\"cases\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    title: text().notNull(),\n    subtitle: text().notNull(),\n    content: text().notNull(),\n    imagePath: text().notNull()\n})\n\n\n// news & publications\nexport const publicationsTable = pgTable(\"publications\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    title: text().notNull(),\n    date: date().notNull(),\n    author: text().notNull(),\n    content: text().notNull(),\n    imagePath: text().notNull(),\n})\n\nexport const tagsTable = pgTable(\"tags\", {\n    id: integer().primaryKey().generatedAlwaysAsIdentity(),\n    name: text().notNull().unique()\n})\n\nexport const publicationtagsTable = pgTable(\"publication_tags\", {\n    publicationId: integer().notNull().references(() => publicationsTable.id, { onDelete: \"cascade\" }),\n    tagId: integer().notNull().references(() => tagsTable.id, { onDelete: \"cascade\" })\n}, (t) => [\n    primaryKey({ columns: [t.publicationId, t.tagId] })\n],\n)\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/packages/db/index.ts"],"sourcesContent":["import \"dotenv/config\"\nimport { drizzle } from 'drizzle-orm/node-postgres';\n\nexport const db = drizzle({ connection: process.env.DATABASE_URL!, casing: 'snake_case' });\n\nexport * from \"./schema\";\nexport * from \"./actions\";\n\n"],"names":[],"mappings":";;;AACA;;;AAEO,MAAM,KAAK,CAAA,GAAA,2OAAA,CAAA,UAAO,AAAD,EAAE;IAAE,YAAY,QAAQ,GAAG,CAAC,YAAY;IAAG,QAAQ;AAAa"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/packages/db/actions.ts"],"sourcesContent":["'use server'\n\nimport { and, eq, sql, lt, gte, desc } from \"drizzle-orm\"\nimport { db } from \".\";\nimport { eventsTable, eventTypeEnum } from \"./schema\";\n\nexport const getPastEvents = async (lang: 'de' | 'en', eventType: typeof eventTypeEnum.enumValues[number]) => {\n    const currentYear = new Date().getFullYear();\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format = new Date().getFullYear();\n\n    return await db.select({\n        id: eventsTable.id,\n        title: lang === 'de' ? eventsTable.titleDe : eventsTable.titleEn,\n        content: lang === 'de' ? eventsTable.contentDe : eventsTable.contentEn,\n        location: eventsTable.location,\n        date: eventsTable.date,\n        time: eventsTable.time,\n        imagePath: eventsTable.imagePath,\n        externalLink: eventsTable.externalLink,\n    }).from(eventsTable).where(\n        and(\n            eq(eventsTable.type, eventType),\n            sql`EXTRACT(YEAR FROM ${eventsTable.date}) = ${currentYear}`,\n            lt(eventsTable.date, today)\n        )\n    ).orderBy(desc(eventsTable.date), desc(eventsTable.time));\n}\n\nexport const getFutureEvents = async (lang: 'de' | 'en', eventType: typeof eventTypeEnum.enumValues[number]) => {\n    const currentYear = new Date().getFullYear();\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format = new Date().getFullYear();\n\n    return await db.select({\n        id: eventsTable.id,\n        title: lang === 'de' ? eventsTable.titleDe : eventsTable.titleEn,\n        content: lang === 'de' ? eventsTable.contentDe : eventsTable.contentEn,\n        location: eventsTable.location,\n        date: eventsTable.date,\n        time: eventsTable.time,\n        imagePath: eventsTable.imagePath,\n        externalLink: eventsTable.externalLink,\n    }).from(eventsTable).where(\n        and(\n            eq(eventsTable.type, eventType),\n            sql`EXTRACT(YEAR FROM ${eventsTable.date}) = ${currentYear}`,\n            gte(eventsTable.date, today)\n        )\n    ).orderBy(eventsTable.date, eventsTable.time);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///app/apps/company-site/apps/company-site/src/app/%5Blang%5D/dates-events/page.tsx"],"sourcesContent":["import { eventTypeEnum, getFutureEvents, getPastEvents } from \"@rgs/db\";\nimport { EventsComposer } from \"@/components\"\nimport { getDictionary } from \"@/dictionaries\";\n\nexport default async function DatesEventsPage({ params }: { params: Promise<{ lang: 'de' | 'en' }> }) {\n    const lang = (await params).lang\n    const datesEventsPageDict = (await getDictionary(lang)).datesEventsPage\n\n    const pastEvents = await getPastEvents(lang, eventTypeEnum.enumValues[0]);\n    const futureEvents = await getFutureEvents(lang, eventTypeEnum.enumValues[0]);\n\n    return (\n        <EventsComposer\n            alreadyOverText={datesEventsPageDict.alreadyOver}\n            months={datesEventsPageDict.months}\n            pastEvents={pastEvents}\n            futureEvents={futureEvents}\n        />\n    );\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAFA;AAAA;AACA;;;;;AAGe,eAAe,gBAAgB,EAAE,MAAM,EAA8C;IAChG,MAAM,OAAO,CAAC,MAAM,MAAM,EAAE,IAAI;IAChC,MAAM,sBAAsB,CAAC,MAAM,CAAA,GAAA,8IAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,EAAE,eAAe;IAEvE,MAAM,aAAa,MAAM,CAAA,GAAA,yHAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,wHAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,EAAE;IACxE,MAAM,eAAe,MAAM,CAAA,GAAA,yHAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,wHAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,EAAE;IAE5E,qBACI,6WAAC,+JAAA,CAAA,iBAAc;QACX,iBAAiB,oBAAoB,WAAW;QAChD,QAAQ,oBAAoB,MAAM;QAClC,YAAY;QACZ,cAAc;;;;;;AAG1B"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}